// This file is generated by WOK (CPPJini).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#include <jjAIS_AIS_IndexedDataMapOfOwnerPrs.h>
#include <AIS_IndexedDataMapOfOwnerPrs.hxx>
#include <jcas.hxx>
#include <stdlib.h>
#include <Standard_ErrorHandler.hxx>
#include <Standard_Failure.hxx>
#include <Standard_SStream.hxx>

#include <Standard_Integer.hxx>
#include <SelectMgr_EntityOwner.hxx>
#include <Prs3d_Presentation.hxx>
#include <Standard_Boolean.hxx>


extern "C" {


JNIEXPORT void JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_AIS_1IndexedDataMapOfOwnerPrs_1Create_11 (JNIEnv *env, jobject theobj, jint NbBuckets)
{

jcas_Locking alock(env);
{
try {
AIS_IndexedDataMapOfOwnerPrs* theret = new AIS_IndexedDataMapOfOwnerPrs((Standard_Integer) NbBuckets);
jcas_SetHandle(env,theobj,theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_Assign (JNIEnv *env, jobject theobj, jobject Other)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
AIS_IndexedDataMapOfOwnerPrs* the_Other = (AIS_IndexedDataMapOfOwnerPrs*) jcas_GetHandle(env,Other);
if ( the_Other == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Other = new AIS_IndexedDataMapOfOwnerPrs ();
 // jcas_SetHandle ( env, Other, the_Other );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_IndexedDataMapOfOwnerPrs* the_this = (AIS_IndexedDataMapOfOwnerPrs*) jcas_GetHandle(env,theobj);
const AIS_IndexedDataMapOfOwnerPrs& theret = the_this->Assign(*the_Other);
thejret = jcas_CreateObject(env,"jjAIS/AIS_IndexedDataMapOfOwnerPrs",&theret,0);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_ReSize (JNIEnv *env, jobject theobj, jint NbBuckets)
{

jcas_Locking alock(env);
{
try {
AIS_IndexedDataMapOfOwnerPrs* the_this = (AIS_IndexedDataMapOfOwnerPrs*) jcas_GetHandle(env,theobj);
the_this->ReSize((Standard_Integer) NbBuckets);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_Clear (JNIEnv *env, jobject theobj)
{

jcas_Locking alock(env);
{
try {
AIS_IndexedDataMapOfOwnerPrs* the_this = (AIS_IndexedDataMapOfOwnerPrs*) jcas_GetHandle(env,theobj);
the_this->Clear();

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jint JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_Add (JNIEnv *env, jobject theobj, jobject K, jobject I)
{
jint thejret;

jcas_Locking alock(env);
{
try {
 Handle( SelectMgr_EntityOwner ) the_K;
 void*                ptr_K = jcas_GetHandle(env,K);
 
 if ( ptr_K != NULL ) the_K = *(   (  Handle( SelectMgr_EntityOwner )*  )ptr_K   );

 Handle( Prs3d_Presentation ) the_I;
 void*                ptr_I = jcas_GetHandle(env,I);
 
 if ( ptr_I != NULL ) the_I = *(   (  Handle( Prs3d_Presentation )*  )ptr_I   );

AIS_IndexedDataMapOfOwnerPrs* the_this = (AIS_IndexedDataMapOfOwnerPrs*) jcas_GetHandle(env,theobj);
 thejret = the_this->Add(the_K,the_I);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_Substitute (JNIEnv *env, jobject theobj, jint I, jobject K, jobject T)
{

jcas_Locking alock(env);
{
try {
 Handle( SelectMgr_EntityOwner ) the_K;
 void*                ptr_K = jcas_GetHandle(env,K);
 
 if ( ptr_K != NULL ) the_K = *(   (  Handle( SelectMgr_EntityOwner )*  )ptr_K   );

 Handle( Prs3d_Presentation ) the_T;
 void*                ptr_T = jcas_GetHandle(env,T);
 
 if ( ptr_T != NULL ) the_T = *(   (  Handle( Prs3d_Presentation )*  )ptr_T   );

AIS_IndexedDataMapOfOwnerPrs* the_this = (AIS_IndexedDataMapOfOwnerPrs*) jcas_GetHandle(env,theobj);
the_this->Substitute((Standard_Integer) I,the_K,the_T);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_RemoveLast (JNIEnv *env, jobject theobj)
{

jcas_Locking alock(env);
{
try {
AIS_IndexedDataMapOfOwnerPrs* the_this = (AIS_IndexedDataMapOfOwnerPrs*) jcas_GetHandle(env,theobj);
the_this->RemoveLast();

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_Contains (JNIEnv *env, jobject theobj, jobject K)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
 Handle( SelectMgr_EntityOwner ) the_K;
 void*                ptr_K = jcas_GetHandle(env,K);
 
 if ( ptr_K != NULL ) the_K = *(   (  Handle( SelectMgr_EntityOwner )*  )ptr_K   );

AIS_IndexedDataMapOfOwnerPrs* the_this = (AIS_IndexedDataMapOfOwnerPrs*) jcas_GetHandle(env,theobj);
 thejret = the_this->Contains(the_K);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_FindKey (JNIEnv *env, jobject theobj, jint I)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
AIS_IndexedDataMapOfOwnerPrs* the_this = (AIS_IndexedDataMapOfOwnerPrs*) jcas_GetHandle(env,theobj);
Handle(SelectMgr_EntityOwner)* theret = new Handle(SelectMgr_EntityOwner);
*theret = the_this->FindKey((Standard_Integer) I);
thejret = jcas_CreateObject(env,"jjAIS/SelectMgr_EntityOwner",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_FindFromIndex (JNIEnv *env, jobject theobj, jint I)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
AIS_IndexedDataMapOfOwnerPrs* the_this = (AIS_IndexedDataMapOfOwnerPrs*) jcas_GetHandle(env,theobj);
Handle(Prs3d_Presentation)* theret = new Handle(Prs3d_Presentation);
*theret = the_this->FindFromIndex((Standard_Integer) I);
thejret = jcas_CreateObject(env,"jjAIS/Prs3d_Presentation",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_ChangeFromIndex (JNIEnv *env, jobject theobj, jint I)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
AIS_IndexedDataMapOfOwnerPrs* the_this = (AIS_IndexedDataMapOfOwnerPrs*) jcas_GetHandle(env,theobj);
Handle(Prs3d_Presentation)* theret = new Handle(Prs3d_Presentation);
*theret = the_this->ChangeFromIndex((Standard_Integer) I);
thejret = jcas_CreateObject(env,"jjAIS/Prs3d_Presentation",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jint JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_FindIndex (JNIEnv *env, jobject theobj, jobject K)
{
jint thejret;

jcas_Locking alock(env);
{
try {
 Handle( SelectMgr_EntityOwner ) the_K;
 void*                ptr_K = jcas_GetHandle(env,K);
 
 if ( ptr_K != NULL ) the_K = *(   (  Handle( SelectMgr_EntityOwner )*  )ptr_K   );

AIS_IndexedDataMapOfOwnerPrs* the_this = (AIS_IndexedDataMapOfOwnerPrs*) jcas_GetHandle(env,theobj);
 thejret = the_this->FindIndex(the_K);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_FindFromKey (JNIEnv *env, jobject theobj, jobject K)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
 Handle( SelectMgr_EntityOwner ) the_K;
 void*                ptr_K = jcas_GetHandle(env,K);
 
 if ( ptr_K != NULL ) the_K = *(   (  Handle( SelectMgr_EntityOwner )*  )ptr_K   );

AIS_IndexedDataMapOfOwnerPrs* the_this = (AIS_IndexedDataMapOfOwnerPrs*) jcas_GetHandle(env,theobj);
Handle(Prs3d_Presentation)* theret = new Handle(Prs3d_Presentation);
*theret = the_this->FindFromKey(the_K);
thejret = jcas_CreateObject(env,"jjAIS/Prs3d_Presentation",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_ChangeFromKey (JNIEnv *env, jobject theobj, jobject K)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
 Handle( SelectMgr_EntityOwner ) the_K;
 void*                ptr_K = jcas_GetHandle(env,K);
 
 if ( ptr_K != NULL ) the_K = *(   (  Handle( SelectMgr_EntityOwner )*  )ptr_K   );

AIS_IndexedDataMapOfOwnerPrs* the_this = (AIS_IndexedDataMapOfOwnerPrs*) jcas_GetHandle(env,theobj);
Handle(Prs3d_Presentation)* theret = new Handle(Prs3d_Presentation);
*theret = the_this->ChangeFromKey(the_K);
thejret = jcas_CreateObject(env,"jjAIS/Prs3d_Presentation",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1IndexedDataMapOfOwnerPrs_FinalizeValue(JNIEnv *, jclass, jlong theid)
{
if (theid) {
  AIS_IndexedDataMapOfOwnerPrs* theobj = (AIS_IndexedDataMapOfOwnerPrs*) theid;
  delete theobj;
}
}


}
