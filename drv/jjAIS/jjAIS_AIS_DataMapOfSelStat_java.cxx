// This file is generated by WOK (CPPJini).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#include <jjAIS_AIS_DataMapOfSelStat.h>
#include <AIS_DataMapOfSelStat.hxx>
#include <jcas.hxx>
#include <stdlib.h>
#include <Standard_ErrorHandler.hxx>
#include <Standard_Failure.hxx>
#include <Standard_SStream.hxx>

#include <Standard_Integer.hxx>
#include <Standard_Boolean.hxx>
#include <SelectMgr_SelectableObject.hxx>
#include <AIS_LocalStatus.hxx>


extern "C" {


JNIEXPORT void JNICALL Java_jjAIS_AIS_1DataMapOfSelStat_AIS_1DataMapOfSelStat_1Create_11 (JNIEnv *env, jobject theobj, jint NbBuckets)
{

jcas_Locking alock(env);
{
try {
AIS_DataMapOfSelStat* theret = new AIS_DataMapOfSelStat((Standard_Integer) NbBuckets);
jcas_SetHandle(env,theobj,theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1DataMapOfSelStat_Assign (JNIEnv *env, jobject theobj, jobject Other)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
AIS_DataMapOfSelStat* the_Other = (AIS_DataMapOfSelStat*) jcas_GetHandle(env,Other);
if ( the_Other == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Other = new AIS_DataMapOfSelStat ();
 // jcas_SetHandle ( env, Other, the_Other );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_DataMapOfSelStat* the_this = (AIS_DataMapOfSelStat*) jcas_GetHandle(env,theobj);
const AIS_DataMapOfSelStat& theret = the_this->Assign(*the_Other);
thejret = jcas_CreateObject(env,"jjAIS/AIS_DataMapOfSelStat",&theret,0);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1DataMapOfSelStat_ReSize (JNIEnv *env, jobject theobj, jint NbBuckets)
{

jcas_Locking alock(env);
{
try {
AIS_DataMapOfSelStat* the_this = (AIS_DataMapOfSelStat*) jcas_GetHandle(env,theobj);
the_this->ReSize((Standard_Integer) NbBuckets);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1DataMapOfSelStat_Clear (JNIEnv *env, jobject theobj)
{

jcas_Locking alock(env);
{
try {
AIS_DataMapOfSelStat* the_this = (AIS_DataMapOfSelStat*) jcas_GetHandle(env,theobj);
the_this->Clear();

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_1DataMapOfSelStat_Bind (JNIEnv *env, jobject theobj, jobject K, jobject I)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
 Handle( SelectMgr_SelectableObject ) the_K;
 void*                ptr_K = jcas_GetHandle(env,K);
 
 if ( ptr_K != NULL ) the_K = *(   (  Handle( SelectMgr_SelectableObject )*  )ptr_K   );

 Handle( AIS_LocalStatus ) the_I;
 void*                ptr_I = jcas_GetHandle(env,I);
 
 if ( ptr_I != NULL ) the_I = *(   (  Handle( AIS_LocalStatus )*  )ptr_I   );

AIS_DataMapOfSelStat* the_this = (AIS_DataMapOfSelStat*) jcas_GetHandle(env,theobj);
 thejret = the_this->Bind(the_K,the_I);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_1DataMapOfSelStat_IsBound (JNIEnv *env, jobject theobj, jobject K)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
 Handle( SelectMgr_SelectableObject ) the_K;
 void*                ptr_K = jcas_GetHandle(env,K);
 
 if ( ptr_K != NULL ) the_K = *(   (  Handle( SelectMgr_SelectableObject )*  )ptr_K   );

AIS_DataMapOfSelStat* the_this = (AIS_DataMapOfSelStat*) jcas_GetHandle(env,theobj);
 thejret = the_this->IsBound(the_K);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_1DataMapOfSelStat_UnBind (JNIEnv *env, jobject theobj, jobject K)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
 Handle( SelectMgr_SelectableObject ) the_K;
 void*                ptr_K = jcas_GetHandle(env,K);
 
 if ( ptr_K != NULL ) the_K = *(   (  Handle( SelectMgr_SelectableObject )*  )ptr_K   );

AIS_DataMapOfSelStat* the_this = (AIS_DataMapOfSelStat*) jcas_GetHandle(env,theobj);
 thejret = the_this->UnBind(the_K);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1DataMapOfSelStat_Find (JNIEnv *env, jobject theobj, jobject K)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
 Handle( SelectMgr_SelectableObject ) the_K;
 void*                ptr_K = jcas_GetHandle(env,K);
 
 if ( ptr_K != NULL ) the_K = *(   (  Handle( SelectMgr_SelectableObject )*  )ptr_K   );

AIS_DataMapOfSelStat* the_this = (AIS_DataMapOfSelStat*) jcas_GetHandle(env,theobj);
Handle(AIS_LocalStatus)* theret = new Handle(AIS_LocalStatus);
*theret = the_this->Find(the_K);
thejret = jcas_CreateObject(env,"jjAIS/AIS_LocalStatus",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1DataMapOfSelStat_ChangeFind (JNIEnv *env, jobject theobj, jobject K)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
 Handle( SelectMgr_SelectableObject ) the_K;
 void*                ptr_K = jcas_GetHandle(env,K);
 
 if ( ptr_K != NULL ) the_K = *(   (  Handle( SelectMgr_SelectableObject )*  )ptr_K   );

AIS_DataMapOfSelStat* the_this = (AIS_DataMapOfSelStat*) jcas_GetHandle(env,theobj);
Handle(AIS_LocalStatus)* theret = new Handle(AIS_LocalStatus);
*theret = the_this->ChangeFind(the_K);
thejret = jcas_CreateObject(env,"jjAIS/AIS_LocalStatus",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1DataMapOfSelStat_FinalizeValue(JNIEnv *, jclass, jlong theid)
{
if (theid) {
  AIS_DataMapOfSelStat* theobj = (AIS_DataMapOfSelStat*) theid;
  delete theobj;
}
}


}
