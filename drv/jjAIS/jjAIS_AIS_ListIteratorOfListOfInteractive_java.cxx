// This file is generated by WOK (CPPJini).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#include <jjAIS_AIS_ListIteratorOfListOfInteractive.h>
#include <AIS_ListIteratorOfListOfInteractive.hxx>
#include <jcas.hxx>
#include <stdlib.h>
#include <Standard_ErrorHandler.hxx>
#include <Standard_Failure.hxx>
#include <Standard_SStream.hxx>

#include <AIS_ListOfInteractive.hxx>
#include <Standard_Boolean.hxx>
#include <AIS_InteractiveObject.hxx>


extern "C" {


JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListIteratorOfListOfInteractive_AIS_1ListIteratorOfListOfInteractive_1Create_11 (JNIEnv *env, jobject theobj)
{

jcas_Locking alock(env);
{
try {
AIS_ListIteratorOfListOfInteractive* theret = new AIS_ListIteratorOfListOfInteractive();
jcas_SetHandle(env,theobj,theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListIteratorOfListOfInteractive_AIS_1ListIteratorOfListOfInteractive_1Create_12 (JNIEnv *env, jobject theobj, jobject L)
{

jcas_Locking alock(env);
{
try {
AIS_ListOfInteractive* the_L = (AIS_ListOfInteractive*) jcas_GetHandle(env,L);
if ( the_L == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_L = new AIS_ListOfInteractive ();
 // jcas_SetHandle ( env, L, the_L );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_ListIteratorOfListOfInteractive* theret = new AIS_ListIteratorOfListOfInteractive(*the_L);
jcas_SetHandle(env,theobj,theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListIteratorOfListOfInteractive_Initialize (JNIEnv *env, jobject theobj, jobject L)
{

jcas_Locking alock(env);
{
try {
AIS_ListOfInteractive* the_L = (AIS_ListOfInteractive*) jcas_GetHandle(env,L);
if ( the_L == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_L = new AIS_ListOfInteractive ();
 // jcas_SetHandle ( env, L, the_L );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_ListIteratorOfListOfInteractive* the_this = (AIS_ListIteratorOfListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->Initialize(*the_L);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_1ListIteratorOfListOfInteractive_More (JNIEnv *env, jobject theobj)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
AIS_ListIteratorOfListOfInteractive* the_this = (AIS_ListIteratorOfListOfInteractive*) jcas_GetHandle(env,theobj);
 thejret = the_this->More();

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListIteratorOfListOfInteractive_Next (JNIEnv *env, jobject theobj)
{

jcas_Locking alock(env);
{
try {
AIS_ListIteratorOfListOfInteractive* the_this = (AIS_ListIteratorOfListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->Next();

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1ListIteratorOfListOfInteractive_Value (JNIEnv *env, jobject theobj)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
AIS_ListIteratorOfListOfInteractive* the_this = (AIS_ListIteratorOfListOfInteractive*) jcas_GetHandle(env,theobj);
Handle(AIS_InteractiveObject)* theret = new Handle(AIS_InteractiveObject);
*theret = the_this->Value();
thejret = jcas_CreateObject(env,"jjAIS/AIS_InteractiveObject",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListIteratorOfListOfInteractive_FinalizeValue(JNIEnv *, jclass, jlong theid)
{
if (theid) {
  AIS_ListIteratorOfListOfInteractive* theobj = (AIS_ListIteratorOfListOfInteractive*) theid;
  delete theobj;
}
}


}
