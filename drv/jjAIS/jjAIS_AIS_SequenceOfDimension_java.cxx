// This file is generated by WOK (CPPJini).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#include <jjAIS_AIS_SequenceOfDimension.h>
#include <AIS_SequenceOfDimension.hxx>
#include <jcas.hxx>
#include <stdlib.h>
#include <Standard_ErrorHandler.hxx>
#include <Standard_Failure.hxx>
#include <Standard_SStream.hxx>

#include <AIS_Relation.hxx>
#include <Standard_Integer.hxx>


extern "C" {


JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_AIS_1SequenceOfDimension_1Create_11 (JNIEnv *env, jobject theobj)
{

jcas_Locking alock(env);
{
try {
AIS_SequenceOfDimension* theret = new AIS_SequenceOfDimension();
jcas_SetHandle(env,theobj,theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_Clear (JNIEnv *env, jobject theobj)
{

jcas_Locking alock(env);
{
try {
AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
the_this->Clear();

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1SequenceOfDimension_Assign (JNIEnv *env, jobject theobj, jobject Other)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
AIS_SequenceOfDimension* the_Other = (AIS_SequenceOfDimension*) jcas_GetHandle(env,Other);
if ( the_Other == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Other = new AIS_SequenceOfDimension ();
 // jcas_SetHandle ( env, Other, the_Other );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
const AIS_SequenceOfDimension& theret = the_this->Assign(*the_Other);
thejret = jcas_CreateObject(env,"jjAIS/AIS_SequenceOfDimension",&theret,0);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_AIS_1SequenceOfDimension_1Append_11 (JNIEnv *env, jobject theobj, jobject T)
{

jcas_Locking alock(env);
{
try {
 Handle( AIS_Relation ) the_T;
 void*                ptr_T = jcas_GetHandle(env,T);
 
 if ( ptr_T != NULL ) the_T = *(   (  Handle( AIS_Relation )*  )ptr_T   );

AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
the_this->Append(the_T);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_AIS_1SequenceOfDimension_1Append_12 (JNIEnv *env, jobject theobj, jobject S)
{

jcas_Locking alock(env);
{
try {
AIS_SequenceOfDimension* the_S = (AIS_SequenceOfDimension*) jcas_GetHandle(env,S);
if ( the_S == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_S = new AIS_SequenceOfDimension ();
 // jcas_SetHandle ( env, S, the_S );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
the_this->Append(*the_S);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_AIS_1SequenceOfDimension_1Prepend_11 (JNIEnv *env, jobject theobj, jobject T)
{

jcas_Locking alock(env);
{
try {
 Handle( AIS_Relation ) the_T;
 void*                ptr_T = jcas_GetHandle(env,T);
 
 if ( ptr_T != NULL ) the_T = *(   (  Handle( AIS_Relation )*  )ptr_T   );

AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
the_this->Prepend(the_T);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_AIS_1SequenceOfDimension_1Prepend_12 (JNIEnv *env, jobject theobj, jobject S)
{

jcas_Locking alock(env);
{
try {
AIS_SequenceOfDimension* the_S = (AIS_SequenceOfDimension*) jcas_GetHandle(env,S);
if ( the_S == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_S = new AIS_SequenceOfDimension ();
 // jcas_SetHandle ( env, S, the_S );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
the_this->Prepend(*the_S);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_AIS_1SequenceOfDimension_1InsertBefore_11 (JNIEnv *env, jobject theobj, jint Index, jobject T)
{

jcas_Locking alock(env);
{
try {
 Handle( AIS_Relation ) the_T;
 void*                ptr_T = jcas_GetHandle(env,T);
 
 if ( ptr_T != NULL ) the_T = *(   (  Handle( AIS_Relation )*  )ptr_T   );

AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
the_this->InsertBefore((Standard_Integer) Index,the_T);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_AIS_1SequenceOfDimension_1InsertBefore_12 (JNIEnv *env, jobject theobj, jint Index, jobject S)
{

jcas_Locking alock(env);
{
try {
AIS_SequenceOfDimension* the_S = (AIS_SequenceOfDimension*) jcas_GetHandle(env,S);
if ( the_S == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_S = new AIS_SequenceOfDimension ();
 // jcas_SetHandle ( env, S, the_S );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
the_this->InsertBefore((Standard_Integer) Index,*the_S);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_AIS_1SequenceOfDimension_1InsertAfter_11 (JNIEnv *env, jobject theobj, jint Index, jobject T)
{

jcas_Locking alock(env);
{
try {
 Handle( AIS_Relation ) the_T;
 void*                ptr_T = jcas_GetHandle(env,T);
 
 if ( ptr_T != NULL ) the_T = *(   (  Handle( AIS_Relation )*  )ptr_T   );

AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
the_this->InsertAfter((Standard_Integer) Index,the_T);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_AIS_1SequenceOfDimension_1InsertAfter_12 (JNIEnv *env, jobject theobj, jint Index, jobject S)
{

jcas_Locking alock(env);
{
try {
AIS_SequenceOfDimension* the_S = (AIS_SequenceOfDimension*) jcas_GetHandle(env,S);
if ( the_S == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_S = new AIS_SequenceOfDimension ();
 // jcas_SetHandle ( env, S, the_S );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
the_this->InsertAfter((Standard_Integer) Index,*the_S);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1SequenceOfDimension_First (JNIEnv *env, jobject theobj)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
Handle(AIS_Relation)* theret = new Handle(AIS_Relation);
*theret = the_this->First();
thejret = jcas_CreateObject(env,"jjAIS/AIS_Relation",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1SequenceOfDimension_Last (JNIEnv *env, jobject theobj)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
Handle(AIS_Relation)* theret = new Handle(AIS_Relation);
*theret = the_this->Last();
thejret = jcas_CreateObject(env,"jjAIS/AIS_Relation",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_Split (JNIEnv *env, jobject theobj, jint Index, jobject Sub)
{

jcas_Locking alock(env);
{
try {
AIS_SequenceOfDimension* the_Sub = (AIS_SequenceOfDimension*) jcas_GetHandle(env,Sub);
if ( the_Sub == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Sub = new AIS_SequenceOfDimension ();
 // jcas_SetHandle ( env, Sub, the_Sub );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
the_this->Split((Standard_Integer) Index,*the_Sub);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1SequenceOfDimension_Value (JNIEnv *env, jobject theobj, jint Index)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
Handle(AIS_Relation)* theret = new Handle(AIS_Relation);
*theret = the_this->Value((Standard_Integer) Index);
thejret = jcas_CreateObject(env,"jjAIS/AIS_Relation",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_SetValue (JNIEnv *env, jobject theobj, jint Index, jobject I)
{

jcas_Locking alock(env);
{
try {
 Handle( AIS_Relation ) the_I;
 void*                ptr_I = jcas_GetHandle(env,I);
 
 if ( ptr_I != NULL ) the_I = *(   (  Handle( AIS_Relation )*  )ptr_I   );

AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
the_this->SetValue((Standard_Integer) Index,the_I);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1SequenceOfDimension_ChangeValue (JNIEnv *env, jobject theobj, jint Index)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
Handle(AIS_Relation)* theret = new Handle(AIS_Relation);
*theret = the_this->ChangeValue((Standard_Integer) Index);
thejret = jcas_CreateObject(env,"jjAIS/AIS_Relation",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_AIS_1SequenceOfDimension_1Remove_11 (JNIEnv *env, jobject theobj, jint Index)
{

jcas_Locking alock(env);
{
try {
AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
the_this->Remove((Standard_Integer) Index);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_AIS_1SequenceOfDimension_1Remove_12 (JNIEnv *env, jobject theobj, jint FromIndex, jint ToIndex)
{

jcas_Locking alock(env);
{
try {
AIS_SequenceOfDimension* the_this = (AIS_SequenceOfDimension*) jcas_GetHandle(env,theobj);
the_this->Remove((Standard_Integer) FromIndex,(Standard_Integer) ToIndex);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1SequenceOfDimension_FinalizeValue(JNIEnv *, jclass, jlong theid)
{
if (theid) {
  AIS_SequenceOfDimension* theobj = (AIS_SequenceOfDimension*) theid;
  delete theobj;
}
}


}
