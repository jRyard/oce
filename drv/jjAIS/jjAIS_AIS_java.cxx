// This file is generated by WOK (CPPJini).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.


#include <jjAIS_AIS.h>
#include <AIS.hxx>
#include <jcas.hxx>
#include <stdlib.h>
#include <Standard_ErrorHandler.hxx>
#include <Standard_Failure.hxx>
#include <Standard_SStream.hxx>

#include <gp_Pnt.hxx>
#include <TopoDS_Shape.hxx>
#include <Standard_Boolean.hxx>
#include <TopoDS_Edge.hxx>
#include <Geom_Curve.hxx>
#include <Geom_Plane.hxx>
#include <Standard_Integer.hxx>
#include <Standard_Real.hxx>
#include <TopoDS_Vertex.hxx>
#include <TopoDS_Face.hxx>
#include <gp_Pln.hxx>
#include <Geom_Surface.hxx>
#include <AIS_KindOfSurface.hxx>
#include <gp_Dir.hxx>
#include <gp_Ax1.hxx>
#include <gp_Lin.hxx>
#include <Bnd_Box.hxx>
#include <gp_Elips.hxx>
#include <Prs3d_Presentation.hxx>
#include <AIS_Drawer.hxx>
#include <Quantity_NameOfColor.hxx>
#include <Aspect_TypeOfLine.hxx>
#include <Aspect_TypeOfMarker.hxx>


extern "C" {


JNIEXPORT jobject JNICALL Java_jjAIS_AIS_Nearest (JNIEnv *env, jclass, jobject aShape, jobject aPoint)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
TopoDS_Shape* the_aShape = (TopoDS_Shape*) jcas_GetHandle(env,aShape);
if ( the_aShape == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aShape = new TopoDS_Shape ();
 // jcas_SetHandle ( env, aShape, the_aShape );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_aPoint = (gp_Pnt*) jcas_GetHandle(env,aPoint);
if ( the_aPoint == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aPoint = new gp_Pnt ();
 // jcas_SetHandle ( env, aPoint, the_aPoint );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* theret = new gp_Pnt(AIS::Nearest(*the_aShape,*the_aPoint));
thejret = jcas_CreateObject(env,"jjAIS/gp_Pnt",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_Farest (JNIEnv *env, jclass, jobject aShape, jobject aPoint)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
TopoDS_Shape* the_aShape = (TopoDS_Shape*) jcas_GetHandle(env,aShape);
if ( the_aShape == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aShape = new TopoDS_Shape ();
 // jcas_SetHandle ( env, aShape, the_aShape );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_aPoint = (gp_Pnt*) jcas_GetHandle(env,aPoint);
if ( the_aPoint == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aPoint = new gp_Pnt ();
 // jcas_SetHandle ( env, aPoint, the_aPoint );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* theret = new gp_Pnt(AIS::Farest(*the_aShape,*the_aPoint));
thejret = jcas_CreateObject(env,"jjAIS/gp_Pnt",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_AIS_1ComputeGeometry_11 (JNIEnv *env, jclass, jobject anEdge, jobject aCurve, jobject FirstPnt, jobject LastPnt)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
TopoDS_Edge* the_anEdge = (TopoDS_Edge*) jcas_GetHandle(env,anEdge);
if ( the_anEdge == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_anEdge = new TopoDS_Edge ();
 // jcas_SetHandle ( env, anEdge, the_anEdge );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Curve ) the_aCurve;
 void*                ptr_aCurve = jcas_GetHandle(env,aCurve);
 
 if ( ptr_aCurve != NULL ) the_aCurve = *(   (  Handle( Geom_Curve )*  )ptr_aCurve   );

gp_Pnt* the_FirstPnt = (gp_Pnt*) jcas_GetHandle(env,FirstPnt);
if ( the_FirstPnt == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstPnt = new gp_Pnt ();
 // jcas_SetHandle ( env, FirstPnt, the_FirstPnt );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_LastPnt = (gp_Pnt*) jcas_GetHandle(env,LastPnt);
if ( the_LastPnt == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_LastPnt = new gp_Pnt ();
 // jcas_SetHandle ( env, LastPnt, the_LastPnt );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 thejret = AIS::ComputeGeometry(*the_anEdge,the_aCurve,*the_FirstPnt,*the_LastPnt);

 Handle( Geom_Curve )* theprevious_aCurve =
  (  Handle( Geom_Curve )*  )jcas_GetHandle ( env, aCurve );

 if ( theprevious_aCurve ) delete theprevious_aCurve;

 Handle( Geom_Curve )* thenew_aCurve = new Handle( Geom_Curve );

 ( *thenew_aCurve ) = the_aCurve;

 jcas_SetHandle (env, aCurve, thenew_aCurve );


}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_AIS_1ComputeGeometry_12 (JNIEnv *env, jclass, jobject anEdge, jobject aCurve, jobject FirstPnt, jobject LastPnt, jobject extCurve, jobject isinfinite, jobject isOnPlane, jobject aPlane)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
TopoDS_Edge* the_anEdge = (TopoDS_Edge*) jcas_GetHandle(env,anEdge);
if ( the_anEdge == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_anEdge = new TopoDS_Edge ();
 // jcas_SetHandle ( env, anEdge, the_anEdge );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Curve ) the_aCurve;
 void*                ptr_aCurve = jcas_GetHandle(env,aCurve);
 
 if ( ptr_aCurve != NULL ) the_aCurve = *(   (  Handle( Geom_Curve )*  )ptr_aCurve   );

gp_Pnt* the_FirstPnt = (gp_Pnt*) jcas_GetHandle(env,FirstPnt);
if ( the_FirstPnt == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstPnt = new gp_Pnt ();
 // jcas_SetHandle ( env, FirstPnt, the_FirstPnt );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_LastPnt = (gp_Pnt*) jcas_GetHandle(env,LastPnt);
if ( the_LastPnt == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_LastPnt = new gp_Pnt ();
 // jcas_SetHandle ( env, LastPnt, the_LastPnt );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Curve ) the_extCurve;
 void*                ptr_extCurve = jcas_GetHandle(env,extCurve);
 
 if ( ptr_extCurve != NULL ) the_extCurve = *(   (  Handle( Geom_Curve )*  )ptr_extCurve   );

Standard_Boolean the_isinfinite = jcas_GetBoolean(env,isinfinite);
Standard_Boolean the_isOnPlane = jcas_GetBoolean(env,isOnPlane);
 Handle( Geom_Plane ) the_aPlane;
 void*                ptr_aPlane = jcas_GetHandle(env,aPlane);
 
 if ( ptr_aPlane != NULL ) the_aPlane = *(   (  Handle( Geom_Plane )*  )ptr_aPlane   );

 thejret = AIS::ComputeGeometry(*the_anEdge,the_aCurve,*the_FirstPnt,*the_LastPnt,the_extCurve,the_isinfinite,the_isOnPlane,the_aPlane);

 Handle( Geom_Curve )* theprevious_aCurve =
  (  Handle( Geom_Curve )*  )jcas_GetHandle ( env, aCurve );

 if ( theprevious_aCurve ) delete theprevious_aCurve;

 Handle( Geom_Curve )* thenew_aCurve = new Handle( Geom_Curve );

 ( *thenew_aCurve ) = the_aCurve;

 jcas_SetHandle (env, aCurve, thenew_aCurve );


 Handle( Geom_Curve )* theprevious_extCurve =
  (  Handle( Geom_Curve )*  )jcas_GetHandle ( env, extCurve );

 if ( theprevious_extCurve ) delete theprevious_extCurve;

 Handle( Geom_Curve )* thenew_extCurve = new Handle( Geom_Curve );

 ( *thenew_extCurve ) = the_extCurve;

 jcas_SetHandle (env, extCurve, thenew_extCurve );

jcas_SetBoolean(env,isinfinite,the_isinfinite);
jcas_SetBoolean(env,isOnPlane,the_isOnPlane);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_AIS_1ComputeGeometry_13 (JNIEnv *env, jclass, jobject anEdge1, jobject anEdge2, jobject aCurve1, jobject aCurve2, jobject FirstPnt1, jobject LastPnt1, jobject FirstPnt2, jobject LastPnt2, jobject aPlane)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
TopoDS_Edge* the_anEdge1 = (TopoDS_Edge*) jcas_GetHandle(env,anEdge1);
if ( the_anEdge1 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_anEdge1 = new TopoDS_Edge ();
 // jcas_SetHandle ( env, anEdge1, the_anEdge1 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
TopoDS_Edge* the_anEdge2 = (TopoDS_Edge*) jcas_GetHandle(env,anEdge2);
if ( the_anEdge2 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_anEdge2 = new TopoDS_Edge ();
 // jcas_SetHandle ( env, anEdge2, the_anEdge2 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Curve ) the_aCurve1;
 void*                ptr_aCurve1 = jcas_GetHandle(env,aCurve1);
 
 if ( ptr_aCurve1 != NULL ) the_aCurve1 = *(   (  Handle( Geom_Curve )*  )ptr_aCurve1   );

 Handle( Geom_Curve ) the_aCurve2;
 void*                ptr_aCurve2 = jcas_GetHandle(env,aCurve2);
 
 if ( ptr_aCurve2 != NULL ) the_aCurve2 = *(   (  Handle( Geom_Curve )*  )ptr_aCurve2   );

gp_Pnt* the_FirstPnt1 = (gp_Pnt*) jcas_GetHandle(env,FirstPnt1);
if ( the_FirstPnt1 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstPnt1 = new gp_Pnt ();
 // jcas_SetHandle ( env, FirstPnt1, the_FirstPnt1 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_LastPnt1 = (gp_Pnt*) jcas_GetHandle(env,LastPnt1);
if ( the_LastPnt1 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_LastPnt1 = new gp_Pnt ();
 // jcas_SetHandle ( env, LastPnt1, the_LastPnt1 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_FirstPnt2 = (gp_Pnt*) jcas_GetHandle(env,FirstPnt2);
if ( the_FirstPnt2 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstPnt2 = new gp_Pnt ();
 // jcas_SetHandle ( env, FirstPnt2, the_FirstPnt2 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_LastPnt2 = (gp_Pnt*) jcas_GetHandle(env,LastPnt2);
if ( the_LastPnt2 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_LastPnt2 = new gp_Pnt ();
 // jcas_SetHandle ( env, LastPnt2, the_LastPnt2 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Plane ) the_aPlane;
 void*                ptr_aPlane = jcas_GetHandle(env,aPlane);
 
 if ( ptr_aPlane != NULL ) the_aPlane = *(   (  Handle( Geom_Plane )*  )ptr_aPlane   );

 thejret = AIS::ComputeGeometry(*the_anEdge1,*the_anEdge2,the_aCurve1,the_aCurve2,*the_FirstPnt1,*the_LastPnt1,*the_FirstPnt2,*the_LastPnt2,the_aPlane);

 Handle( Geom_Curve )* theprevious_aCurve1 =
  (  Handle( Geom_Curve )*  )jcas_GetHandle ( env, aCurve1 );

 if ( theprevious_aCurve1 ) delete theprevious_aCurve1;

 Handle( Geom_Curve )* thenew_aCurve1 = new Handle( Geom_Curve );

 ( *thenew_aCurve1 ) = the_aCurve1;

 jcas_SetHandle (env, aCurve1, thenew_aCurve1 );


 Handle( Geom_Curve )* theprevious_aCurve2 =
  (  Handle( Geom_Curve )*  )jcas_GetHandle ( env, aCurve2 );

 if ( theprevious_aCurve2 ) delete theprevious_aCurve2;

 Handle( Geom_Curve )* thenew_aCurve2 = new Handle( Geom_Curve );

 ( *thenew_aCurve2 ) = the_aCurve2;

 jcas_SetHandle (env, aCurve2, thenew_aCurve2 );


}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_AIS_1ComputeGeometry_14 (JNIEnv *env, jclass, jobject anEdge1, jobject anEdge2, jobject indexExt, jobject aCurve1, jobject aCurve2, jobject FirstPnt1, jobject LastPnt1, jobject FirstPnt2, jobject LastPnt2, jobject ExtCurve, jobject isinfinite1, jobject isinfinite2, jobject aPlane)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
TopoDS_Edge* the_anEdge1 = (TopoDS_Edge*) jcas_GetHandle(env,anEdge1);
if ( the_anEdge1 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_anEdge1 = new TopoDS_Edge ();
 // jcas_SetHandle ( env, anEdge1, the_anEdge1 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
TopoDS_Edge* the_anEdge2 = (TopoDS_Edge*) jcas_GetHandle(env,anEdge2);
if ( the_anEdge2 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_anEdge2 = new TopoDS_Edge ();
 // jcas_SetHandle ( env, anEdge2, the_anEdge2 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
Standard_Integer the_indexExt = jcas_GetInteger(env,indexExt);
 Handle( Geom_Curve ) the_aCurve1;
 void*                ptr_aCurve1 = jcas_GetHandle(env,aCurve1);
 
 if ( ptr_aCurve1 != NULL ) the_aCurve1 = *(   (  Handle( Geom_Curve )*  )ptr_aCurve1   );

 Handle( Geom_Curve ) the_aCurve2;
 void*                ptr_aCurve2 = jcas_GetHandle(env,aCurve2);
 
 if ( ptr_aCurve2 != NULL ) the_aCurve2 = *(   (  Handle( Geom_Curve )*  )ptr_aCurve2   );

gp_Pnt* the_FirstPnt1 = (gp_Pnt*) jcas_GetHandle(env,FirstPnt1);
if ( the_FirstPnt1 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstPnt1 = new gp_Pnt ();
 // jcas_SetHandle ( env, FirstPnt1, the_FirstPnt1 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_LastPnt1 = (gp_Pnt*) jcas_GetHandle(env,LastPnt1);
if ( the_LastPnt1 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_LastPnt1 = new gp_Pnt ();
 // jcas_SetHandle ( env, LastPnt1, the_LastPnt1 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_FirstPnt2 = (gp_Pnt*) jcas_GetHandle(env,FirstPnt2);
if ( the_FirstPnt2 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstPnt2 = new gp_Pnt ();
 // jcas_SetHandle ( env, FirstPnt2, the_FirstPnt2 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_LastPnt2 = (gp_Pnt*) jcas_GetHandle(env,LastPnt2);
if ( the_LastPnt2 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_LastPnt2 = new gp_Pnt ();
 // jcas_SetHandle ( env, LastPnt2, the_LastPnt2 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Curve ) the_ExtCurve;
 void*                ptr_ExtCurve = jcas_GetHandle(env,ExtCurve);
 
 if ( ptr_ExtCurve != NULL ) the_ExtCurve = *(   (  Handle( Geom_Curve )*  )ptr_ExtCurve   );

Standard_Boolean the_isinfinite1 = jcas_GetBoolean(env,isinfinite1);
Standard_Boolean the_isinfinite2 = jcas_GetBoolean(env,isinfinite2);
 Handle( Geom_Plane ) the_aPlane;
 void*                ptr_aPlane = jcas_GetHandle(env,aPlane);
 
 if ( ptr_aPlane != NULL ) the_aPlane = *(   (  Handle( Geom_Plane )*  )ptr_aPlane   );

 thejret = AIS::ComputeGeometry(*the_anEdge1,*the_anEdge2,the_indexExt,the_aCurve1,the_aCurve2,*the_FirstPnt1,*the_LastPnt1,*the_FirstPnt2,*the_LastPnt2,the_ExtCurve,the_isinfinite1,the_isinfinite2,the_aPlane);
jcas_SetInteger(env,indexExt,the_indexExt);

 Handle( Geom_Curve )* theprevious_aCurve1 =
  (  Handle( Geom_Curve )*  )jcas_GetHandle ( env, aCurve1 );

 if ( theprevious_aCurve1 ) delete theprevious_aCurve1;

 Handle( Geom_Curve )* thenew_aCurve1 = new Handle( Geom_Curve );

 ( *thenew_aCurve1 ) = the_aCurve1;

 jcas_SetHandle (env, aCurve1, thenew_aCurve1 );


 Handle( Geom_Curve )* theprevious_aCurve2 =
  (  Handle( Geom_Curve )*  )jcas_GetHandle ( env, aCurve2 );

 if ( theprevious_aCurve2 ) delete theprevious_aCurve2;

 Handle( Geom_Curve )* thenew_aCurve2 = new Handle( Geom_Curve );

 ( *thenew_aCurve2 ) = the_aCurve2;

 jcas_SetHandle (env, aCurve2, thenew_aCurve2 );


 Handle( Geom_Curve )* theprevious_ExtCurve =
  (  Handle( Geom_Curve )*  )jcas_GetHandle ( env, ExtCurve );

 if ( theprevious_ExtCurve ) delete theprevious_ExtCurve;

 Handle( Geom_Curve )* thenew_ExtCurve = new Handle( Geom_Curve );

 ( *thenew_ExtCurve ) = the_ExtCurve;

 jcas_SetHandle (env, ExtCurve, thenew_ExtCurve );

jcas_SetBoolean(env,isinfinite1,the_isinfinite1);
jcas_SetBoolean(env,isinfinite2,the_isinfinite2);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_ComputeGeomCurve (JNIEnv *env, jclass, jobject aCurve, jdouble first1, jdouble last1, jobject FirstPnt1, jobject LastPnt1, jobject aPlane, jobject isOnPlane)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
 Handle( Geom_Curve ) the_aCurve;
 void*                ptr_aCurve = jcas_GetHandle(env,aCurve);
 
 if ( ptr_aCurve != NULL ) the_aCurve = *(   (  Handle( Geom_Curve )*  )ptr_aCurve   );

gp_Pnt* the_FirstPnt1 = (gp_Pnt*) jcas_GetHandle(env,FirstPnt1);
if ( the_FirstPnt1 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstPnt1 = new gp_Pnt ();
 // jcas_SetHandle ( env, FirstPnt1, the_FirstPnt1 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_LastPnt1 = (gp_Pnt*) jcas_GetHandle(env,LastPnt1);
if ( the_LastPnt1 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_LastPnt1 = new gp_Pnt ();
 // jcas_SetHandle ( env, LastPnt1, the_LastPnt1 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Plane ) the_aPlane;
 void*                ptr_aPlane = jcas_GetHandle(env,aPlane);
 
 if ( ptr_aPlane != NULL ) the_aPlane = *(   (  Handle( Geom_Plane )*  )ptr_aPlane   );

Standard_Boolean the_isOnPlane = jcas_GetBoolean(env,isOnPlane);
 thejret = AIS::ComputeGeomCurve(the_aCurve,(Standard_Real) first1,(Standard_Real) last1,*the_FirstPnt1,*the_LastPnt1,the_aPlane,the_isOnPlane);

 Handle( Geom_Curve )* theprevious_aCurve =
  (  Handle( Geom_Curve )*  )jcas_GetHandle ( env, aCurve );

 if ( theprevious_aCurve ) delete theprevious_aCurve;

 Handle( Geom_Curve )* thenew_aCurve = new Handle( Geom_Curve );

 ( *thenew_aCurve ) = the_aCurve;

 jcas_SetHandle (env, aCurve, thenew_aCurve );

jcas_SetBoolean(env,isOnPlane,the_isOnPlane);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_AIS_1ComputeGeometry_15 (JNIEnv *env, jclass, jobject aVertex, jobject point, jobject aPlane, jobject isOnPlane)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
TopoDS_Vertex* the_aVertex = (TopoDS_Vertex*) jcas_GetHandle(env,aVertex);
if ( the_aVertex == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aVertex = new TopoDS_Vertex ();
 // jcas_SetHandle ( env, aVertex, the_aVertex );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_point = (gp_Pnt*) jcas_GetHandle(env,point);
if ( the_point == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_point = new gp_Pnt ();
 // jcas_SetHandle ( env, point, the_point );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Plane ) the_aPlane;
 void*                ptr_aPlane = jcas_GetHandle(env,aPlane);
 
 if ( ptr_aPlane != NULL ) the_aPlane = *(   (  Handle( Geom_Plane )*  )ptr_aPlane   );

Standard_Boolean the_isOnPlane = jcas_GetBoolean(env,isOnPlane);
 thejret = AIS::ComputeGeometry(*the_aVertex,*the_point,the_aPlane,the_isOnPlane);
jcas_SetBoolean(env,isOnPlane,the_isOnPlane);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_GetPlaneFromFace (JNIEnv *env, jclass, jobject aFace, jobject aPlane, jobject aSurf, jobject aSurfType, jobject Offset)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
TopoDS_Face* the_aFace = (TopoDS_Face*) jcas_GetHandle(env,aFace);
if ( the_aFace == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aFace = new TopoDS_Face ();
 // jcas_SetHandle ( env, aFace, the_aFace );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pln* the_aPlane = (gp_Pln*) jcas_GetHandle(env,aPlane);
if ( the_aPlane == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aPlane = new gp_Pln ();
 // jcas_SetHandle ( env, aPlane, the_aPlane );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Surface ) the_aSurf;
 void*                ptr_aSurf = jcas_GetHandle(env,aSurf);
 
 if ( ptr_aSurf != NULL ) the_aSurf = *(   (  Handle( Geom_Surface )*  )ptr_aSurf   );

AIS_KindOfSurface the_aSurfType = ( AIS_KindOfSurface )jcas_GetShort ( env, aSurfType );
Standard_Real the_Offset = jcas_GetReal(env,Offset);
 thejret = AIS::GetPlaneFromFace(*the_aFace,*the_aPlane,the_aSurf,the_aSurfType,the_Offset);

 Handle( Geom_Surface )* theprevious_aSurf =
  (  Handle( Geom_Surface )*  )jcas_GetHandle ( env, aSurf );

 if ( theprevious_aSurf ) delete theprevious_aSurf;

 Handle( Geom_Surface )* thenew_aSurf = new Handle( Geom_Surface );

 ( *thenew_aSurf ) = the_aSurf;

 jcas_SetHandle (env, aSurf, thenew_aSurf );

jcas_SetShort(env,aSurfType,the_aSurfType);
jcas_SetReal(env,Offset,the_Offset);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_InitFaceLength (JNIEnv *env, jclass, jobject aFace, jobject aPlane, jobject aSurface, jobject aSurfaceType, jobject anOffset)
{

jcas_Locking alock(env);
{
try {
TopoDS_Face* the_aFace = (TopoDS_Face*) jcas_GetHandle(env,aFace);
if ( the_aFace == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aFace = new TopoDS_Face ();
 // jcas_SetHandle ( env, aFace, the_aFace );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pln* the_aPlane = (gp_Pln*) jcas_GetHandle(env,aPlane);
if ( the_aPlane == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aPlane = new gp_Pln ();
 // jcas_SetHandle ( env, aPlane, the_aPlane );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Surface ) the_aSurface;
 void*                ptr_aSurface = jcas_GetHandle(env,aSurface);
 
 if ( ptr_aSurface != NULL ) the_aSurface = *(   (  Handle( Geom_Surface )*  )ptr_aSurface   );

AIS_KindOfSurface the_aSurfaceType = ( AIS_KindOfSurface )jcas_GetShort ( env, aSurfaceType );
Standard_Real the_anOffset = jcas_GetReal(env,anOffset);
AIS::InitFaceLength(*the_aFace,*the_aPlane,the_aSurface,the_aSurfaceType,the_anOffset);

 Handle( Geom_Surface )* theprevious_aSurface =
  (  Handle( Geom_Surface )*  )jcas_GetHandle ( env, aSurface );

 if ( theprevious_aSurface ) delete theprevious_aSurface;

 Handle( Geom_Surface )* thenew_aSurface = new Handle( Geom_Surface );

 ( *thenew_aSurface ) = the_aSurface;

 jcas_SetHandle (env, aSurface, thenew_aSurface );

jcas_SetShort(env,aSurfaceType,the_aSurfaceType);
jcas_SetReal(env,anOffset,the_anOffset);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_ComputeLengthBetweenPlanarFaces (JNIEnv *env, jclass, jobject FirstFace, jobject SecondFace, jobject Plane1, jobject Plane2, jobject Value, jobject FirstAttach, jobject SecondAttach, jobject DirAttach, jboolean AutomaticPos, jobject Position)
{

jcas_Locking alock(env);
{
try {
TopoDS_Face* the_FirstFace = (TopoDS_Face*) jcas_GetHandle(env,FirstFace);
if ( the_FirstFace == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstFace = new TopoDS_Face ();
 // jcas_SetHandle ( env, FirstFace, the_FirstFace );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
TopoDS_Face* the_SecondFace = (TopoDS_Face*) jcas_GetHandle(env,SecondFace);
if ( the_SecondFace == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_SecondFace = new TopoDS_Face ();
 // jcas_SetHandle ( env, SecondFace, the_SecondFace );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pln* the_Plane1 = (gp_Pln*) jcas_GetHandle(env,Plane1);
if ( the_Plane1 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Plane1 = new gp_Pln ();
 // jcas_SetHandle ( env, Plane1, the_Plane1 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pln* the_Plane2 = (gp_Pln*) jcas_GetHandle(env,Plane2);
if ( the_Plane2 == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Plane2 = new gp_Pln ();
 // jcas_SetHandle ( env, Plane2, the_Plane2 );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
Standard_Real the_Value = jcas_GetReal(env,Value);
gp_Pnt* the_FirstAttach = (gp_Pnt*) jcas_GetHandle(env,FirstAttach);
if ( the_FirstAttach == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstAttach = new gp_Pnt ();
 // jcas_SetHandle ( env, FirstAttach, the_FirstAttach );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_SecondAttach = (gp_Pnt*) jcas_GetHandle(env,SecondAttach);
if ( the_SecondAttach == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_SecondAttach = new gp_Pnt ();
 // jcas_SetHandle ( env, SecondAttach, the_SecondAttach );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Dir* the_DirAttach = (gp_Dir*) jcas_GetHandle(env,DirAttach);
if ( the_DirAttach == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_DirAttach = new gp_Dir ();
 // jcas_SetHandle ( env, DirAttach, the_DirAttach );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_Position = (gp_Pnt*) jcas_GetHandle(env,Position);
if ( the_Position == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Position = new gp_Pnt ();
 // jcas_SetHandle ( env, Position, the_Position );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS::ComputeLengthBetweenPlanarFaces(*the_FirstFace,*the_SecondFace,*the_Plane1,*the_Plane2,the_Value,*the_FirstAttach,*the_SecondAttach,*the_DirAttach,(Standard_Boolean) AutomaticPos,*the_Position);
jcas_SetReal(env,Value,the_Value);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_ComputeLengthBetweenCurvilinearFaces (JNIEnv *env, jclass, jobject FirstFace, jobject SecondFace, jobject FirstSurf, jobject SecondSurf, jboolean AutomaticPos, jobject Value, jobject Position, jobject FirstAttach, jobject SecondAttach, jobject DirAttach)
{

jcas_Locking alock(env);
{
try {
TopoDS_Face* the_FirstFace = (TopoDS_Face*) jcas_GetHandle(env,FirstFace);
if ( the_FirstFace == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstFace = new TopoDS_Face ();
 // jcas_SetHandle ( env, FirstFace, the_FirstFace );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
TopoDS_Face* the_SecondFace = (TopoDS_Face*) jcas_GetHandle(env,SecondFace);
if ( the_SecondFace == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_SecondFace = new TopoDS_Face ();
 // jcas_SetHandle ( env, SecondFace, the_SecondFace );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Surface ) the_FirstSurf;
 void*                ptr_FirstSurf = jcas_GetHandle(env,FirstSurf);
 
 if ( ptr_FirstSurf != NULL ) the_FirstSurf = *(   (  Handle( Geom_Surface )*  )ptr_FirstSurf   );

 Handle( Geom_Surface ) the_SecondSurf;
 void*                ptr_SecondSurf = jcas_GetHandle(env,SecondSurf);
 
 if ( ptr_SecondSurf != NULL ) the_SecondSurf = *(   (  Handle( Geom_Surface )*  )ptr_SecondSurf   );

Standard_Real the_Value = jcas_GetReal(env,Value);
gp_Pnt* the_Position = (gp_Pnt*) jcas_GetHandle(env,Position);
if ( the_Position == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Position = new gp_Pnt ();
 // jcas_SetHandle ( env, Position, the_Position );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_FirstAttach = (gp_Pnt*) jcas_GetHandle(env,FirstAttach);
if ( the_FirstAttach == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstAttach = new gp_Pnt ();
 // jcas_SetHandle ( env, FirstAttach, the_FirstAttach );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_SecondAttach = (gp_Pnt*) jcas_GetHandle(env,SecondAttach);
if ( the_SecondAttach == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_SecondAttach = new gp_Pnt ();
 // jcas_SetHandle ( env, SecondAttach, the_SecondAttach );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Dir* the_DirAttach = (gp_Dir*) jcas_GetHandle(env,DirAttach);
if ( the_DirAttach == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_DirAttach = new gp_Dir ();
 // jcas_SetHandle ( env, DirAttach, the_DirAttach );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS::ComputeLengthBetweenCurvilinearFaces(*the_FirstFace,*the_SecondFace,the_FirstSurf,the_SecondSurf,(Standard_Boolean) AutomaticPos,the_Value,*the_Position,*the_FirstAttach,*the_SecondAttach,*the_DirAttach);

 Handle( Geom_Surface )* theprevious_FirstSurf =
  (  Handle( Geom_Surface )*  )jcas_GetHandle ( env, FirstSurf );

 if ( theprevious_FirstSurf ) delete theprevious_FirstSurf;

 Handle( Geom_Surface )* thenew_FirstSurf = new Handle( Geom_Surface );

 ( *thenew_FirstSurf ) = the_FirstSurf;

 jcas_SetHandle (env, FirstSurf, thenew_FirstSurf );


 Handle( Geom_Surface )* theprevious_SecondSurf =
  (  Handle( Geom_Surface )*  )jcas_GetHandle ( env, SecondSurf );

 if ( theprevious_SecondSurf ) delete theprevious_SecondSurf;

 Handle( Geom_Surface )* thenew_SecondSurf = new Handle( Geom_Surface );

 ( *thenew_SecondSurf ) = the_SecondSurf;

 jcas_SetHandle (env, SecondSurf, thenew_SecondSurf );

jcas_SetReal(env,Value,the_Value);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_ComputeAngleBetweenPlanarFaces (JNIEnv *env, jclass, jobject FirstFace, jobject SecondFace, jobject Surf2, jobject Axis, jdouble Value, jboolean AutomaticPos, jobject Position, jobject Center, jobject FirstAttach, jobject SecondAttach, jobject FirstDir, jobject SecondDir)
{

jcas_Locking alock(env);
{
try {
TopoDS_Face* the_FirstFace = (TopoDS_Face*) jcas_GetHandle(env,FirstFace);
if ( the_FirstFace == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstFace = new TopoDS_Face ();
 // jcas_SetHandle ( env, FirstFace, the_FirstFace );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
TopoDS_Face* the_SecondFace = (TopoDS_Face*) jcas_GetHandle(env,SecondFace);
if ( the_SecondFace == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_SecondFace = new TopoDS_Face ();
 // jcas_SetHandle ( env, SecondFace, the_SecondFace );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Surface ) the_Surf2;
 void*                ptr_Surf2 = jcas_GetHandle(env,Surf2);
 
 if ( ptr_Surf2 != NULL ) the_Surf2 = *(   (  Handle( Geom_Surface )*  )ptr_Surf2   );

gp_Ax1* the_Axis = (gp_Ax1*) jcas_GetHandle(env,Axis);
if ( the_Axis == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Axis = new gp_Ax1 ();
 // jcas_SetHandle ( env, Axis, the_Axis );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_Position = (gp_Pnt*) jcas_GetHandle(env,Position);
if ( the_Position == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Position = new gp_Pnt ();
 // jcas_SetHandle ( env, Position, the_Position );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_Center = (gp_Pnt*) jcas_GetHandle(env,Center);
if ( the_Center == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Center = new gp_Pnt ();
 // jcas_SetHandle ( env, Center, the_Center );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_FirstAttach = (gp_Pnt*) jcas_GetHandle(env,FirstAttach);
if ( the_FirstAttach == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstAttach = new gp_Pnt ();
 // jcas_SetHandle ( env, FirstAttach, the_FirstAttach );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_SecondAttach = (gp_Pnt*) jcas_GetHandle(env,SecondAttach);
if ( the_SecondAttach == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_SecondAttach = new gp_Pnt ();
 // jcas_SetHandle ( env, SecondAttach, the_SecondAttach );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Dir* the_FirstDir = (gp_Dir*) jcas_GetHandle(env,FirstDir);
if ( the_FirstDir == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstDir = new gp_Dir ();
 // jcas_SetHandle ( env, FirstDir, the_FirstDir );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Dir* the_SecondDir = (gp_Dir*) jcas_GetHandle(env,SecondDir);
if ( the_SecondDir == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_SecondDir = new gp_Dir ();
 // jcas_SetHandle ( env, SecondDir, the_SecondDir );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS::ComputeAngleBetweenPlanarFaces(*the_FirstFace,*the_SecondFace,the_Surf2,*the_Axis,(Standard_Real) Value,(Standard_Boolean) AutomaticPos,*the_Position,*the_Center,*the_FirstAttach,*the_SecondAttach,*the_FirstDir,*the_SecondDir);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_ComputeAngleBetweenCurvilinearFaces (JNIEnv *env, jclass, jobject FirstFace, jobject SecondFace, jobject FirstSurf, jobject SecondSurf, jshort FirstSurfType, jshort SecondSurfType, jobject Axis, jdouble Value, jboolean AutomaticPos, jobject Position, jobject Center, jobject FirstAttach, jobject SecondAttach, jobject FirstDir, jobject SecondDir, jobject Plane)
{

jcas_Locking alock(env);
{
try {
TopoDS_Face* the_FirstFace = (TopoDS_Face*) jcas_GetHandle(env,FirstFace);
if ( the_FirstFace == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstFace = new TopoDS_Face ();
 // jcas_SetHandle ( env, FirstFace, the_FirstFace );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
TopoDS_Face* the_SecondFace = (TopoDS_Face*) jcas_GetHandle(env,SecondFace);
if ( the_SecondFace == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_SecondFace = new TopoDS_Face ();
 // jcas_SetHandle ( env, SecondFace, the_SecondFace );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Surface ) the_FirstSurf;
 void*                ptr_FirstSurf = jcas_GetHandle(env,FirstSurf);
 
 if ( ptr_FirstSurf != NULL ) the_FirstSurf = *(   (  Handle( Geom_Surface )*  )ptr_FirstSurf   );

 Handle( Geom_Surface ) the_SecondSurf;
 void*                ptr_SecondSurf = jcas_GetHandle(env,SecondSurf);
 
 if ( ptr_SecondSurf != NULL ) the_SecondSurf = *(   (  Handle( Geom_Surface )*  )ptr_SecondSurf   );

gp_Ax1* the_Axis = (gp_Ax1*) jcas_GetHandle(env,Axis);
if ( the_Axis == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Axis = new gp_Ax1 ();
 // jcas_SetHandle ( env, Axis, the_Axis );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_Position = (gp_Pnt*) jcas_GetHandle(env,Position);
if ( the_Position == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Position = new gp_Pnt ();
 // jcas_SetHandle ( env, Position, the_Position );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_Center = (gp_Pnt*) jcas_GetHandle(env,Center);
if ( the_Center == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Center = new gp_Pnt ();
 // jcas_SetHandle ( env, Center, the_Center );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_FirstAttach = (gp_Pnt*) jcas_GetHandle(env,FirstAttach);
if ( the_FirstAttach == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstAttach = new gp_Pnt ();
 // jcas_SetHandle ( env, FirstAttach, the_FirstAttach );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_SecondAttach = (gp_Pnt*) jcas_GetHandle(env,SecondAttach);
if ( the_SecondAttach == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_SecondAttach = new gp_Pnt ();
 // jcas_SetHandle ( env, SecondAttach, the_SecondAttach );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Dir* the_FirstDir = (gp_Dir*) jcas_GetHandle(env,FirstDir);
if ( the_FirstDir == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstDir = new gp_Dir ();
 // jcas_SetHandle ( env, FirstDir, the_FirstDir );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Dir* the_SecondDir = (gp_Dir*) jcas_GetHandle(env,SecondDir);
if ( the_SecondDir == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_SecondDir = new gp_Dir ();
 // jcas_SetHandle ( env, SecondDir, the_SecondDir );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Plane ) the_Plane;
 void*                ptr_Plane = jcas_GetHandle(env,Plane);
 
 if ( ptr_Plane != NULL ) the_Plane = *(   (  Handle( Geom_Plane )*  )ptr_Plane   );

AIS::ComputeAngleBetweenCurvilinearFaces(*the_FirstFace,*the_SecondFace,the_FirstSurf,the_SecondSurf,(AIS_KindOfSurface) FirstSurfType,(AIS_KindOfSurface) SecondSurfType,*the_Axis,(Standard_Real) Value,(Standard_Boolean) AutomaticPos,*the_Position,*the_Center,*the_FirstAttach,*the_SecondAttach,*the_FirstDir,*the_SecondDir,the_Plane);

 Handle( Geom_Plane )* theprevious_Plane =
  (  Handle( Geom_Plane )*  )jcas_GetHandle ( env, Plane );

 if ( theprevious_Plane ) delete theprevious_Plane;

 Handle( Geom_Plane )* thenew_Plane = new Handle( Geom_Plane );

 ( *thenew_Plane ) = the_Plane;

 jcas_SetHandle (env, Plane, thenew_Plane );


}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_ProjectPointOnPlane (JNIEnv *env, jclass, jobject aPoint, jobject aPlane)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
gp_Pnt* the_aPoint = (gp_Pnt*) jcas_GetHandle(env,aPoint);
if ( the_aPoint == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aPoint = new gp_Pnt ();
 // jcas_SetHandle ( env, aPoint, the_aPoint );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pln* the_aPlane = (gp_Pln*) jcas_GetHandle(env,aPlane);
if ( the_aPlane == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aPlane = new gp_Pln ();
 // jcas_SetHandle ( env, aPlane, the_aPlane );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* theret = new gp_Pnt(AIS::ProjectPointOnPlane(*the_aPoint,*the_aPlane));
thejret = jcas_CreateObject(env,"jjAIS/gp_Pnt",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_ProjectPointOnLine (JNIEnv *env, jclass, jobject aPoint, jobject aLine)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
gp_Pnt* the_aPoint = (gp_Pnt*) jcas_GetHandle(env,aPoint);
if ( the_aPoint == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aPoint = new gp_Pnt ();
 // jcas_SetHandle ( env, aPoint, the_aPoint );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Lin* the_aLine = (gp_Lin*) jcas_GetHandle(env,aLine);
if ( the_aLine == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aLine = new gp_Lin ();
 // jcas_SetHandle ( env, aLine, the_aLine );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* theret = new gp_Pnt(AIS::ProjectPointOnLine(*the_aPoint,*the_aLine));
thejret = jcas_CreateObject(env,"jjAIS/gp_Pnt",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_TranslatePointToBound (JNIEnv *env, jclass, jobject aPoint, jobject aDir, jobject aBndBox)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
gp_Pnt* the_aPoint = (gp_Pnt*) jcas_GetHandle(env,aPoint);
if ( the_aPoint == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aPoint = new gp_Pnt ();
 // jcas_SetHandle ( env, aPoint, the_aPoint );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Dir* the_aDir = (gp_Dir*) jcas_GetHandle(env,aDir);
if ( the_aDir == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aDir = new gp_Dir ();
 // jcas_SetHandle ( env, aDir, the_aDir );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
Bnd_Box* the_aBndBox = (Bnd_Box*) jcas_GetHandle(env,aBndBox);
if ( the_aBndBox == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aBndBox = new Bnd_Box ();
 // jcas_SetHandle ( env, aBndBox, the_aBndBox );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* theret = new gp_Pnt(AIS::TranslatePointToBound(*the_aPoint,*the_aDir,*the_aBndBox));
thejret = jcas_CreateObject(env,"jjAIS/gp_Pnt",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_InDomain (JNIEnv *env, jclass, jdouble aFirstPar, jdouble aLastPar, jdouble anAttachPar)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
 thejret = AIS::InDomain((Standard_Real) aFirstPar,(Standard_Real) aLastPar,(Standard_Real) anAttachPar);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_NearestApex (JNIEnv *env, jclass, jobject elips, jobject pApex, jobject nApex, jdouble fpara, jdouble lpara, jobject IsInDomain)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
gp_Elips* the_elips = (gp_Elips*) jcas_GetHandle(env,elips);
if ( the_elips == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_elips = new gp_Elips ();
 // jcas_SetHandle ( env, elips, the_elips );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_pApex = (gp_Pnt*) jcas_GetHandle(env,pApex);
if ( the_pApex == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_pApex = new gp_Pnt ();
 // jcas_SetHandle ( env, pApex, the_pApex );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_nApex = (gp_Pnt*) jcas_GetHandle(env,nApex);
if ( the_nApex == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_nApex = new gp_Pnt ();
 // jcas_SetHandle ( env, nApex, the_nApex );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
Standard_Boolean the_IsInDomain = jcas_GetBoolean(env,IsInDomain);
gp_Pnt* theret = new gp_Pnt(AIS::NearestApex(*the_elips,*the_pApex,*the_nApex,(Standard_Real) fpara,(Standard_Real) lpara,the_IsInDomain));
thejret = jcas_CreateObject(env,"jjAIS/gp_Pnt",theret);
jcas_SetBoolean(env,IsInDomain,the_IsInDomain);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jdouble JNICALL Java_jjAIS_AIS_DistanceFromApex (JNIEnv *env, jclass, jobject elips, jobject Apex, jdouble par)
{
jdouble thejret;

jcas_Locking alock(env);
{
try {
gp_Elips* the_elips = (gp_Elips*) jcas_GetHandle(env,elips);
if ( the_elips == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_elips = new gp_Elips ();
 // jcas_SetHandle ( env, elips, the_elips );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_Apex = (gp_Pnt*) jcas_GetHandle(env,Apex);
if ( the_Apex == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Apex = new gp_Pnt ();
 // jcas_SetHandle ( env, Apex, the_Apex );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 thejret = AIS::DistanceFromApex(*the_elips,*the_Apex,(Standard_Real) par);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_ComputeProjEdgePresentation (JNIEnv *env, jclass, jobject aPres, jobject aDrawer, jobject anEdge, jobject ProjCurve, jobject FirstP, jobject LastP, jshort aColor, jdouble aWidth, jshort aProjTOL, jshort aCallTOL)
{

jcas_Locking alock(env);
{
try {
 Handle( Prs3d_Presentation ) the_aPres;
 void*                ptr_aPres = jcas_GetHandle(env,aPres);
 
 if ( ptr_aPres != NULL ) the_aPres = *(   (  Handle( Prs3d_Presentation )*  )ptr_aPres   );

 Handle( AIS_Drawer ) the_aDrawer;
 void*                ptr_aDrawer = jcas_GetHandle(env,aDrawer);
 
 if ( ptr_aDrawer != NULL ) the_aDrawer = *(   (  Handle( AIS_Drawer )*  )ptr_aDrawer   );

TopoDS_Edge* the_anEdge = (TopoDS_Edge*) jcas_GetHandle(env,anEdge);
if ( the_anEdge == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_anEdge = new TopoDS_Edge ();
 // jcas_SetHandle ( env, anEdge, the_anEdge );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
 Handle( Geom_Curve ) the_ProjCurve;
 void*                ptr_ProjCurve = jcas_GetHandle(env,ProjCurve);
 
 if ( ptr_ProjCurve != NULL ) the_ProjCurve = *(   (  Handle( Geom_Curve )*  )ptr_ProjCurve   );

gp_Pnt* the_FirstP = (gp_Pnt*) jcas_GetHandle(env,FirstP);
if ( the_FirstP == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_FirstP = new gp_Pnt ();
 // jcas_SetHandle ( env, FirstP, the_FirstP );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_LastP = (gp_Pnt*) jcas_GetHandle(env,LastP);
if ( the_LastP == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_LastP = new gp_Pnt ();
 // jcas_SetHandle ( env, LastP, the_LastP );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS::ComputeProjEdgePresentation(the_aPres,the_aDrawer,*the_anEdge,the_ProjCurve,*the_FirstP,*the_LastP,(Quantity_NameOfColor) aColor,(Standard_Real) aWidth,(Aspect_TypeOfLine) aProjTOL,(Aspect_TypeOfLine) aCallTOL);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_ComputeProjVertexPresentation (JNIEnv *env, jclass, jobject aPres, jobject aDrawer, jobject aVertex, jobject ProjPoint, jshort aColor, jdouble aWidth, jshort aProjTOM, jshort aCallTOL)
{

jcas_Locking alock(env);
{
try {
 Handle( Prs3d_Presentation ) the_aPres;
 void*                ptr_aPres = jcas_GetHandle(env,aPres);
 
 if ( ptr_aPres != NULL ) the_aPres = *(   (  Handle( Prs3d_Presentation )*  )ptr_aPres   );

 Handle( AIS_Drawer ) the_aDrawer;
 void*                ptr_aDrawer = jcas_GetHandle(env,aDrawer);
 
 if ( ptr_aDrawer != NULL ) the_aDrawer = *(   (  Handle( AIS_Drawer )*  )ptr_aDrawer   );

TopoDS_Vertex* the_aVertex = (TopoDS_Vertex*) jcas_GetHandle(env,aVertex);
if ( the_aVertex == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aVertex = new TopoDS_Vertex ();
 // jcas_SetHandle ( env, aVertex, the_aVertex );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
gp_Pnt* the_ProjPoint = (gp_Pnt*) jcas_GetHandle(env,ProjPoint);
if ( the_ProjPoint == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_ProjPoint = new gp_Pnt ();
 // jcas_SetHandle ( env, ProjPoint, the_ProjPoint );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS::ComputeProjVertexPresentation(the_aPres,the_aDrawer,*the_aVertex,*the_ProjPoint,(Quantity_NameOfColor) aColor,(Standard_Real) aWidth,(Aspect_TypeOfMarker) aProjTOM,(Aspect_TypeOfLine) aCallTOL);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}


}
