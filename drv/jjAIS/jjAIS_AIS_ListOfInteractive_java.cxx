// This file is generated by WOK (CPPJini).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#include <jjAIS_AIS_ListOfInteractive.h>
#include <AIS_ListOfInteractive.hxx>
#include <jcas.hxx>
#include <stdlib.h>
#include <Standard_ErrorHandler.hxx>
#include <Standard_Failure.hxx>
#include <Standard_SStream.hxx>

#include <Standard_Integer.hxx>
#include <Standard_Boolean.hxx>
#include <AIS_InteractiveObject.hxx>
#include <AIS_ListIteratorOfListOfInteractive.hxx>


extern "C" {


JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_AIS_1ListOfInteractive_1Create_11 (JNIEnv *env, jobject theobj)
{

jcas_Locking alock(env);
{
try {
AIS_ListOfInteractive* theret = new AIS_ListOfInteractive();
jcas_SetHandle(env,theobj,theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_Assign (JNIEnv *env, jobject theobj, jobject Other)
{

jcas_Locking alock(env);
{
try {
AIS_ListOfInteractive* the_Other = (AIS_ListOfInteractive*) jcas_GetHandle(env,Other);
if ( the_Other == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Other = new AIS_ListOfInteractive ();
 // jcas_SetHandle ( env, Other, the_Other );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->Assign(*the_Other);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jint JNICALL Java_jjAIS_AIS_1ListOfInteractive_Extent (JNIEnv *env, jobject theobj)
{
jint thejret;

jcas_Locking alock(env);
{
try {
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
 thejret = the_this->Extent();

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_Clear (JNIEnv *env, jobject theobj)
{

jcas_Locking alock(env);
{
try {
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->Clear();

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_1ListOfInteractive_IsEmpty (JNIEnv *env, jobject theobj)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
 thejret = the_this->IsEmpty();

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_AIS_1ListOfInteractive_1Prepend_11 (JNIEnv *env, jobject theobj, jobject I)
{

jcas_Locking alock(env);
{
try {
 Handle( AIS_InteractiveObject ) the_I;
 void*                ptr_I = jcas_GetHandle(env,I);
 
 if ( ptr_I != NULL ) the_I = *(   (  Handle( AIS_InteractiveObject )*  )ptr_I   );

AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->Prepend(the_I);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_AIS_1ListOfInteractive_1Prepend_12 (JNIEnv *env, jobject theobj, jobject I, jobject theIt)
{

jcas_Locking alock(env);
{
try {
 Handle( AIS_InteractiveObject ) the_I;
 void*                ptr_I = jcas_GetHandle(env,I);
 
 if ( ptr_I != NULL ) the_I = *(   (  Handle( AIS_InteractiveObject )*  )ptr_I   );

AIS_ListIteratorOfListOfInteractive* the_theIt = (AIS_ListIteratorOfListOfInteractive*) jcas_GetHandle(env,theIt);
if ( the_theIt == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_theIt = new AIS_ListIteratorOfListOfInteractive ();
 // jcas_SetHandle ( env, theIt, the_theIt );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->Prepend(the_I,*the_theIt);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_AIS_1ListOfInteractive_1Prepend_13 (JNIEnv *env, jobject theobj, jobject Other)
{

jcas_Locking alock(env);
{
try {
AIS_ListOfInteractive* the_Other = (AIS_ListOfInteractive*) jcas_GetHandle(env,Other);
if ( the_Other == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Other = new AIS_ListOfInteractive ();
 // jcas_SetHandle ( env, Other, the_Other );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->Prepend(*the_Other);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_AIS_1ListOfInteractive_1Append_11 (JNIEnv *env, jobject theobj, jobject I)
{

jcas_Locking alock(env);
{
try {
 Handle( AIS_InteractiveObject ) the_I;
 void*                ptr_I = jcas_GetHandle(env,I);
 
 if ( ptr_I != NULL ) the_I = *(   (  Handle( AIS_InteractiveObject )*  )ptr_I   );

AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->Append(the_I);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_AIS_1ListOfInteractive_1Append_12 (JNIEnv *env, jobject theobj, jobject I, jobject theIt)
{

jcas_Locking alock(env);
{
try {
 Handle( AIS_InteractiveObject ) the_I;
 void*                ptr_I = jcas_GetHandle(env,I);
 
 if ( ptr_I != NULL ) the_I = *(   (  Handle( AIS_InteractiveObject )*  )ptr_I   );

AIS_ListIteratorOfListOfInteractive* the_theIt = (AIS_ListIteratorOfListOfInteractive*) jcas_GetHandle(env,theIt);
if ( the_theIt == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_theIt = new AIS_ListIteratorOfListOfInteractive ();
 // jcas_SetHandle ( env, theIt, the_theIt );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->Append(the_I,*the_theIt);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_AIS_1ListOfInteractive_1Append_13 (JNIEnv *env, jobject theobj, jobject Other)
{

jcas_Locking alock(env);
{
try {
AIS_ListOfInteractive* the_Other = (AIS_ListOfInteractive*) jcas_GetHandle(env,Other);
if ( the_Other == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Other = new AIS_ListOfInteractive ();
 // jcas_SetHandle ( env, Other, the_Other );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->Append(*the_Other);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1ListOfInteractive_First (JNIEnv *env, jobject theobj)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
Handle(AIS_InteractiveObject)* theret = new Handle(AIS_InteractiveObject);
*theret = the_this->First();
thejret = jcas_CreateObject(env,"jjAIS/AIS_InteractiveObject",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1ListOfInteractive_Last (JNIEnv *env, jobject theobj)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
Handle(AIS_InteractiveObject)* theret = new Handle(AIS_InteractiveObject);
*theret = the_this->Last();
thejret = jcas_CreateObject(env,"jjAIS/AIS_InteractiveObject",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_RemoveFirst (JNIEnv *env, jobject theobj)
{

jcas_Locking alock(env);
{
try {
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->RemoveFirst();

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_Remove (JNIEnv *env, jobject theobj, jobject It)
{

jcas_Locking alock(env);
{
try {
AIS_ListIteratorOfListOfInteractive* the_It = (AIS_ListIteratorOfListOfInteractive*) jcas_GetHandle(env,It);
if ( the_It == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_It = new AIS_ListIteratorOfListOfInteractive ();
 // jcas_SetHandle ( env, It, the_It );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->Remove(*the_It);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_AIS_1ListOfInteractive_1InsertBefore_11 (JNIEnv *env, jobject theobj, jobject I, jobject It)
{

jcas_Locking alock(env);
{
try {
 Handle( AIS_InteractiveObject ) the_I;
 void*                ptr_I = jcas_GetHandle(env,I);
 
 if ( ptr_I != NULL ) the_I = *(   (  Handle( AIS_InteractiveObject )*  )ptr_I   );

AIS_ListIteratorOfListOfInteractive* the_It = (AIS_ListIteratorOfListOfInteractive*) jcas_GetHandle(env,It);
if ( the_It == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_It = new AIS_ListIteratorOfListOfInteractive ();
 // jcas_SetHandle ( env, It, the_It );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->InsertBefore(the_I,*the_It);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_AIS_1ListOfInteractive_1InsertBefore_12 (JNIEnv *env, jobject theobj, jobject Other, jobject It)
{

jcas_Locking alock(env);
{
try {
AIS_ListOfInteractive* the_Other = (AIS_ListOfInteractive*) jcas_GetHandle(env,Other);
if ( the_Other == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Other = new AIS_ListOfInteractive ();
 // jcas_SetHandle ( env, Other, the_Other );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_ListIteratorOfListOfInteractive* the_It = (AIS_ListIteratorOfListOfInteractive*) jcas_GetHandle(env,It);
if ( the_It == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_It = new AIS_ListIteratorOfListOfInteractive ();
 // jcas_SetHandle ( env, It, the_It );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->InsertBefore(*the_Other,*the_It);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_AIS_1ListOfInteractive_1InsertAfter_11 (JNIEnv *env, jobject theobj, jobject I, jobject It)
{

jcas_Locking alock(env);
{
try {
 Handle( AIS_InteractiveObject ) the_I;
 void*                ptr_I = jcas_GetHandle(env,I);
 
 if ( ptr_I != NULL ) the_I = *(   (  Handle( AIS_InteractiveObject )*  )ptr_I   );

AIS_ListIteratorOfListOfInteractive* the_It = (AIS_ListIteratorOfListOfInteractive*) jcas_GetHandle(env,It);
if ( the_It == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_It = new AIS_ListIteratorOfListOfInteractive ();
 // jcas_SetHandle ( env, It, the_It );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->InsertAfter(the_I,*the_It);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_AIS_1ListOfInteractive_1InsertAfter_12 (JNIEnv *env, jobject theobj, jobject Other, jobject It)
{

jcas_Locking alock(env);
{
try {
AIS_ListOfInteractive* the_Other = (AIS_ListOfInteractive*) jcas_GetHandle(env,Other);
if ( the_Other == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Other = new AIS_ListOfInteractive ();
 // jcas_SetHandle ( env, Other, the_Other );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_ListIteratorOfListOfInteractive* the_It = (AIS_ListIteratorOfListOfInteractive*) jcas_GetHandle(env,It);
if ( the_It == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_It = new AIS_ListIteratorOfListOfInteractive ();
 // jcas_SetHandle ( env, It, the_It );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_ListOfInteractive* the_this = (AIS_ListOfInteractive*) jcas_GetHandle(env,theobj);
the_this->InsertAfter(*the_Other,*the_It);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1ListOfInteractive_FinalizeValue(JNIEnv *, jclass, jlong theid)
{
if (theid) {
  AIS_ListOfInteractive* theobj = (AIS_ListOfInteractive*) theid;
  delete theobj;
}
}


}
