// This file is generated by WOK (CPPJini).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#include <jjAIS_AIS_MapOfInteractive.h>
#include <AIS_MapOfInteractive.hxx>
#include <jcas.hxx>
#include <stdlib.h>
#include <Standard_ErrorHandler.hxx>
#include <Standard_Failure.hxx>
#include <Standard_SStream.hxx>

#include <Standard_Integer.hxx>
#include <Standard_Boolean.hxx>
#include <AIS_InteractiveObject.hxx>


extern "C" {


JNIEXPORT void JNICALL Java_jjAIS_AIS_1MapOfInteractive_AIS_1MapOfInteractive_1Create_11 (JNIEnv *env, jobject theobj, jint NbBuckets)
{

jcas_Locking alock(env);
{
try {
AIS_MapOfInteractive* theret = new AIS_MapOfInteractive((Standard_Integer) NbBuckets);
jcas_SetHandle(env,theobj,theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1MapOfInteractive_Assign (JNIEnv *env, jobject theobj, jobject Other)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
AIS_MapOfInteractive* the_Other = (AIS_MapOfInteractive*) jcas_GetHandle(env,Other);
if ( the_Other == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_Other = new AIS_MapOfInteractive ();
 // jcas_SetHandle ( env, Other, the_Other );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_MapOfInteractive* the_this = (AIS_MapOfInteractive*) jcas_GetHandle(env,theobj);
const AIS_MapOfInteractive& theret = the_this->Assign(*the_Other);
thejret = jcas_CreateObject(env,"jjAIS/AIS_MapOfInteractive",&theret,0);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1MapOfInteractive_ReSize (JNIEnv *env, jobject theobj, jint NbBuckets)
{

jcas_Locking alock(env);
{
try {
AIS_MapOfInteractive* the_this = (AIS_MapOfInteractive*) jcas_GetHandle(env,theobj);
the_this->ReSize((Standard_Integer) NbBuckets);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1MapOfInteractive_Clear (JNIEnv *env, jobject theobj)
{

jcas_Locking alock(env);
{
try {
AIS_MapOfInteractive* the_this = (AIS_MapOfInteractive*) jcas_GetHandle(env,theobj);
the_this->Clear();

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_1MapOfInteractive_Add (JNIEnv *env, jobject theobj, jobject aKey)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
 Handle( AIS_InteractiveObject ) the_aKey;
 void*                ptr_aKey = jcas_GetHandle(env,aKey);
 
 if ( ptr_aKey != NULL ) the_aKey = *(   (  Handle( AIS_InteractiveObject )*  )ptr_aKey   );

AIS_MapOfInteractive* the_this = (AIS_MapOfInteractive*) jcas_GetHandle(env,theobj);
 thejret = the_this->Add(the_aKey);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_1MapOfInteractive_Contains (JNIEnv *env, jobject theobj, jobject aKey)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
 Handle( AIS_InteractiveObject ) the_aKey;
 void*                ptr_aKey = jcas_GetHandle(env,aKey);
 
 if ( ptr_aKey != NULL ) the_aKey = *(   (  Handle( AIS_InteractiveObject )*  )ptr_aKey   );

AIS_MapOfInteractive* the_this = (AIS_MapOfInteractive*) jcas_GetHandle(env,theobj);
 thejret = the_this->Contains(the_aKey);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jboolean JNICALL Java_jjAIS_AIS_1MapOfInteractive_Remove (JNIEnv *env, jobject theobj, jobject aKey)
{
jboolean thejret;

jcas_Locking alock(env);
{
try {
 Handle( AIS_InteractiveObject ) the_aKey;
 void*                ptr_aKey = jcas_GetHandle(env,aKey);
 
 if ( ptr_aKey != NULL ) the_aKey = *(   (  Handle( AIS_InteractiveObject )*  )ptr_aKey   );

AIS_MapOfInteractive* the_this = (AIS_MapOfInteractive*) jcas_GetHandle(env,theobj);
 thejret = the_this->Remove(the_aKey);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1MapOfInteractive_FinalizeValue(JNIEnv *, jclass, jlong theid)
{
if (theid) {
  AIS_MapOfInteractive* theobj = (AIS_MapOfInteractive*) theid;
  delete theobj;
}
}


}
