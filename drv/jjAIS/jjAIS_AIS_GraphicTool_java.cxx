// This file is generated by WOK (CPPJini).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#include <jjAIS_AIS_GraphicTool.h>
#include <AIS_GraphicTool.hxx>
#include <jcas.hxx>
#include <stdlib.h>
#include <Standard_ErrorHandler.hxx>
#include <Standard_Failure.hxx>
#include <Standard_SStream.hxx>

#include <Quantity_NameOfColor.hxx>
#include <Prs3d_Drawer.hxx>
#include <AIS_TypeOfAttribute.hxx>
#include <Quantity_Color.hxx>
#include <Standard_Real.hxx>
#include <Aspect_TypeOfLine.hxx>
#include <Graphic3d_MaterialAspect.hxx>


extern "C" {


JNIEXPORT jshort JNICALL Java_jjAIS_AIS_1GraphicTool_AIS_1GraphicTool_1GetLineColor_11 (JNIEnv *env, jclass, jobject aDrawer, jshort TheTypeOfAttributes)
{
jshort thejret;

jcas_Locking alock(env);
{
try {
 Handle( Prs3d_Drawer ) the_aDrawer;
 void*                ptr_aDrawer = jcas_GetHandle(env,aDrawer);
 
 if ( ptr_aDrawer != NULL ) the_aDrawer = *(   (  Handle( Prs3d_Drawer )*  )ptr_aDrawer   );

 thejret = AIS_GraphicTool::GetLineColor(the_aDrawer,(AIS_TypeOfAttribute) TheTypeOfAttributes);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1GraphicTool_AIS_1GraphicTool_1GetLineColor_12 (JNIEnv *env, jclass, jobject aDrawer, jshort TheTypeOfAttributes, jobject TheLineColor)
{

jcas_Locking alock(env);
{
try {
 Handle( Prs3d_Drawer ) the_aDrawer;
 void*                ptr_aDrawer = jcas_GetHandle(env,aDrawer);
 
 if ( ptr_aDrawer != NULL ) the_aDrawer = *(   (  Handle( Prs3d_Drawer )*  )ptr_aDrawer   );

Quantity_Color* the_TheLineColor = (Quantity_Color*) jcas_GetHandle(env,TheLineColor);
if ( the_TheLineColor == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_TheLineColor = new Quantity_Color ();
 // jcas_SetHandle ( env, TheLineColor, the_TheLineColor );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_GraphicTool::GetLineColor(the_aDrawer,(AIS_TypeOfAttribute) TheTypeOfAttributes,*the_TheLineColor);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jdouble JNICALL Java_jjAIS_AIS_1GraphicTool_GetLineWidth (JNIEnv *env, jclass, jobject aDrawer, jshort TheTypeOfAttributes)
{
jdouble thejret;

jcas_Locking alock(env);
{
try {
 Handle( Prs3d_Drawer ) the_aDrawer;
 void*                ptr_aDrawer = jcas_GetHandle(env,aDrawer);
 
 if ( ptr_aDrawer != NULL ) the_aDrawer = *(   (  Handle( Prs3d_Drawer )*  )ptr_aDrawer   );

 thejret = AIS_GraphicTool::GetLineWidth(the_aDrawer,(AIS_TypeOfAttribute) TheTypeOfAttributes);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT jshort JNICALL Java_jjAIS_AIS_1GraphicTool_GetLineType (JNIEnv *env, jclass, jobject aDrawer, jshort TheTypeOfAttributes)
{
jshort thejret;

jcas_Locking alock(env);
{
try {
 Handle( Prs3d_Drawer ) the_aDrawer;
 void*                ptr_aDrawer = jcas_GetHandle(env,aDrawer);
 
 if ( ptr_aDrawer != NULL ) the_aDrawer = *(   (  Handle( Prs3d_Drawer )*  )ptr_aDrawer   );

 thejret = AIS_GraphicTool::GetLineType(the_aDrawer,(AIS_TypeOfAttribute) TheTypeOfAttributes);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1GraphicTool_GetLineAtt (JNIEnv *env, jclass, jobject aDrawer, jshort TheTypeOfAttributes, jobject aCol, jobject aWidth, jobject aTyp)
{

jcas_Locking alock(env);
{
try {
 Handle( Prs3d_Drawer ) the_aDrawer;
 void*                ptr_aDrawer = jcas_GetHandle(env,aDrawer);
 
 if ( ptr_aDrawer != NULL ) the_aDrawer = *(   (  Handle( Prs3d_Drawer )*  )ptr_aDrawer   );

Quantity_NameOfColor the_aCol = ( Quantity_NameOfColor )jcas_GetShort ( env, aCol );
Standard_Real the_aWidth = jcas_GetReal(env,aWidth);
Aspect_TypeOfLine the_aTyp = ( Aspect_TypeOfLine )jcas_GetShort ( env, aTyp );
AIS_GraphicTool::GetLineAtt(the_aDrawer,(AIS_TypeOfAttribute) TheTypeOfAttributes,the_aCol,the_aWidth,the_aTyp);
jcas_SetShort(env,aCol,the_aCol);
jcas_SetReal(env,aWidth,the_aWidth);
jcas_SetShort(env,aTyp,the_aTyp);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jshort JNICALL Java_jjAIS_AIS_1GraphicTool_AIS_1GraphicTool_1GetInteriorColor_11 (JNIEnv *env, jclass, jobject aDrawer)
{
jshort thejret;

jcas_Locking alock(env);
{
try {
 Handle( Prs3d_Drawer ) the_aDrawer;
 void*                ptr_aDrawer = jcas_GetHandle(env,aDrawer);
 
 if ( ptr_aDrawer != NULL ) the_aDrawer = *(   (  Handle( Prs3d_Drawer )*  )ptr_aDrawer   );

 thejret = AIS_GraphicTool::GetInteriorColor(the_aDrawer);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1GraphicTool_AIS_1GraphicTool_1GetInteriorColor_12 (JNIEnv *env, jclass, jobject aDrawer, jobject aColor)
{

jcas_Locking alock(env);
{
try {
 Handle( Prs3d_Drawer ) the_aDrawer;
 void*                ptr_aDrawer = jcas_GetHandle(env,aDrawer);
 
 if ( ptr_aDrawer != NULL ) the_aDrawer = *(   (  Handle( Prs3d_Drawer )*  )ptr_aDrawer   );

Quantity_Color* the_aColor = (Quantity_Color*) jcas_GetHandle(env,aColor);
if ( the_aColor == NULL ) {

 // The following assumes availability of the default constructor (what may not
 // always be the case). Therefore explicit exception is thrown if the null
 // object has been passed.
 // the_aColor = new Quantity_Color ();
 // jcas_SetHandle ( env, aColor, the_aColor );
 jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");

}  // end if
AIS_GraphicTool::GetInteriorColor(the_aDrawer,*the_aColor);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();

}



JNIEXPORT jobject JNICALL Java_jjAIS_AIS_1GraphicTool_GetMaterial (JNIEnv *env, jclass, jobject aDrawer)
{
jobject thejret;

jcas_Locking alock(env);
{
try {
 Handle( Prs3d_Drawer ) the_aDrawer;
 void*                ptr_aDrawer = jcas_GetHandle(env,aDrawer);
 
 if ( ptr_aDrawer != NULL ) the_aDrawer = *(   (  Handle( Prs3d_Drawer )*  )ptr_aDrawer   );

Graphic3d_MaterialAspect* theret = new Graphic3d_MaterialAspect(AIS_GraphicTool::GetMaterial(the_aDrawer));
thejret = jcas_CreateObject(env,"jjAIS/Graphic3d_MaterialAspect",theret);

}
catch (Standard_Failure) {
  Standard_SStream Err;
  Err <<   Standard_Failure::Caught(); 
  Err << (char) 0;
  jcas_ThrowException(env,GetSString(Err));
}
}
alock.Release();
return thejret;
}



JNIEXPORT void JNICALL Java_jjAIS_AIS_1GraphicTool_FinalizeValue(JNIEnv *, jclass, jlong theid)
{
if (theid) {
  AIS_GraphicTool* theobj = (AIS_GraphicTool*) theid;
  delete theobj;
}
}


}
