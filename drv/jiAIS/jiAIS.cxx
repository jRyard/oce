// This file is generated by WOK (CPPIntExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#include <Standard_Macro.hxx>
class Handle_Standard_Type;
#include <memory.h>                                
                                                   
#include <Standard_PrimitiveTypes.hxx>             
#include <Standard_ShortReal.hxx>                  
#include <Standard_ErrorHandler.hxx>               
#include <Standard_NullObject.hxx>                 
                                                   
#include <Engine.hxx>
#include <Engine_TypeTool.hxx>                              
#include <Engine_Handle.hxx>                    
#include <Engine_Signature.hxx>                    
#include <Engine_Argument.hxx>                     
#include <Engine_MethodException.hxx>              
#include <Engine_ExecutionError.hxx>               
#include <Engine_ArrayOfArguments.hxx>           
#include <Engine_PArrayOfArguments.hxx>          
#include <Engine_AVLSearchTreeOfSignature.hxx>     

void Engine_InterfacePlugin::Execute (const Engine_PSignature& ,
                        const Standard_Address  ) const
{}

#include <AIS.hxx>
#ifndef _AIS_AngleDimension_HeaderFile
#include <AIS_AngleDimension.hxx>
#endif
#ifndef _AIS_AttributeFilter_HeaderFile
#include <AIS_AttributeFilter.hxx>
#endif
#ifndef _AIS_Axis_HeaderFile
#include <AIS_Axis.hxx>
#endif
#ifndef _AIS_BadEdgeFilter_HeaderFile
#include <AIS_BadEdgeFilter.hxx>
#endif
#ifndef _AIS_C0RegularityFilter_HeaderFile
#include <AIS_C0RegularityFilter.hxx>
#endif
#ifndef _AIS_Chamf2dDimension_HeaderFile
#include <AIS_Chamf2dDimension.hxx>
#endif
#ifndef _AIS_Chamf3dDimension_HeaderFile
#include <AIS_Chamf3dDimension.hxx>
#endif
#ifndef _AIS_Circle_HeaderFile
#include <AIS_Circle.hxx>
#endif
#ifndef _AIS_ClearMode_HeaderFile
#include <AIS_ClearMode.hxx>
#endif
#ifndef _AIS_ConcentricRelation_HeaderFile
#include <AIS_ConcentricRelation.hxx>
#endif
#ifndef _AIS_ConnectStatus_HeaderFile
#include <AIS_ConnectStatus.hxx>
#endif
#ifndef _AIS_ConnectedInteractive_HeaderFile
#include <AIS_ConnectedInteractive.hxx>
#endif
#ifndef _AIS_ConnectedShape_HeaderFile
#include <AIS_ConnectedShape.hxx>
#endif
#ifndef _AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive_HeaderFile
#include <AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive.hxx>
#endif
#ifndef _AIS_DataMapNodeOfDataMapofIntegerListOfinteractive_HeaderFile
#include <AIS_DataMapNodeOfDataMapofIntegerListOfinteractive.hxx>
#endif
#ifndef _AIS_DataMapofIntegerListOfinteractive_HeaderFile
#include <AIS_DataMapofIntegerListOfinteractive.hxx>
#endif
#ifndef _AIS_DiameterDimension_HeaderFile
#include <AIS_DiameterDimension.hxx>
#endif
#ifndef _AIS_DimensionOwner_HeaderFile
#include <AIS_DimensionOwner.hxx>
#endif
#ifndef _AIS_DisplayMode_HeaderFile
#include <AIS_DisplayMode.hxx>
#endif
#ifndef _AIS_DisplayStatus_HeaderFile
#include <AIS_DisplayStatus.hxx>
#endif
#ifndef _AIS_Drawer_HeaderFile
#include <AIS_Drawer.hxx>
#endif
#ifndef _AIS_EllipseRadiusDimension_HeaderFile
#include <AIS_EllipseRadiusDimension.hxx>
#endif
#ifndef _AIS_EqualDistanceRelation_HeaderFile
#include <AIS_EqualDistanceRelation.hxx>
#endif
#ifndef _AIS_EqualRadiusRelation_HeaderFile
#include <AIS_EqualRadiusRelation.hxx>
#endif
#ifndef _AIS_ExclusionFilter_HeaderFile
#include <AIS_ExclusionFilter.hxx>
#endif
#ifndef _AIS_FixRelation_HeaderFile
#include <AIS_FixRelation.hxx>
#endif
#ifndef _AIS_GraphicTool_HeaderFile
#include <AIS_GraphicTool.hxx>
#endif
#ifndef _AIS_IdenticRelation_HeaderFile
#include <AIS_IdenticRelation.hxx>
#endif
#ifndef _AIS_IndexedDataMapNodeOfIndexedDataMapOfOwnerPrs_HeaderFile
#include <AIS_IndexedDataMapNodeOfIndexedDataMapOfOwnerPrs.hxx>
#endif
#ifndef _AIS_IndexedDataMapOfOwnerPrs_HeaderFile
#include <AIS_IndexedDataMapOfOwnerPrs.hxx>
#endif
#ifndef _AIS_InteractiveContext_HeaderFile
#include <AIS_InteractiveContext.hxx>
#endif
#ifndef _AIS_InteractiveObject_HeaderFile
#include <AIS_InteractiveObject.hxx>
#endif
#ifndef _AIS_KindOfDimension_HeaderFile
#include <AIS_KindOfDimension.hxx>
#endif
#ifndef _AIS_KindOfInteractive_HeaderFile
#include <AIS_KindOfInteractive.hxx>
#endif
#ifndef _AIS_KindOfSurface_HeaderFile
#include <AIS_KindOfSurface.hxx>
#endif
#ifndef _AIS_KindOfUnit_HeaderFile
#include <AIS_KindOfUnit.hxx>
#endif
#ifndef _AIS_LengthDimension_HeaderFile
#include <AIS_LengthDimension.hxx>
#endif
#ifndef _AIS_Line_HeaderFile
#include <AIS_Line.hxx>
#endif
#ifndef _AIS_ListIteratorOfListOfInteractive_HeaderFile
#include <AIS_ListIteratorOfListOfInteractive.hxx>
#endif
#ifndef _AIS_ListNodeOfListOfInteractive_HeaderFile
#include <AIS_ListNodeOfListOfInteractive.hxx>
#endif
#ifndef _AIS_ListOfInteractive_HeaderFile
#include <AIS_ListOfInteractive.hxx>
#endif
#ifndef _AIS_LocalContext_HeaderFile
#include <AIS_LocalContext.hxx>
#endif
#ifndef _AIS_MapIteratorOfMapOfInteractive_HeaderFile
#include <AIS_MapIteratorOfMapOfInteractive.hxx>
#endif
#ifndef _AIS_MapOfInteractive_HeaderFile
#include <AIS_MapOfInteractive.hxx>
#endif
#ifndef _AIS_MaxRadiusDimension_HeaderFile
#include <AIS_MaxRadiusDimension.hxx>
#endif
#ifndef _AIS_MidPointRelation_HeaderFile
#include <AIS_MidPointRelation.hxx>
#endif
#ifndef _AIS_MinRadiusDimension_HeaderFile
#include <AIS_MinRadiusDimension.hxx>
#endif
#ifndef _AIS_MultipleConnectedInteractive_HeaderFile
#include <AIS_MultipleConnectedInteractive.hxx>
#endif
#ifndef _AIS_MultipleConnectedShape_HeaderFile
#include <AIS_MultipleConnectedShape.hxx>
#endif
#ifndef _AIS_NDataMapOfTransientIteratorOfListTransient_HeaderFile
#include <AIS_NDataMapOfTransientIteratorOfListTransient.hxx>
#endif
#ifndef _AIS_NListIteratorOfListTransient_HeaderFile
#include <AIS_NListIteratorOfListTransient.hxx>
#endif
#ifndef _AIS_NListTransient_HeaderFile
#include <AIS_NListTransient.hxx>
#endif
#ifndef _AIS_OffsetDimension_HeaderFile
#include <AIS_OffsetDimension.hxx>
#endif
#ifndef _AIS_PToContext_HeaderFile
#include <AIS_PToContext.hxx>
#endif
#ifndef _AIS_ParallelRelation_HeaderFile
#include <AIS_ParallelRelation.hxx>
#endif
#ifndef _AIS_PerpendicularRelation_HeaderFile
#include <AIS_PerpendicularRelation.hxx>
#endif
#ifndef _AIS_Plane_HeaderFile
#include <AIS_Plane.hxx>
#endif
#ifndef _AIS_PlaneTrihedron_HeaderFile
#include <AIS_PlaneTrihedron.hxx>
#endif
#ifndef _AIS_Point_HeaderFile
#include <AIS_Point.hxx>
#endif
#ifndef _AIS_RadiusDimension_HeaderFile
#include <AIS_RadiusDimension.hxx>
#endif
#ifndef _AIS_Relation_HeaderFile
#include <AIS_Relation.hxx>
#endif
#ifndef _AIS_SelectStatus_HeaderFile
#include <AIS_SelectStatus.hxx>
#endif
#ifndef _AIS_Selection_HeaderFile
#include <AIS_Selection.hxx>
#endif
#ifndef _AIS_SequenceNodeOfSequenceOfDimension_HeaderFile
#include <AIS_SequenceNodeOfSequenceOfDimension.hxx>
#endif
#ifndef _AIS_SequenceNodeOfSequenceOfInteractive_HeaderFile
#include <AIS_SequenceNodeOfSequenceOfInteractive.hxx>
#endif
#ifndef _AIS_SequenceOfDimension_HeaderFile
#include <AIS_SequenceOfDimension.hxx>
#endif
#ifndef _AIS_SequenceOfInteractive_HeaderFile
#include <AIS_SequenceOfInteractive.hxx>
#endif
#ifndef _AIS_Shape_HeaderFile
#include <AIS_Shape.hxx>
#endif
#ifndef _AIS_SignatureFilter_HeaderFile
#include <AIS_SignatureFilter.hxx>
#endif
#ifndef _AIS_StandardDatum_HeaderFile
#include <AIS_StandardDatum.hxx>
#endif
#ifndef _AIS_StatusOfDetection_HeaderFile
#include <AIS_StatusOfDetection.hxx>
#endif
#ifndef _AIS_StatusOfPick_HeaderFile
#include <AIS_StatusOfPick.hxx>
#endif
#ifndef _AIS_StdMapNodeOfMapOfInteractive_HeaderFile
#include <AIS_StdMapNodeOfMapOfInteractive.hxx>
#endif
#ifndef _AIS_SymmetricRelation_HeaderFile
#include <AIS_SymmetricRelation.hxx>
#endif
#ifndef _AIS_TangentRelation_HeaderFile
#include <AIS_TangentRelation.hxx>
#endif
#ifndef _AIS_TexturedShape_HeaderFile
#include <AIS_TexturedShape.hxx>
#endif
#ifndef _AIS_Triangulation_HeaderFile
#include <AIS_Triangulation.hxx>
#endif
#ifndef _AIS_Trihedron_HeaderFile
#include <AIS_Trihedron.hxx>
#endif
#ifndef _AIS_TypeFilter_HeaderFile
#include <AIS_TypeFilter.hxx>
#endif
#ifndef _AIS_TypeOfAttribute_HeaderFile
#include <AIS_TypeOfAttribute.hxx>
#endif
#ifndef _AIS_TypeOfAxis_HeaderFile
#include <AIS_TypeOfAxis.hxx>
#endif
#ifndef _AIS_TypeOfDist_HeaderFile
#include <AIS_TypeOfDist.hxx>
#endif
#ifndef _AIS_TypeOfIso_HeaderFile
#include <AIS_TypeOfIso.hxx>
#endif
#ifndef _AIS_TypeOfPlane_HeaderFile
#include <AIS_TypeOfPlane.hxx>
#endif
#ifndef _Aspect_TypeOfDeflection_HeaderFile
#include <Aspect_TypeOfDeflection.hxx>
#endif
#ifndef _Aspect_TypeOfDegenerateModel_HeaderFile
#include <Aspect_TypeOfDegenerateModel.hxx>
#endif
#ifndef _Aspect_TypeOfFacingModel_HeaderFile
#include <Aspect_TypeOfFacingModel.hxx>
#endif
#ifndef _Aspect_TypeOfLine_HeaderFile
#include <Aspect_TypeOfLine.hxx>
#endif
#ifndef _Bnd_Box_HeaderFile
#include <Bnd_Box.hxx>
#endif
#ifndef _DsgPrs_ArrowSide_HeaderFile
#include <DsgPrs_ArrowSide.hxx>
#endif
#ifndef _Geom_Axis2Placement_HeaderFile
#include <Geom_Axis2Placement.hxx>
#endif
#ifndef _Geom_Circle_HeaderFile
#include <Geom_Circle.hxx>
#endif
#ifndef _Geom_Line_HeaderFile
#include <Geom_Line.hxx>
#endif
#ifndef _Geom_Plane_HeaderFile
#include <Geom_Plane.hxx>
#endif
#ifndef _Geom_Point_HeaderFile
#include <Geom_Point.hxx>
#endif
#ifndef _Geom_Transformation_HeaderFile
#include <Geom_Transformation.hxx>
#endif
#ifndef _Graphic3d_MaterialAspect_HeaderFile
#include <Graphic3d_MaterialAspect.hxx>
#endif
#ifndef _Graphic3d_NameOfMaterial_HeaderFile
#include <Graphic3d_NameOfMaterial.hxx>
#endif
#ifndef _Poly_Triangulation_HeaderFile
#include <Poly_Triangulation.hxx>
#endif
#ifndef _Prs3d_AngleAspect_HeaderFile
#include <Prs3d_AngleAspect.hxx>
#endif
#ifndef _Prs3d_ArrowAspect_HeaderFile
#include <Prs3d_ArrowAspect.hxx>
#endif
#ifndef _Prs3d_DatumAspect_HeaderFile
#include <Prs3d_DatumAspect.hxx>
#endif
#ifndef _Prs3d_Drawer_HeaderFile
#include <Prs3d_Drawer.hxx>
#endif
#ifndef _Prs3d_IsoAspect_HeaderFile
#include <Prs3d_IsoAspect.hxx>
#endif
#ifndef _Prs3d_LengthAspect_HeaderFile
#include <Prs3d_LengthAspect.hxx>
#endif
#ifndef _Prs3d_LineAspect_HeaderFile
#include <Prs3d_LineAspect.hxx>
#endif
#ifndef _Prs3d_PlaneAspect_HeaderFile
#include <Prs3d_PlaneAspect.hxx>
#endif
#ifndef _Prs3d_PointAspect_HeaderFile
#include <Prs3d_PointAspect.hxx>
#endif
#ifndef _Prs3d_Presentation_HeaderFile
#include <Prs3d_Presentation.hxx>
#endif
#ifndef _Prs3d_RadiusAspect_HeaderFile
#include <Prs3d_RadiusAspect.hxx>
#endif
#ifndef _Prs3d_ShadingAspect_HeaderFile
#include <Prs3d_ShadingAspect.hxx>
#endif
#ifndef _Prs3d_TextAspect_HeaderFile
#include <Prs3d_TextAspect.hxx>
#endif
#ifndef _PrsMgr_PresentationManager3d_HeaderFile
#include <PrsMgr_PresentationManager3d.hxx>
#endif
#ifndef _Quantity_Length_HeaderFile
#include <Quantity_Length.hxx>
#endif
#ifndef _Quantity_NameOfColor_HeaderFile
#include <Quantity_NameOfColor.hxx>
#endif
#ifndef _SelectMgr_EntityOwner_HeaderFile
#include <SelectMgr_EntityOwner.hxx>
#endif
#ifndef _SelectMgr_ListOfFilter_HeaderFile
#include <SelectMgr_ListOfFilter.hxx>
#endif
#ifndef _SelectMgr_OrFilter_HeaderFile
#include <SelectMgr_OrFilter.hxx>
#endif
#ifndef _SelectMgr_SelectionManager_HeaderFile
#include <SelectMgr_SelectionManager.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Transient_HeaderFile
#include <Standard_Transient.hxx>
#endif
#ifndef _StdSelect_ViewerSelector3d_HeaderFile
#include <StdSelect_ViewerSelector3d.hxx>
#endif
#ifndef _TColStd_HArray1OfInteger_HeaderFile
#include <TColStd_HArray1OfInteger.hxx>
#endif
#ifndef _TColStd_ListOfInteger_HeaderFile
#include <TColStd_ListOfInteger.hxx>
#endif
#ifndef _TColStd_ListOfTransient_HeaderFile
#include <TColStd_ListOfTransient.hxx>
#endif
#ifndef _TCollection_AsciiString_HeaderFile
#include <TCollection_AsciiString.hxx>
#endif
#ifndef _TCollection_ExtendedString_HeaderFile
#include <TCollection_ExtendedString.hxx>
#endif
#ifndef _TopAbs_ShapeEnum_HeaderFile
#include <TopAbs_ShapeEnum.hxx>
#endif
#ifndef _TopLoc_Location_HeaderFile
#include <TopLoc_Location.hxx>
#endif
#ifndef _TopoDS_Shape_HeaderFile
#include <TopoDS_Shape.hxx>
#endif
#ifndef _TopoDS_Vertex_HeaderFile
#include <TopoDS_Vertex.hxx>
#endif
#ifndef _TopoDS_Wire_HeaderFile
#include <TopoDS_Wire.hxx>
#endif
#ifndef _V3d_Viewer_HeaderFile
#include <V3d_Viewer.hxx>
#endif
#ifndef _gp_Ax1_HeaderFile
#include <gp_Ax1.hxx>
#endif
#ifndef _gp_Pnt_HeaderFile
#include <gp_Pnt.hxx>
#endif

Handle_Standard_Type&  AIS_DisplayMode_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_DisplayMode",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& Prs3d_RadiusAspect_Type_();
Handle_Standard_Type& Geom_Axis1Placement_Type_();
Handle_Standard_Type& AIS_ExclusionFilter_Type_();
Handle_Standard_Type& gp_Ax1_Type_();
Handle_Standard_Type& Geom_Surface_Type_();
Handle_Standard_Type& AIS_LocalContext_Type_();
Handle_Standard_Type& Prs3d_PlaneAspect_Type_();
Handle_Standard_Type& SelectMgr_EntityOwner_Type_();
Handle_Standard_Type& AIS_RadiusDimension_Type_();

Handle_Standard_Type&  AIS_KindOfSurface_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_KindOfSurface",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& SelectMgr_Selection_Type_();
Handle_Standard_Type& AIS_ConnectedInteractive_Type_();
Handle_Standard_Type& Quantity_Color_Type_();
Handle_Standard_Type& TColStd_HArray1OfInteger_Type_();
Handle_Standard_Type& Standard_Real_Type_();
Handle_Standard_Type& AIS_C0RegularityFilter_Type_();

Handle_Standard_Type&  Aspect_TypeOfFacingModel_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("Aspect_TypeOfFacingModel",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& AIS_Point_Type_();
Handle_Standard_Type& AIS_ListNodeOfListOfInteractive_Type_();
Handle_Standard_Type& AIS_SequenceNodeOfSequenceOfInteractive_Type_();
Handle_Standard_Type& gp_Pln_Type_();
Handle_Standard_Type& AIS_EllipseRadiusDimension_Type_();
Handle_Standard_Type& AIS_MultipleConnectedInteractive_Type_();

Handle_Standard_Type&  Aspect_TypeOfDeflection_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("Aspect_TypeOfDeflection",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& gp_Dir_Type_();
Handle_Standard_Type& Prs3d_ShadingAspect_Type_();
Handle_Standard_Type& Prs3d_BasicAspect_Type_();
Handle_Standard_Type& gp_Pnt_Type_();
Handle_Standard_Type& V3d_Viewer_Type_();
Handle_Standard_Type& Prs3d_LengthAspect_Type_();
Handle_Standard_Type& AIS_EqualRadiusRelation_Type_();
Handle_Standard_Type& AIS_IndexedDataMapNodeOfIndexedDataMapOfOwnerPrs_Type_();

Handle_Standard_Type&  Quantity_NameOfColor_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("Quantity_NameOfColor",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}


Handle_Standard_Type&  AIS_ClearMode_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_ClearMode",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& Prs3d_ArrowAspect_Type_();
Handle_Standard_Type& AIS_MinRadiusDimension_Type_();
Handle_Standard_Type& AIS_DiameterDimension_Type_();
Handle_Standard_Type& Standard_Real_Type_();
Handle_Standard_Type& Prs3d_DatumAspect_Type_();
Handle_Standard_Type& SelectMgr_SelectionManager_Type_();
Handle_Standard_Type& Standard_Transient_Type_();

Handle_Standard_Type&  AIS_TypeOfPlane_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_TypeOfPlane",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}


Handle_Standard_Type&  PrsMgr_TypeOfPresentation3d_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("PrsMgr_TypeOfPresentation3d",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& AIS_Shape_Type_();

Handle_Standard_Type&  AIS_TypeOfAttribute_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_TypeOfAttribute",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& Geom_Plane_Type_();
Handle_Standard_Type& gp_Trsf_Type_();
Handle_Standard_Type& Prs3d_Presentation_Type_();
Handle_Standard_Type& AIS_Chamf3dDimension_Type_();

Handle_Standard_Type&  AIS_SelectStatus_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_SelectStatus",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& AIS_Relation_Type_();
Handle_Standard_Type& AIS_MultipleConnectedShape_Type_();
Handle_Standard_Type& AIS_InteractiveObject_Type_();

Handle_Standard_Type&  AIS_TypeOfAxis_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_TypeOfAxis",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& AIS_MaxRadiusDimension_Type_();

Handle_Standard_Type&  Aspect_TypeOfDegenerateModel_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("Aspect_TypeOfDegenerateModel",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& AIS_Triangulation_Type_();
Handle_Standard_Type& AIS_ConnectedShape_Type_();
Handle_Standard_Type& Standard_Boolean_Type_();
Handle_Standard_Type& Prs3d_Projector_Type_();
Handle_Standard_Type& AIS_PerpendicularRelation_Type_();
Handle_Standard_Type& AIS_Trihedron_Type_();

Handle_Standard_Type&  AIS_TypeOfDist_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_TypeOfDist",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& Standard_Integer_Type_();
Handle_Standard_Type& AIS_NDataMapOfTransientIteratorOfListTransient_Type_();
Handle_Standard_Type& AIS_Chamf2dDimension_Type_();
Handle_Standard_Type& Prs3d_TextAspect_Type_();
Handle_Standard_Type& AIS_SequenceNodeOfSequenceOfDimension_Type_();
Handle_Standard_Type& AIS_NListTransient_Type_();
Handle_Standard_Type& Geom_Circle_Type_();
Handle_Standard_Type& Geom_Point_Type_();

Handle_Standard_Type&  AIS_ConnectStatus_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_ConnectStatus",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}


Handle_Standard_Type&  Aspect_TypeOfLine_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("Aspect_TypeOfLine",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& AIS_Line_Type_();

Handle_Standard_Type&  AIS_KindOfInteractive_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_KindOfInteractive",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& AIS_ParallelRelation_Type_();
Handle_Standard_Type& StdSelect_ViewerSelector3d_Type_();

Handle_Standard_Type&  Aspect_TypeOfMarker_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("Aspect_TypeOfMarker",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& AIS_LengthDimension_Type_();
Handle_Standard_Type& Select3D_Projector_Type_();
Handle_Standard_Type& AIS_SignatureFilter_Type_();
Handle_Standard_Type& V3d_View_Type_();

Handle_Standard_Type&  TopAbs_ShapeEnum_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("TopAbs_ShapeEnum",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& AIS_AngleDimension_Type_();

Handle_Standard_Type&  DsgPrs_ArrowSide_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("DsgPrs_ArrowSide",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& AIS_DataMapNodeOfDataMapofIntegerListOfinteractive_Type_();
Handle_Standard_Type& AIS_Drawer_Type_();
Handle_Standard_Type& Prs3d_Drawer_Type_();
Handle_Standard_Type& AIS_TangentRelation_Type_();
Handle_Standard_Type& AIS_PlaneTrihedron_Type_();
Handle_Standard_Type& Graphic2d_GraphicObject_Type_();
Handle_Standard_Type& AIS_NListIteratorOfListTransient_Type_();
Handle_Standard_Type& AIS_OffsetDimension_Type_();
Handle_Standard_Type& AIS_PToContext_Type_();
Handle_Standard_Type& AIS_BadEdgeFilter_Type_();
Handle_Standard_Type& SelectMgr_OrFilter_Type_();

Handle_Standard_Type&  AIS_StandardDatum_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_StandardDatum",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& AIS_EqualDistanceRelation_Type_();
Handle_Standard_Type& AIS_AttributeFilter_Type_();
Handle_Standard_Type& AIS_DimensionOwner_Type_();
Handle_Standard_Type& Prs3d_IsoAspect_Type_();
Handle_Standard_Type& AIS_StdMapNodeOfMapOfInteractive_Type_();
Handle_Standard_Type& Prs3d_AngleAspect_Type_();
Handle_Standard_Type& AIS_TexturedShape_Type_();
Handle_Standard_Type& AIS_MidPointRelation_Type_();
Handle_Standard_Type& PrsMgr_PresentationManager2d_Type_();

Handle_Standard_Type&  AIS_KindOfDimension_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_KindOfDimension",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& PrsMgr_PresentationManager3d_Type_();
Handle_Standard_Type& AIS_Axis_Type_();

Handle_Standard_Type&  AIS_KindOfUnit_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_KindOfUnit",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& Standard_Real_Type_();
Handle_Standard_Type& Standard_CString_Type_();

Handle_Standard_Type&  AIS_StatusOfPick_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_StatusOfPick",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& Geom_Axis2Placement_Type_();

Handle_Standard_Type&  AIS_StatusOfDetection_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_StatusOfDetection",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}


Handle_Standard_Type&  AIS_DisplayStatus_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_DisplayStatus",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& AIS_Selection_Type_();
Handle_Standard_Type& SelectMgr_SelectableObject_Type_();
Handle_Standard_Type& gp_Lin_Type_();

Handle_Standard_Type&  AIS_TypeOfIso_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("AIS_TypeOfIso",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& Prs3d_LineAspect_Type_();
Handle_Standard_Type& gp_Elips_Type_();
Handle_Standard_Type& AIS_SymmetricRelation_Type_();
Handle_Standard_Type& Geom_Line_Type_();
Handle_Standard_Type& AIS_ConcentricRelation_Type_();
Handle_Standard_Type& Prs3d_PointAspect_Type_();
Handle_Standard_Type& Geom_Transformation_Type_();
Handle_Standard_Type& Poly_Triangulation_Type_();
Handle_Standard_Type& AIS_FixRelation_Type_();

Handle_Standard_Type&  Graphic3d_NameOfMaterial_Type_(){

static Handle_Standard_Transient _Ancestors[]= {
NULL};

static Handle_Standard_Type _aType = 
       new Standard_Type("Graphic3d_NameOfMaterial",
	                  0, // size is useless
                         0,
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
return _aType;
}

Handle_Standard_Type& AIS_TypeFilter_Type_();
Handle_Standard_Type& AIS_InteractiveContext_Type_();
Handle_Standard_Type& SelectMgr_Filter_Type_();
Handle_Standard_Type& Geom_Curve_Type_();
Handle_Standard_Type& AIS_IdenticRelation_Type_();
Handle_Standard_Type& AIS_Circle_Type_();
Handle_Standard_Type& AIS_Plane_Type_();

Handle_Standard_Type&  TCollection_BasicMapIterator_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TCollection_BasicMapIterator");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("TCollection_BasicMapIterator",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  AIS_MapIteratorOfMapOfInteractive_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("AIS_MapIteratorOfMapOfInteractive");
   if (_aType.IsNull()) {
Handle_Standard_Type&  TCollection_BasicMapIterator_Type_();
static Handle_Standard_Type aType1 = STANDARD_TYPE(TCollection_BasicMapIterator);
 
static Handle_Standard_Transient _Ancestors[]= {
aType1,
 
NULL};

_aType = 
       new Standard_Type("AIS_MapIteratorOfMapOfInteractive",
	                  0, // size is useless
                         1,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  AIS_IndexedDataMapOfOwnerPrs_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("AIS_IndexedDataMapOfOwnerPrs");
   if (_aType.IsNull()) {
Handle_Standard_Type&  TCollection_BasicMap_Type_();
static Handle_Standard_Type aType1 = STANDARD_TYPE(TCollection_BasicMap);
 
static Handle_Standard_Transient _Ancestors[]= {
aType1,
 
NULL};

_aType = 
       new Standard_Type("AIS_IndexedDataMapOfOwnerPrs",
	                  0, // size is useless
                         1,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  SelectMgr_IndexedMapOfOwner_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("SelectMgr_IndexedMapOfOwner");
   if (_aType.IsNull()) {
Handle_Standard_Type&  TCollection_BasicMap_Type_();
static Handle_Standard_Type aType1 = STANDARD_TYPE(TCollection_BasicMap);
 
static Handle_Standard_Transient _Ancestors[]= {
aType1,
 
NULL};

_aType = 
       new Standard_Type("SelectMgr_IndexedMapOfOwner",
	                  0, // size is useless
                         1,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  AIS_SequenceOfInteractive_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("AIS_SequenceOfInteractive");
   if (_aType.IsNull()) {
Handle_Standard_Type&  TCollection_BaseSequence_Type_();
static Handle_Standard_Type aType1 = STANDARD_TYPE(TCollection_BaseSequence);
 
static Handle_Standard_Transient _Ancestors[]= {
aType1,
 
NULL};

_aType = 
       new Standard_Type("AIS_SequenceOfInteractive",
	                  0, // size is useless
                         1,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TColgp_Array1OfPnt_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TColgp_Array1OfPnt");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("TColgp_Array1OfPnt",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TopLoc_Location_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TopLoc_Location");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("TopLoc_Location",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TColStd_ListOfTransient_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TColStd_ListOfTransient");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("TColStd_ListOfTransient",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  AIS_MapOfInteractive_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("AIS_MapOfInteractive");
   if (_aType.IsNull()) {
Handle_Standard_Type&  TCollection_BasicMap_Type_();
static Handle_Standard_Type aType1 = STANDARD_TYPE(TCollection_BasicMap);
 
static Handle_Standard_Transient _Ancestors[]= {
aType1,
 
NULL};

_aType = 
       new Standard_Type("AIS_MapOfInteractive",
	                  0, // size is useless
                         1,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TCollection_BasicMap_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TCollection_BasicMap");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("TCollection_BasicMap",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive");
   if (_aType.IsNull()) {
Handle_Standard_Type&  TCollection_BasicMapIterator_Type_();
static Handle_Standard_Type aType1 = STANDARD_TYPE(TCollection_BasicMapIterator);
 
static Handle_Standard_Transient _Ancestors[]= {
aType1,
 
NULL};

_aType = 
       new Standard_Type("AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive",
	                  0, // size is useless
                         1,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TopoDS_Face_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TopoDS_Face");
   if (_aType.IsNull()) {
Handle_Standard_Type&  TopoDS_Shape_Type_();
static Handle_Standard_Type aType1 = STANDARD_TYPE(TopoDS_Shape);
 
static Handle_Standard_Transient _Ancestors[]= {
aType1,
 
NULL};

_aType = 
       new Standard_Type("TopoDS_Face",
	                  0, // size is useless
                         1,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TCollection_AsciiString_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TCollection_AsciiString");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("TCollection_AsciiString",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  AIS_ListIteratorOfListOfInteractive_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("AIS_ListIteratorOfListOfInteractive");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("AIS_ListIteratorOfListOfInteractive",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  AIS_GraphicTool_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("AIS_GraphicTool");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("AIS_GraphicTool",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TColgp_Array1OfPnt2d_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TColgp_Array1OfPnt2d");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("TColgp_Array1OfPnt2d",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  AIS_ListOfInteractive_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("AIS_ListOfInteractive");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("AIS_ListOfInteractive",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TColStd_MapOfTransient_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TColStd_MapOfTransient");
   if (_aType.IsNull()) {
Handle_Standard_Type&  TCollection_BasicMap_Type_();
static Handle_Standard_Type aType1 = STANDARD_TYPE(TCollection_BasicMap);
 
static Handle_Standard_Transient _Ancestors[]= {
aType1,
 
NULL};

_aType = 
       new Standard_Type("TColStd_MapOfTransient",
	                  0, // size is useless
                         1,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TCollection_BaseSequence_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TCollection_BaseSequence");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("TCollection_BaseSequence",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TColStd_ListOfInteger_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TColStd_ListOfInteger");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("TColStd_ListOfInteger",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TopoDS_Shape_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TopoDS_Shape");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("TopoDS_Shape",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TCollection_ExtendedString_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TCollection_ExtendedString");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("TCollection_ExtendedString",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  Graphic3d_MaterialAspect_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("Graphic3d_MaterialAspect");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("Graphic3d_MaterialAspect",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TopoDS_Wire_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TopoDS_Wire");
   if (_aType.IsNull()) {
Handle_Standard_Type&  TopoDS_Shape_Type_();
static Handle_Standard_Type aType1 = STANDARD_TYPE(TopoDS_Shape);
 
static Handle_Standard_Transient _Ancestors[]= {
aType1,
 
NULL};

_aType = 
       new Standard_Type("TopoDS_Wire",
	                  0, // size is useless
                         1,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  Bnd_Box_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("Bnd_Box");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("Bnd_Box",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  SelectMgr_ListOfFilter_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("SelectMgr_ListOfFilter");
   if (_aType.IsNull()) {
 
static Handle_Standard_Transient _Ancestors[]= {
 
NULL};

_aType = 
       new Standard_Type("SelectMgr_ListOfFilter",
	                  0, // size is useless
                         0,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TopoDS_Edge_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TopoDS_Edge");
   if (_aType.IsNull()) {
Handle_Standard_Type&  TopoDS_Shape_Type_();
static Handle_Standard_Type aType1 = STANDARD_TYPE(TopoDS_Shape);
 
static Handle_Standard_Transient _Ancestors[]= {
aType1,
 
NULL};

_aType = 
       new Standard_Type("TopoDS_Edge",
	                  0, // size is useless
                         1,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  AIS_DataMapofIntegerListOfinteractive_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("AIS_DataMapofIntegerListOfinteractive");
   if (_aType.IsNull()) {
Handle_Standard_Type&  TCollection_BasicMap_Type_();
static Handle_Standard_Type aType1 = STANDARD_TYPE(TCollection_BasicMap);
 
static Handle_Standard_Transient _Ancestors[]= {
aType1,
 
NULL};

_aType = 
       new Standard_Type("AIS_DataMapofIntegerListOfinteractive",
	                  0, // size is useless
                         1,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  AIS_SequenceOfDimension_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("AIS_SequenceOfDimension");
   if (_aType.IsNull()) {
Handle_Standard_Type&  TCollection_BaseSequence_Type_();
static Handle_Standard_Type aType1 = STANDARD_TYPE(TCollection_BaseSequence);
 
static Handle_Standard_Transient _Ancestors[]= {
aType1,
 
NULL};

_aType = 
       new Standard_Type("AIS_SequenceOfDimension",
	                  0, // size is useless
                         1,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


Handle_Standard_Type&  TopoDS_Vertex_Type_(){

static Handle_Standard_Type _aType;
if (_aType.IsNull()) {
   _aType = Engine_TypeTool::Find("TopoDS_Vertex");
   if (_aType.IsNull()) {
Handle_Standard_Type&  TopoDS_Shape_Type_();
static Handle_Standard_Type aType1 = STANDARD_TYPE(TopoDS_Shape);
 
static Handle_Standard_Transient _Ancestors[]= {
aType1,
 
NULL};

_aType = 
       new Standard_Type("TopoDS_Vertex",
	                  0, // size is useless
                         1,
                         (Standard_Address)_Ancestors,
                         (Standard_Address)NULL);
   }
 }
return _aType;
}


static void jiAIS_Execute_1(const Standard_Integer theCase,
                                   Engine_PArrayOfArguments& Args,
                                   const Standard_Address theObject)
{
  Engine_Handle                     *theHandle;                             

 switch(theCase) {

	case 1 : { 

AIS::ComputeAngleBetweenCurvilinearFaces(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Face *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Surface) *)(Args->ChangeValue(3).Value())
, *(Handle(Geom_Surface) *)(Args->ChangeValue(4).Value())
, *(AIS_KindOfSurface *)(Args->ChangeValue(5).Value()) 
, *(AIS_KindOfSurface *)(Args->ChangeValue(6).Value()) 
, *(gp_Ax1 *)(Args->ChangeValue(7).Value()) 
, *(Standard_Real *)(Args->ChangeValue(8).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(9).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(10).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(11).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(12).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(13).Value()) 
, *(gp_Dir *)(Args->ChangeValue(14).Value()) 
, *(gp_Dir *)(Args->ChangeValue(15).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(16).Value())
)
;  	  } break;       

	case 2 : { 

AIS::ComputeAngleBetweenPlanarFaces(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Face *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Surface) *)(Args->ChangeValue(3).Value())
, *(gp_Ax1 *)(Args->ChangeValue(4).Value()) 
, *(Standard_Real *)(Args->ChangeValue(5).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(6).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(7).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(8).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(9).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(10).Value()) 
, *(gp_Dir *)(Args->ChangeValue(11).Value()) 
, *(gp_Dir *)(Args->ChangeValue(12).Value()) 
)
;  	  } break;       

	case 3 : { 

Engine::Return(AIS::ComputeGeomCurve(*(Handle(Geom_Curve) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(5).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(6).Value())
, *(Standard_Boolean *)(Args->ChangeValue(7).Value()) 
)
);
Engine::Return(*(Standard_Boolean *)(Args->ChangeValue(7).Value()) 
,7);
  	  } break;       

	case 4 : { 

Engine::Return(AIS::ComputeGeometry(*(TopoDS_Edge *)(Args->ChangeValue(1).Value()) 
, *(Handle(Geom_Curve) *)(Args->ChangeValue(2).Value())
, *(gp_Pnt *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
)
);
  	  } break;       

	case 5 : { 

Engine::Return(AIS::ComputeGeometry(*(TopoDS_Edge *)(Args->ChangeValue(1).Value()) 
, *(Handle(Geom_Curve) *)(Args->ChangeValue(2).Value())
, *(gp_Pnt *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(Handle(Geom_Curve) *)(Args->ChangeValue(5).Value())
, *(Standard_Boolean *)(Args->ChangeValue(6).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(7).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(8).Value())
)
);
Engine::Return(*(Standard_Boolean *)(Args->ChangeValue(6).Value()) 
,6);
Engine::Return(*(Standard_Boolean *)(Args->ChangeValue(7).Value()) 
,7);
  	  } break;       

	case 6 : { 

Engine::Return(AIS::ComputeGeometry(*(TopoDS_Edge *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Edge *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Curve) *)(Args->ChangeValue(3).Value())
, *(Handle(Geom_Curve) *)(Args->ChangeValue(4).Value())
, *(gp_Pnt *)(Args->ChangeValue(5).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(6).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(7).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(8).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(9).Value())
)
);
  	  } break;       

	case 7 : { 

Engine::Return(AIS::ComputeGeometry(*(TopoDS_Edge *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Edge *)(Args->ChangeValue(2).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
, *(Handle(Geom_Curve) *)(Args->ChangeValue(4).Value())
, *(Handle(Geom_Curve) *)(Args->ChangeValue(5).Value())
, *(gp_Pnt *)(Args->ChangeValue(6).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(7).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(8).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(9).Value()) 
, *(Handle(Geom_Curve) *)(Args->ChangeValue(10).Value())
, *(Standard_Boolean *)(Args->ChangeValue(11).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(12).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(13).Value())
)
);
Engine::Return(*(Standard_Integer *)(Args->ChangeValue(3).Value()) 
,3);
Engine::Return(*(Standard_Boolean *)(Args->ChangeValue(11).Value()) 
,11);
Engine::Return(*(Standard_Boolean *)(Args->ChangeValue(12).Value()) 
,12);
  	  } break;       

	case 8 : { 

Engine::Return(AIS::ComputeGeometry(*(TopoDS_Vertex *)(Args->ChangeValue(1).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
, *(Standard_Boolean *)(Args->ChangeValue(4).Value()) 
)
);
Engine::Return(*(Standard_Boolean *)(Args->ChangeValue(4).Value()) 
,4);
  	  } break;       

	case 9 : { 

AIS::ComputeLengthBetweenCurvilinearFaces(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Face *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Surface) *)(Args->ChangeValue(3).Value())
, *(Handle(Geom_Surface) *)(Args->ChangeValue(4).Value())
, *(Standard_Boolean *)(Args->ChangeValue(5).Value()) 
, *(Standard_Real *)(Args->ChangeValue(6).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(7).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(8).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(9).Value()) 
, *(gp_Dir *)(Args->ChangeValue(10).Value()) 
)
;Engine::Return(*(Standard_Real *)(Args->ChangeValue(6).Value()) 
,6);
  	  } break;       

	case 10 : { 

AIS::ComputeLengthBetweenPlanarFaces(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Face *)(Args->ChangeValue(2).Value()) 
, *(gp_Pln *)(Args->ChangeValue(3).Value()) 
, *(gp_Pln *)(Args->ChangeValue(4).Value()) 
, *(Standard_Real *)(Args->ChangeValue(5).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(6).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(7).Value()) 
, *(gp_Dir *)(Args->ChangeValue(8).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(9).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(10).Value()) 
)
;Engine::Return(*(Standard_Real *)(Args->ChangeValue(5).Value()) 
,5);
  	  } break;       

	case 11 : { 

AIS::ComputeProjEdgePresentation(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(TopoDS_Edge *)(Args->ChangeValue(3).Value()) 
, *(Handle(Geom_Curve) *)(Args->ChangeValue(4).Value())
, *(gp_Pnt *)(Args->ChangeValue(5).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(6).Value()) 
, *(Quantity_NameOfColor *)(Args->ChangeValue(7).Value()) 
, *(Standard_Real *)(Args->ChangeValue(8).Value()) 
, *(Aspect_TypeOfLine *)(Args->ChangeValue(9).Value()) 
, *(Aspect_TypeOfLine *)(Args->ChangeValue(10).Value()) 
)
;  	  } break;       

	case 12 : { 

AIS::ComputeProjEdgePresentation(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(TopoDS_Edge *)(Args->ChangeValue(3).Value()) 
, *(Handle(Geom_Curve) *)(Args->ChangeValue(4).Value())
, *(gp_Pnt *)(Args->ChangeValue(5).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(6).Value()) 
, *(Quantity_NameOfColor *)(Args->ChangeValue(7).Value()) 
, *(Standard_Real *)(Args->ChangeValue(8).Value()) 
, *(Aspect_TypeOfLine *)(Args->ChangeValue(9).Value()) 
)
;  	  } break;       

	case 13 : { 

AIS::ComputeProjEdgePresentation(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(TopoDS_Edge *)(Args->ChangeValue(3).Value()) 
, *(Handle(Geom_Curve) *)(Args->ChangeValue(4).Value())
, *(gp_Pnt *)(Args->ChangeValue(5).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(6).Value()) 
, *(Quantity_NameOfColor *)(Args->ChangeValue(7).Value()) 
, *(Standard_Real *)(Args->ChangeValue(8).Value()) 
)
;  	  } break;       

	case 14 : { 

AIS::ComputeProjEdgePresentation(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(TopoDS_Edge *)(Args->ChangeValue(3).Value()) 
, *(Handle(Geom_Curve) *)(Args->ChangeValue(4).Value())
, *(gp_Pnt *)(Args->ChangeValue(5).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(6).Value()) 
, *(Quantity_NameOfColor *)(Args->ChangeValue(7).Value()) 
)
;  	  } break;       

	case 15 : { 

AIS::ComputeProjEdgePresentation(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(TopoDS_Edge *)(Args->ChangeValue(3).Value()) 
, *(Handle(Geom_Curve) *)(Args->ChangeValue(4).Value())
, *(gp_Pnt *)(Args->ChangeValue(5).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(6).Value()) 
)
;  	  } break;       

	case 16 : { 

AIS::ComputeProjVertexPresentation(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(TopoDS_Vertex *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(Quantity_NameOfColor *)(Args->ChangeValue(5).Value()) 
, *(Standard_Real *)(Args->ChangeValue(6).Value()) 
, *(Aspect_TypeOfMarker *)(Args->ChangeValue(7).Value()) 
, *(Aspect_TypeOfLine *)(Args->ChangeValue(8).Value()) 
)
;  	  } break;       

	case 17 : { 

AIS::ComputeProjVertexPresentation(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(TopoDS_Vertex *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(Quantity_NameOfColor *)(Args->ChangeValue(5).Value()) 
, *(Standard_Real *)(Args->ChangeValue(6).Value()) 
, *(Aspect_TypeOfMarker *)(Args->ChangeValue(7).Value()) 
)
;  	  } break;       

	case 18 : { 

AIS::ComputeProjVertexPresentation(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(TopoDS_Vertex *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(Quantity_NameOfColor *)(Args->ChangeValue(5).Value()) 
, *(Standard_Real *)(Args->ChangeValue(6).Value()) 
)
;  	  } break;       

	case 19 : { 

AIS::ComputeProjVertexPresentation(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(TopoDS_Vertex *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(Quantity_NameOfColor *)(Args->ChangeValue(5).Value()) 
)
;  	  } break;       

	case 20 : { 

AIS::ComputeProjVertexPresentation(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(TopoDS_Vertex *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
)
;  	  } break;       

	case 21 : { 

Engine::Return(AIS::DistanceFromApex(*(gp_Elips *)(Args->ChangeValue(1).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
)
);
  	  } break;       

	case 22 : { 

gp_Pnt *aRet = new gp_Pnt(AIS::Farest(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(2).Value()) 
)
);
theHandle = new Engine_Handle((Standard_Address) aRet,STANDARD_TYPE(gp_Pnt));
Engine::Return(*theHandle);
  	  } break;       

	case 23 : { 

Engine::Return(AIS::GetPlaneFromFace(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(gp_Pln *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Surface) *)(Args->ChangeValue(3).Value())
, *(AIS_KindOfSurface *)(Args->ChangeValue(4).Value()) 
, *(Standard_Real *)(Args->ChangeValue(5).Value()) 
)
);
Engine::Return((Standard_Integer) *(AIS_KindOfSurface *)(Args->ChangeValue(4).Value()) 
,4);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(5).Value()) 
,5);
  	  } break;       

	case 24 : { 

Engine::Return(AIS::InDomain(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
)
);
  	  } break;       

	case 25 : { 

AIS::InitFaceLength(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(gp_Pln *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Surface) *)(Args->ChangeValue(3).Value())
, *(AIS_KindOfSurface *)(Args->ChangeValue(4).Value()) 
, *(Standard_Real *)(Args->ChangeValue(5).Value()) 
)
;Engine::Return((Standard_Integer) *(AIS_KindOfSurface *)(Args->ChangeValue(4).Value()) 
,4);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(5).Value()) 
,5);
  	  } break;       

	case 26 : { 

gp_Pnt *aRet = new gp_Pnt(AIS::Nearest(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(2).Value()) 
)
);
theHandle = new Engine_Handle((Standard_Address) aRet,STANDARD_TYPE(gp_Pnt));
Engine::Return(*theHandle);
  	  } break;       

	case 27 : { 

gp_Pnt *aRet = new gp_Pnt(AIS::NearestApex(*(gp_Elips *)(Args->ChangeValue(1).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(2).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(3).Value()) 
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(Standard_Real *)(Args->ChangeValue(5).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(6).Value()) 
)
);
theHandle = new Engine_Handle((Standard_Address) aRet,STANDARD_TYPE(gp_Pnt));
Engine::Return(*theHandle);
Engine::Return(*(Standard_Boolean *)(Args->ChangeValue(6).Value()) 
,6);
  	  } break;       

	case 28 : { 

gp_Pnt *aRet = new gp_Pnt(AIS::ProjectPointOnLine(*(gp_Pnt *)(Args->ChangeValue(1).Value()) 
, *(gp_Lin *)(Args->ChangeValue(2).Value()) 
)
);
theHandle = new Engine_Handle((Standard_Address) aRet,STANDARD_TYPE(gp_Pnt));
Engine::Return(*theHandle);
  	  } break;       

	case 29 : { 

gp_Pnt *aRet = new gp_Pnt(AIS::ProjectPointOnPlane(*(gp_Pnt *)(Args->ChangeValue(1).Value()) 
, *(gp_Pln *)(Args->ChangeValue(2).Value()) 
)
);
theHandle = new Engine_Handle((Standard_Address) aRet,STANDARD_TYPE(gp_Pnt));
Engine::Return(*theHandle);
  	  } break;       

	case 30 : { 

gp_Pnt *aRet = new gp_Pnt(AIS::TranslatePointToBound(*(gp_Pnt *)(Args->ChangeValue(1).Value()) 
, *(gp_Dir *)(Args->ChangeValue(2).Value()) 
, *(Bnd_Box *)(Args->ChangeValue(3).Value()) 
)
);
theHandle = new Engine_Handle((Standard_Address) aRet,STANDARD_TYPE(gp_Pnt));
Engine::Return(*theHandle);
  	  } break;       

	case 31 : { 

const gp_Ax1& aRet = (* ((Handle(AIS_AngleDimension) *) theObject))->Axis()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(gp_Ax1),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 32 : { 

(* ((Handle(AIS_AngleDimension) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 33 : { 

 Handle(AIS_AngleDimension) aHand = new AIS_AngleDimension(*(TopoDS_Edge *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Edge *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(5).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AngleDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 34 : { 

 Handle(AIS_AngleDimension) aHand = new AIS_AngleDimension(*(TopoDS_Edge *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Edge *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(5).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(6).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(7).Value()) 
, *(Standard_Real *)(Args->ChangeValue(8).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AngleDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 35 : { 

 Handle(AIS_AngleDimension) aHand = new AIS_AngleDimension(*(TopoDS_Edge *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Edge *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(5).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(6).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(7).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AngleDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 36 : { 

 Handle(AIS_AngleDimension) aHand = new AIS_AngleDimension(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AngleDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 37 : { 

 Handle(AIS_AngleDimension) aHand = new AIS_AngleDimension(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(5).Value()) 
, *(Standard_Real *)(Args->ChangeValue(6).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AngleDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 38 : { 

 Handle(AIS_AngleDimension) aHand = new AIS_AngleDimension(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(5).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AngleDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 39 : { 

 Handle(AIS_AngleDimension) aHand = new AIS_AngleDimension(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Face *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(4).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AngleDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 40 : { 

 Handle(AIS_AngleDimension) aHand = new AIS_AngleDimension(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Face *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(4).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(5).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(6).Value()) 
, *(Standard_Real *)(Args->ChangeValue(7).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AngleDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 41 : { 

 Handle(AIS_AngleDimension) aHand = new AIS_AngleDimension(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Face *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(4).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(5).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(6).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AngleDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 42 : { 

 Handle(AIS_AngleDimension) aHand = new AIS_AngleDimension(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Face *)(Args->ChangeValue(2).Value()) 
, *(gp_Ax1 *)(Args->ChangeValue(3).Value()) 
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(5).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AngleDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 43 : { 

 Handle(AIS_AngleDimension) aHand = new AIS_AngleDimension(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Face *)(Args->ChangeValue(2).Value()) 
, *(gp_Ax1 *)(Args->ChangeValue(3).Value()) 
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(5).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(6).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(7).Value()) 
, *(Standard_Real *)(Args->ChangeValue(8).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AngleDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 44 : { 

 Handle(AIS_AngleDimension) aHand = new AIS_AngleDimension(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Face *)(Args->ChangeValue(2).Value()) 
, *(gp_Ax1 *)(Args->ChangeValue(3).Value()) 
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(5).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(6).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(7).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AngleDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 45 : { 

Engine::Return((* ((Handle(AIS_AngleDimension) *) theObject))->IsMovable()
);
  	  } break;       

	case 46 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_AngleDimension) *) theObject))->KindOfDimension()
);
  	  } break;       

	case 47 : { 

(* ((Handle(AIS_AngleDimension) *) theObject))->SetAxis(*(gp_Ax1 *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 48 : { 

(* ((Handle(AIS_AngleDimension) *) theObject))->SetConeFace(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 49 : { 

(* ((Handle(AIS_AngleDimension) *) theObject))->SetFirstShape(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 50 : { 

(* ((Handle(AIS_AngleDimension) *) theObject))->SetSecondShape(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 51 : { 

 Handle(AIS_AttributeFilter) aHand = new AIS_AttributeFilter();
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AttributeFilter));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 52 : { 

 Handle(AIS_AttributeFilter) aHand = new AIS_AttributeFilter(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AttributeFilter));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 53 : { 

 Handle(AIS_AttributeFilter) aHand = new AIS_AttributeFilter(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_AttributeFilter));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 54 : { 

Engine::Return((* ((Handle(AIS_AttributeFilter) *) theObject))->HasColor()
);
  	  } break;       

	case 55 : { 

Engine::Return((* ((Handle(AIS_AttributeFilter) *) theObject))->HasWidth()
);
  	  } break;       

	case 56 : { 

Engine::Return((* ((Handle(AIS_AttributeFilter) *) theObject))->IsOk(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 57 : { 

(* ((Handle(AIS_AttributeFilter) *) theObject))->SetColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 58 : { 

(* ((Handle(AIS_AttributeFilter) *) theObject))->SetWidth(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 59 : { 

(* ((Handle(AIS_AttributeFilter) *) theObject))->UnsetColor()
;  	  } break;       

	case 60 : { 

(* ((Handle(AIS_AttributeFilter) *) theObject))->UnsetWidth()
;  	  } break;       

	case 61 : { 

Engine::Return((* ((Handle(AIS_Axis) *) theObject))->AcceptDisplayMode(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 62 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Axis) *) theObject))->Axis2Placement()
,STANDARD_TYPE(Geom_Axis2Placement));
Engine::Return(*theHandle);
  	  } break;       

	case 63 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Axis) *) theObject))->Component()
,STANDARD_TYPE(Geom_Line));
Engine::Return(*theHandle);
  	  } break;       

	case 64 : { 

(* ((Handle(AIS_Axis) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 65 : { 

 Handle(AIS_Axis) aHand = new AIS_Axis(*(Handle(Geom_Axis1Placement) *)(Args->ChangeValue(1).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Axis));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 66 : { 

 Handle(AIS_Axis) aHand = new AIS_Axis(*(Handle(Geom_Axis2Placement) *)(Args->ChangeValue(1).Value())
, *(AIS_TypeOfAxis *)(Args->ChangeValue(2).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Axis));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 67 : { 

 Handle(AIS_Axis) aHand = new AIS_Axis(*(Handle(Geom_Line) *)(Args->ChangeValue(1).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Axis));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 68 : { 

Engine::Return((* ((Handle(AIS_Axis) *) theObject))->IsXYZAxis()
);
  	  } break;       

	case 69 : { 

(* ((Handle(AIS_Axis) *) theObject))->SetAxis1Placement(*(Handle(Geom_Axis1Placement) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 70 : { 

(* ((Handle(AIS_Axis) *) theObject))->SetAxis2Placement(*(Handle(Geom_Axis2Placement) *)(Args->ChangeValue(1).Value())
, *(AIS_TypeOfAxis *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 71 : { 

(* ((Handle(AIS_Axis) *) theObject))->SetColor(*(Quantity_Color *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 72 : { 

(* ((Handle(AIS_Axis) *) theObject))->SetColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 73 : { 

(* ((Handle(AIS_Axis) *) theObject))->SetComponent(*(Handle(Geom_Line) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 74 : { 

(* ((Handle(AIS_Axis) *) theObject))->SetTypeOfAxis(*(AIS_TypeOfAxis *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 75 : { 

(* ((Handle(AIS_Axis) *) theObject))->SetWidth(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 76 : { 

Engine::Return((* ((Handle(AIS_Axis) *) theObject))->Signature()
);
  	  } break;       

	case 77 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Axis) *) theObject))->Type()
);
  	  } break;       

	case 78 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Axis) *) theObject))->TypeOfAxis()
);
  	  } break;       

	case 79 : { 

(* ((Handle(AIS_Axis) *) theObject))->UnsetColor()
;  	  } break;       

	case 80 : { 

(* ((Handle(AIS_Axis) *) theObject))->UnsetWidth()
;  	  } break;       

	case 81 : { 

Engine::Return((* ((Handle(AIS_BadEdgeFilter) *) theObject))->ActsOn(*(TopAbs_ShapeEnum *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 82 : { 

(* ((Handle(AIS_BadEdgeFilter) *) theObject))->AddEdge(*(TopoDS_Edge *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 83 : { 

 Handle(AIS_BadEdgeFilter) aHand = new AIS_BadEdgeFilter();
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_BadEdgeFilter));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 84 : { 

Engine::Return((* ((Handle(AIS_BadEdgeFilter) *) theObject))->IsOk(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 85 : { 

(* ((Handle(AIS_BadEdgeFilter) *) theObject))->RemoveEdges(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 86 : { 

(* ((Handle(AIS_BadEdgeFilter) *) theObject))->SetContour(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 87 : { 

Engine::Return((* ((Handle(AIS_C0RegularityFilter) *) theObject))->ActsOn(*(TopAbs_ShapeEnum *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 88 : { 

 Handle(AIS_C0RegularityFilter) aHand = new AIS_C0RegularityFilter(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_C0RegularityFilter));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 89 : { 

Engine::Return((* ((Handle(AIS_C0RegularityFilter) *) theObject))->IsOk(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 90 : { 

(* ((Handle(AIS_Chamf2dDimension) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 91 : { 

 Handle(AIS_Chamf2dDimension) aHand = new AIS_Chamf2dDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(2).Value())
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(4).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Chamf2dDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 92 : { 

 Handle(AIS_Chamf2dDimension) aHand = new AIS_Chamf2dDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(2).Value())
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(4).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(5).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(6).Value()) 
, *(Standard_Real *)(Args->ChangeValue(7).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Chamf2dDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 93 : { 

 Handle(AIS_Chamf2dDimension) aHand = new AIS_Chamf2dDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(2).Value())
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(4).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(5).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(6).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Chamf2dDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 94 : { 

Engine::Return((* ((Handle(AIS_Chamf2dDimension) *) theObject))->IsMovable()
);
  	  } break;       

	case 95 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Chamf2dDimension) *) theObject))->KindOfDimension()
);
  	  } break;       

	case 96 : { 

(* ((Handle(AIS_Chamf3dDimension) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 97 : { 

 Handle(AIS_Chamf3dDimension) aHand = new AIS_Chamf3dDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Chamf3dDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 98 : { 

 Handle(AIS_Chamf3dDimension) aHand = new AIS_Chamf3dDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(5).Value()) 
, *(Standard_Real *)(Args->ChangeValue(6).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Chamf3dDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 99 : { 

 Handle(AIS_Chamf3dDimension) aHand = new AIS_Chamf3dDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(5).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Chamf3dDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 100 : { 

Engine::Return((* ((Handle(AIS_Chamf3dDimension) *) theObject))->IsMovable()
);
  	  } break;       

	case 101 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Chamf3dDimension) *) theObject))->KindOfDimension()
);
  	  } break;       

	case 102 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Circle) *) theObject))->Circle()
,STANDARD_TYPE(Geom_Circle));
Engine::Return(*theHandle);
  	  } break;       

	case 103 : { 

(* ((Handle(AIS_Circle) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 104 : { 

 Handle(AIS_Circle) aHand = new AIS_Circle(*(Handle(Geom_Circle) *)(Args->ChangeValue(1).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Circle));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 105 : { 

 Handle(AIS_Circle) aHand = new AIS_Circle(*(Handle(Geom_Circle) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(4).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Circle));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 106 : { 

 Handle(AIS_Circle) aHand = new AIS_Circle(*(Handle(Geom_Circle) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Circle));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 107 : { 

(* ((Handle(AIS_Circle) *) theObject))->Parameters(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;Engine::Return(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
,1);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(2).Value()) 
,2);
  	  } break;       

	case 108 : { 

(* ((Handle(AIS_Circle) *) theObject))->SetCircle(*(Handle(Geom_Circle) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 109 : { 

(* ((Handle(AIS_Circle) *) theObject))->SetColor(*(Quantity_Color *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 110 : { 

(* ((Handle(AIS_Circle) *) theObject))->SetColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 111 : { 

(* ((Handle(AIS_Circle) *) theObject))->SetFirstParam(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 112 : { 

(* ((Handle(AIS_Circle) *) theObject))->SetLastParam(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 113 : { 

(* ((Handle(AIS_Circle) *) theObject))->SetWidth(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 114 : { 

Engine::Return((* ((Handle(AIS_Circle) *) theObject))->Signature()
);
  	  } break;       

	case 115 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Circle) *) theObject))->Type()
);
  	  } break;       

	case 116 : { 

(* ((Handle(AIS_Circle) *) theObject))->UnsetColor()
;  	  } break;       

	case 117 : { 

(* ((Handle(AIS_Circle) *) theObject))->UnsetWidth()
;  	  } break;       

	case 118 : { 

(* ((Handle(AIS_ConcentricRelation) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 119 : { 

 Handle(AIS_ConcentricRelation) aHand = new AIS_ConcentricRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ConcentricRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 120 : { 

Engine::Return((* ((Handle(AIS_ConnectedInteractive) *) theObject))->AcceptShapeDecomposition()
);
  	  } break;       

	case 121 : { 

(* ((Handle(AIS_ConnectedInteractive) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 122 : { 

(* ((Handle(AIS_ConnectedInteractive) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 123 : { 

(* ((Handle(AIS_ConnectedInteractive) *) theObject))->Compute(*(Handle(PrsMgr_PresentationManager2d) *)(Args->ChangeValue(1).Value())
, *(Handle(Graphic2d_GraphicObject) *)(Args->ChangeValue(2).Value())
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 124 : { 

(* ((Handle(AIS_ConnectedInteractive) *) theObject))->Compute(*(Handle(PrsMgr_PresentationManager2d) *)(Args->ChangeValue(1).Value())
, *(Handle(Graphic2d_GraphicObject) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 125 : { 

(* ((Handle(AIS_ConnectedInteractive) *) theObject))->Connect(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 126 : { 

(* ((Handle(AIS_ConnectedInteractive) *) theObject))->Connect(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(TopLoc_Location *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 127 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_ConnectedInteractive) *) theObject))->ConnectedTo()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 128 : { 

 Handle(AIS_ConnectedInteractive) aHand = new AIS_ConnectedInteractive(*(PrsMgr_TypeOfPresentation3d *)(Args->ChangeValue(1).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ConnectedInteractive));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 129 : { 

 Handle(AIS_ConnectedInteractive) aHand = new AIS_ConnectedInteractive();
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ConnectedInteractive));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 130 : { 

(* ((Handle(AIS_ConnectedInteractive) *) theObject))->Disconnect()
;  	  } break;       

	case 131 : { 

Engine::Return((* ((Handle(AIS_ConnectedInteractive) *) theObject))->HasConnection()
);
  	  } break;       

	case 132 : { 

Engine::Return((* ((Handle(AIS_ConnectedInteractive) *) theObject))->Signature()
);
  	  } break;       

	case 133 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_ConnectedInteractive) *) theObject))->Type()
);
  	  } break;       

	case 134 : { 

(* ((Handle(AIS_ConnectedInteractive) *) theObject))->UpdateLocation()
;  	  } break;       

	case 135 : { 

(* ((Handle(AIS_ConnectedInteractive) *) theObject))->UpdateLocation(*(Handle(SelectMgr_Selection) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 136 : { 

Engine::Return((* ((Handle(AIS_ConnectedShape) *) theObject))->AcceptShapeDecomposition()
);
  	  } break;       

	case 137 : { 

(* ((Handle(AIS_ConnectedShape) *) theObject))->Compute(*(Handle(PrsMgr_PresentationManager2d) *)(Args->ChangeValue(1).Value())
, *(Handle(Graphic2d_GraphicObject) *)(Args->ChangeValue(2).Value())
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 138 : { 

(* ((Handle(AIS_ConnectedShape) *) theObject))->Compute(*(Handle(PrsMgr_PresentationManager2d) *)(Args->ChangeValue(1).Value())
, *(Handle(Graphic2d_GraphicObject) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 139 : { 

(* ((Handle(AIS_ConnectedShape) *) theObject))->Compute(*(Handle(PrsMgr_PresentationManager3d) *)(Args->ChangeValue(1).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(2).Value())
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 140 : { 

(* ((Handle(AIS_ConnectedShape) *) theObject))->Compute(*(Handle(PrsMgr_PresentationManager3d) *)(Args->ChangeValue(1).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 141 : { 

(* ((Handle(AIS_ConnectedShape) *) theObject))->Connect(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 142 : { 

(* ((Handle(AIS_ConnectedShape) *) theObject))->Connect(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(TopLoc_Location *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 143 : { 

 Handle(AIS_ConnectedShape) aHand = new AIS_ConnectedShape(*(Handle(AIS_ConnectedShape) *)(Args->ChangeValue(1).Value())
, *(PrsMgr_TypeOfPresentation3d *)(Args->ChangeValue(2).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ConnectedShape));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 144 : { 

 Handle(AIS_ConnectedShape) aHand = new AIS_ConnectedShape(*(Handle(AIS_ConnectedShape) *)(Args->ChangeValue(1).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ConnectedShape));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 145 : { 

 Handle(AIS_ConnectedShape) aHand = new AIS_ConnectedShape(*(Handle(AIS_Shape) *)(Args->ChangeValue(1).Value())
, *(PrsMgr_TypeOfPresentation3d *)(Args->ChangeValue(2).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ConnectedShape));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 146 : { 

 Handle(AIS_ConnectedShape) aHand = new AIS_ConnectedShape(*(Handle(AIS_Shape) *)(Args->ChangeValue(1).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ConnectedShape));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 147 : { 

 Handle(AIS_ConnectedShape) aHand = new AIS_ConnectedShape(*(PrsMgr_TypeOfPresentation3d *)(Args->ChangeValue(1).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ConnectedShape));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 148 : { 

 Handle(AIS_ConnectedShape) aHand = new AIS_ConnectedShape();
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ConnectedShape));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 149 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_ConnectedShape) *) theObject))->Shape()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 150 : { 

Engine::Return((* ((Handle(AIS_ConnectedShape) *) theObject))->Signature()
);
  	  } break;       

	case 151 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_ConnectedShape) *) theObject))->Type()
);
  	  } break;       

	case 152 : { 

 AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive *aHand = new AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive();
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 153 : { 

 AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive *aHand = new AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive(*(AIS_DataMapofIntegerListOfinteractive *)(Args->ChangeValue(1).Value()) 
);
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 154 : { 

((AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive *) theObject)->Initialize(*(AIS_DataMapofIntegerListOfinteractive *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 155 : { 

Engine::Return(((AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive *) theObject)->Key()
);
  	  } break;       

	case 156 : { 

const AIS_ListOfInteractive& aRet = ((AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive *) theObject)->Value()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(AIS_ListOfInteractive),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 157 : { 

Engine::Return((* ((Handle(AIS_DataMapNodeOfDataMapofIntegerListOfinteractive) *) theObject))->Key()
);
  	  } break;       

	case 158 : { 

const AIS_ListOfInteractive& aRet = (* ((Handle(AIS_DataMapNodeOfDataMapofIntegerListOfinteractive) *) theObject))->Value()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(AIS_ListOfInteractive),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 159 : { 

const AIS_DataMapofIntegerListOfinteractive& aRet = ((AIS_DataMapofIntegerListOfinteractive *) theObject)->Assign(*(AIS_DataMapofIntegerListOfinteractive *)(Args->ChangeValue(1).Value()) 
)
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(AIS_DataMapofIntegerListOfinteractive),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 160 : { 

Engine::Return(((AIS_DataMapofIntegerListOfinteractive *) theObject)->Bind(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(AIS_ListOfInteractive *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 161 : { 

const AIS_ListOfInteractive& aRet = ((AIS_DataMapofIntegerListOfinteractive *) theObject)->ChangeFind(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(AIS_ListOfInteractive),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 162 : { 

((AIS_DataMapofIntegerListOfinteractive *) theObject)->Clear()
;  	  } break;       

	case 163 : { 

 AIS_DataMapofIntegerListOfinteractive *aHand = new AIS_DataMapofIntegerListOfinteractive(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
);
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_DataMapofIntegerListOfinteractive)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 164 : { 

 AIS_DataMapofIntegerListOfinteractive *aHand = new AIS_DataMapofIntegerListOfinteractive();
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_DataMapofIntegerListOfinteractive)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 165 : { 

const AIS_ListOfInteractive& aRet = ((AIS_DataMapofIntegerListOfinteractive *) theObject)->Find(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(AIS_ListOfInteractive),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 166 : { 

Engine::Return(((AIS_DataMapofIntegerListOfinteractive *) theObject)->IsBound(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 167 : { 

((AIS_DataMapofIntegerListOfinteractive *) theObject)->ReSize(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 168 : { 

Engine::Return(((AIS_DataMapofIntegerListOfinteractive *) theObject)->UnBind(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 169 : { 

(* ((Handle(AIS_DiameterDimension) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 170 : { 

 Handle(AIS_DiameterDimension) aHand = new AIS_DiameterDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_DiameterDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 171 : { 

 Handle(AIS_DiameterDimension) aHand = new AIS_DiameterDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(5).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(6).Value()) 
, *(Standard_Real *)(Args->ChangeValue(7).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_DiameterDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 172 : { 

 Handle(AIS_DiameterDimension) aHand = new AIS_DiameterDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(5).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(6).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_DiameterDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 173 : { 

Engine::Return((* ((Handle(AIS_DiameterDimension) *) theObject))->DiamSymbol()
);
  	  } break;       

	case 174 : { 

Engine::Return((* ((Handle(AIS_DiameterDimension) *) theObject))->IsMovable()
);
  	  } break;       

	case 175 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_DiameterDimension) *) theObject))->KindOfDimension()
);
  	  } break;       

	case 176 : { 

(* ((Handle(AIS_DiameterDimension) *) theObject))->SetDiamSymbol(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 177 : { 

 Handle(AIS_DimensionOwner) aHand = new AIS_DimensionOwner(*(Handle(SelectMgr_SelectableObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_DimensionOwner));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 178 : { 

 Handle(AIS_DimensionOwner) aHand = new AIS_DimensionOwner(*(Handle(SelectMgr_SelectableObject) *)(Args->ChangeValue(1).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_DimensionOwner));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 179 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_DimensionOwner) *) theObject))->FixedShape()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 180 : { 

(* ((Handle(AIS_DimensionOwner) *) theObject))->SetShape(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 181 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->AngleAspect()
,STANDARD_TYPE(Prs3d_AngleAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 182 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->ArrowAspect()
,STANDARD_TYPE(Prs3d_ArrowAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 183 : { 

(* ((Handle(AIS_Drawer) *) theObject))->ClearLocalAttributes()
;  	  } break;       

	case 184 : { 

 Handle(AIS_Drawer) aHand = new AIS_Drawer();
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Drawer));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 185 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->DatumAspect()
,STANDARD_TYPE(Prs3d_DatumAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 186 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->DeviationAngle()
);
  	  } break;       

	case 187 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->DeviationCoefficient()
);
  	  } break;       

	case 188 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->Discretisation()
);
  	  } break;       

	case 189 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->DrawHiddenLine()
);
  	  } break;       

	case 190 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->FreeBoundaryAspect()
,STANDARD_TYPE(Prs3d_LineAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 191 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->FreeBoundaryDraw()
);
  	  } break;       

	case 192 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->HLRAngle()
);
  	  } break;       

	case 193 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->HLRDeviationCoefficient()
);
  	  } break;       

	case 194 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->HasAngleAspect()
);
  	  } break;       

	case 195 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->HasDatumAspect()
);
  	  } break;       

	case 196 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->HasLengthAspect()
);
  	  } break;       

	case 197 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->HasLineAspect()
);
  	  } break;       

	case 198 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->HasLink()
);
  	  } break;       

	case 199 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->HasLocalAttributes()
);
  	  } break;       

	case 200 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->HasPlaneAspect()
);
  	  } break;       

	case 201 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->HasPointAspect()
);
  	  } break;       

	case 202 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->HasShadingAspect()
);
  	  } break;       

	case 203 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->HasTextAspect()
);
  	  } break;       

	case 204 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->HasWireAspect()
);
  	  } break;       

	case 205 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->HiddenLineAspect()
,STANDARD_TYPE(Prs3d_LineAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 206 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->IsOwnDeviationAngle()
);
  	  } break;       

	case 207 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->IsOwnDeviationCoefficient()
);
  	  } break;       

	case 208 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->IsOwnHLRDeviationAngle()
);
  	  } break;       

	case 209 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->IsOwnHLRDeviationCoefficient()
);
  	  } break;       

	case 210 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->IsoOnPlane()
);
  	  } break;       

	case 211 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->LengthAspect()
,STANDARD_TYPE(Prs3d_LengthAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 212 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->LineArrowDraw()
);
  	  } break;       

	case 213 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->LineAspect()
,STANDARD_TYPE(Prs3d_LineAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 214 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->Link()
,STANDARD_TYPE(Prs3d_Drawer));
Engine::Return(*theHandle);
  	  } break;       

	case 215 : { 

(* ((Handle(AIS_Drawer) *) theObject))->Link(*(Handle(Prs3d_Drawer) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 216 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->MaximalChordialDeviation()
);
  	  } break;       

	case 217 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->MaximalParameterValue()
);
  	  } break;       

	case 218 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->PlaneAspect()
,STANDARD_TYPE(Prs3d_PlaneAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 219 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->PointAspect()
,STANDARD_TYPE(Prs3d_PointAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 220 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->PreviousDeviationAngle()
);
  	  } break;       

	case 221 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->PreviousDeviationCoefficient()
);
  	  } break;       

	case 222 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->PreviousHLRDeviationAngle()
);
  	  } break;       

	case 223 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->PreviousHLRDeviationCoefficient()
);
  	  } break;       

	case 224 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->RadiusAspect()
,STANDARD_TYPE(Prs3d_RadiusAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 225 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->SectionAspect()
,STANDARD_TYPE(Prs3d_LineAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 226 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->SeenLineAspect()
,STANDARD_TYPE(Prs3d_LineAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 227 : { 

(* ((Handle(AIS_Drawer) *) theObject))->SetDeviationAngle()
;  	  } break;       

	case 228 : { 

(* ((Handle(AIS_Drawer) *) theObject))->SetDeviationAngle(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 229 : { 

(* ((Handle(AIS_Drawer) *) theObject))->SetDeviationCoefficient()
;  	  } break;       

	case 230 : { 

(* ((Handle(AIS_Drawer) *) theObject))->SetDeviationCoefficient(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 231 : { 

(* ((Handle(AIS_Drawer) *) theObject))->SetHLRAngle()
;  	  } break;       

	case 232 : { 

(* ((Handle(AIS_Drawer) *) theObject))->SetHLRAngle(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 233 : { 

(* ((Handle(AIS_Drawer) *) theObject))->SetHLRDeviationCoefficient()
;  	  } break;       

	case 234 : { 

(* ((Handle(AIS_Drawer) *) theObject))->SetHLRDeviationCoefficient(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 235 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->ShadingAspect()
,STANDARD_TYPE(Prs3d_ShadingAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 236 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->ShadingAspectGlobal()
);
  	  } break;       

	case 237 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->TextAspect()
,STANDARD_TYPE(Prs3d_TextAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 238 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Drawer) *) theObject))->TypeOfDeflection()
);
  	  } break;       

	case 239 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->UIsoAspect()
,STANDARD_TYPE(Prs3d_IsoAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 240 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->UnFreeBoundaryAspect()
,STANDARD_TYPE(Prs3d_LineAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 241 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->UnFreeBoundaryDraw()
);
  	  } break;       

	case 242 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->VIsoAspect()
,STANDARD_TYPE(Prs3d_IsoAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 243 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->VectorAspect()
,STANDARD_TYPE(Prs3d_LineAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 244 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->WasLastLocal()
);
  	  } break;       

	case 245 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Drawer) *) theObject))->WireAspect()
,STANDARD_TYPE(Prs3d_LineAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 246 : { 

Engine::Return((* ((Handle(AIS_Drawer) *) theObject))->WireDraw()
);
  	  } break;       

	case 247 : { 

(* ((Handle(AIS_EllipseRadiusDimension) *) theObject))->ComputeGeometry()
;  	  } break;       

	case 248 : { 

Engine::Return((* ((Handle(AIS_EllipseRadiusDimension) *) theObject))->IsMovable()
);
  	  } break;       

	case 249 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_EllipseRadiusDimension) *) theObject))->KindOfDimension()
);
  	  } break;       

	case 250 : { 

(* ((Handle(AIS_EqualDistanceRelation) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 251 : { 

AIS_EqualDistanceRelation::ComputeOneEdgeOneVertexLength(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(4).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(5).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(6).Value())
, *(Standard_Boolean *)(Args->ChangeValue(7).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(8).Value()) 
, *(Bnd_Box *)(Args->ChangeValue(9).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(10).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(11).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(12).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(13).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(14).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(15).Value()) 
)
;Engine::Return((Standard_Integer) *(DsgPrs_ArrowSide *)(Args->ChangeValue(15).Value()) 
,15);
  	  } break;       

	case 252 : { 

AIS_EqualDistanceRelation::ComputeTwoEdgesLength(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(TopoDS_Edge *)(Args->ChangeValue(4).Value()) 
, *(TopoDS_Edge *)(Args->ChangeValue(5).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(6).Value())
, *(Standard_Boolean *)(Args->ChangeValue(7).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(8).Value()) 
, *(Bnd_Box *)(Args->ChangeValue(9).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(10).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(11).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(12).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(13).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(14).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(15).Value()) 
)
;Engine::Return((Standard_Integer) *(DsgPrs_ArrowSide *)(Args->ChangeValue(15).Value()) 
,15);
  	  } break;       

	case 253 : { 

AIS_EqualDistanceRelation::ComputeTwoVerticesLength(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(TopoDS_Vertex *)(Args->ChangeValue(4).Value()) 
, *(TopoDS_Vertex *)(Args->ChangeValue(5).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(6).Value())
, *(Standard_Boolean *)(Args->ChangeValue(7).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(8).Value()) 
, *(Bnd_Box *)(Args->ChangeValue(9).Value()) 
, *(AIS_TypeOfDist *)(Args->ChangeValue(10).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(11).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(12).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(13).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(14).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(15).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(16).Value()) 
)
;Engine::Return((Standard_Integer) *(DsgPrs_ArrowSide *)(Args->ChangeValue(16).Value()) 
,16);
  	  } break;       

	case 254 : { 

 Handle(AIS_EqualDistanceRelation) aHand = new AIS_EqualDistanceRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(3).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(4).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(5).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_EqualDistanceRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 255 : { 

(* ((Handle(AIS_EqualDistanceRelation) *) theObject))->SetShape3(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 256 : { 

(* ((Handle(AIS_EqualDistanceRelation) *) theObject))->SetShape4(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 257 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_EqualDistanceRelation) *) theObject))->Shape3()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 258 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_EqualDistanceRelation) *) theObject))->Shape4()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 259 : { 

(* ((Handle(AIS_EqualRadiusRelation) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 260 : { 

 Handle(AIS_EqualRadiusRelation) aHand = new AIS_EqualRadiusRelation(*(TopoDS_Edge *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Edge *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_EqualRadiusRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 261 : { 

Engine::Return((* ((Handle(AIS_ExclusionFilter) *) theObject))->Add(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 262 : { 

Engine::Return((* ((Handle(AIS_ExclusionFilter) *) theObject))->Add(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 263 : { 

(* ((Handle(AIS_ExclusionFilter) *) theObject))->Clear()
;  	  } break;       

	case 264 : { 

 Handle(AIS_ExclusionFilter) aHand = new AIS_ExclusionFilter(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ExclusionFilter));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 265 : { 

 Handle(AIS_ExclusionFilter) aHand = new AIS_ExclusionFilter(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ExclusionFilter));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 266 : { 

 Handle(AIS_ExclusionFilter) aHand = new AIS_ExclusionFilter(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ExclusionFilter));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 267 : { 

 Handle(AIS_ExclusionFilter) aHand = new AIS_ExclusionFilter(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ExclusionFilter));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 268 : { 

 Handle(AIS_ExclusionFilter) aHand = new AIS_ExclusionFilter(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ExclusionFilter));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 269 : { 

 Handle(AIS_ExclusionFilter) aHand = new AIS_ExclusionFilter();
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ExclusionFilter));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 270 : { 

Engine::Return((* ((Handle(AIS_ExclusionFilter) *) theObject))->IsExclusionFlagOn()
);
  	  } break;       

	case 271 : { 

Engine::Return((* ((Handle(AIS_ExclusionFilter) *) theObject))->IsOk(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 272 : { 

Engine::Return((* ((Handle(AIS_ExclusionFilter) *) theObject))->IsStored(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 273 : { 

(* ((Handle(AIS_ExclusionFilter) *) theObject))->ListOfSignature(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(TColStd_ListOfInteger *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 274 : { 

(* ((Handle(AIS_ExclusionFilter) *) theObject))->ListOfStoredTypes(*(TColStd_ListOfInteger *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 275 : { 

Engine::Return((* ((Handle(AIS_ExclusionFilter) *) theObject))->Remove(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 276 : { 

Engine::Return((* ((Handle(AIS_ExclusionFilter) *) theObject))->Remove(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 277 : { 

(* ((Handle(AIS_ExclusionFilter) *) theObject))->SetExclusionFlag(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 278 : { 

(* ((Handle(AIS_FixRelation) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 279 : { 

 Handle(AIS_FixRelation) aHand = new AIS_FixRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(2).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_FixRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 280 : { 

 Handle(AIS_FixRelation) aHand = new AIS_FixRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(2).Value())
, *(TopoDS_Wire *)(Args->ChangeValue(3).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_FixRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 281 : { 

 Handle(AIS_FixRelation) aHand = new AIS_FixRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(2).Value())
, *(TopoDS_Wire *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(Standard_Real *)(Args->ChangeValue(5).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_FixRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 282 : { 

 Handle(AIS_FixRelation) aHand = new AIS_FixRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(2).Value())
, *(TopoDS_Wire *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_FixRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 283 : { 

 Handle(AIS_FixRelation) aHand = new AIS_FixRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(2).Value())
, *(gp_Pnt *)(Args->ChangeValue(3).Value()) 
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_FixRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 284 : { 

 Handle(AIS_FixRelation) aHand = new AIS_FixRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(2).Value())
, *(gp_Pnt *)(Args->ChangeValue(3).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_FixRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 285 : { 

Engine::Return((* ((Handle(AIS_FixRelation) *) theObject))->IsMovable()
);
  	  } break;       

	case 286 : { 

(* ((Handle(AIS_FixRelation) *) theObject))->SetWire(*(TopoDS_Wire *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 287 : { 

TopoDS_Wire *aRet = new TopoDS_Wire((* ((Handle(AIS_FixRelation) *) theObject))->Wire()
);
theHandle = new Engine_Handle((Standard_Address) aRet,STANDARD_TYPE(TopoDS_Wire));
Engine::Return(*theHandle);
  	  } break;       

	case 288 : { 

Engine::Return((Standard_Integer) AIS_GraphicTool::GetInteriorColor(*(Handle(Prs3d_Drawer) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 289 : { 

AIS_GraphicTool::GetInteriorColor(*(Handle(Prs3d_Drawer) *)(Args->ChangeValue(1).Value())
, *(Quantity_Color *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 290 : { 

AIS_GraphicTool::GetLineAtt(*(Handle(Prs3d_Drawer) *)(Args->ChangeValue(1).Value())
, *(AIS_TypeOfAttribute *)(Args->ChangeValue(2).Value()) 
, *(Quantity_NameOfColor *)(Args->ChangeValue(3).Value()) 
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(Aspect_TypeOfLine *)(Args->ChangeValue(5).Value()) 
)
;Engine::Return((Standard_Integer) *(Quantity_NameOfColor *)(Args->ChangeValue(3).Value()) 
,3);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(4).Value()) 
,4);
Engine::Return((Standard_Integer) *(Aspect_TypeOfLine *)(Args->ChangeValue(5).Value()) 
,5);
  	  } break;       

	case 291 : { 

Engine::Return((Standard_Integer) AIS_GraphicTool::GetLineColor(*(Handle(Prs3d_Drawer) *)(Args->ChangeValue(1).Value())
, *(AIS_TypeOfAttribute *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 292 : { 

AIS_GraphicTool::GetLineColor(*(Handle(Prs3d_Drawer) *)(Args->ChangeValue(1).Value())
, *(AIS_TypeOfAttribute *)(Args->ChangeValue(2).Value()) 
, *(Quantity_Color *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 293 : { 

Engine::Return((Standard_Integer) AIS_GraphicTool::GetLineType(*(Handle(Prs3d_Drawer) *)(Args->ChangeValue(1).Value())
, *(AIS_TypeOfAttribute *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 294 : { 

Engine::Return(AIS_GraphicTool::GetLineWidth(*(Handle(Prs3d_Drawer) *)(Args->ChangeValue(1).Value())
, *(AIS_TypeOfAttribute *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 295 : { 

Graphic3d_MaterialAspect *aRet = new Graphic3d_MaterialAspect(AIS_GraphicTool::GetMaterial(*(Handle(Prs3d_Drawer) *)(Args->ChangeValue(1).Value())
)
);
theHandle = new Engine_Handle((Standard_Address) aRet,STANDARD_TYPE(Graphic3d_MaterialAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 296 : { 

(* ((Handle(AIS_IdenticRelation) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 297 : { 

 Handle(AIS_IdenticRelation) aHand = new AIS_IdenticRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_IdenticRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 298 : { 

Engine::Return((* ((Handle(AIS_IdenticRelation) *) theObject))->IsMovable()
);
  	  } break;       

	case 299 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_IndexedDataMapNodeOfIndexedDataMapOfOwnerPrs) *) theObject))->Key1()
,STANDARD_TYPE(SelectMgr_EntityOwner));
Engine::Return(*theHandle);
  	  } break;       

	case 300 : { 

Engine::Return((* ((Handle(AIS_IndexedDataMapNodeOfIndexedDataMapOfOwnerPrs) *) theObject))->Key2()
);
  	  } break;       

	case 301 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_IndexedDataMapNodeOfIndexedDataMapOfOwnerPrs) *) theObject))->Value()
,STANDARD_TYPE(Prs3d_Presentation));
Engine::Return(*theHandle);
  	  } break;       

	case 302 : { 

Engine::Return(((AIS_IndexedDataMapOfOwnerPrs *) theObject)->Add(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(2).Value())
)
);
  	  } break;       

	case 303 : { 

const AIS_IndexedDataMapOfOwnerPrs& aRet = ((AIS_IndexedDataMapOfOwnerPrs *) theObject)->Assign(*(AIS_IndexedDataMapOfOwnerPrs *)(Args->ChangeValue(1).Value()) 
)
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(AIS_IndexedDataMapOfOwnerPrs),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 304 : { 

theHandle = new Engine_Handle(((AIS_IndexedDataMapOfOwnerPrs *) theObject)->ChangeFromIndex(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
,STANDARD_TYPE(Prs3d_Presentation));
Engine::Return(*theHandle);
  	  } break;       

	case 305 : { 

theHandle = new Engine_Handle(((AIS_IndexedDataMapOfOwnerPrs *) theObject)->ChangeFromKey(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
)
,STANDARD_TYPE(Prs3d_Presentation));
Engine::Return(*theHandle);
  	  } break;       

	case 306 : { 

((AIS_IndexedDataMapOfOwnerPrs *) theObject)->Clear()
;  	  } break;       

	case 307 : { 

Engine::Return(((AIS_IndexedDataMapOfOwnerPrs *) theObject)->Contains(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 308 : { 

 AIS_IndexedDataMapOfOwnerPrs *aHand = new AIS_IndexedDataMapOfOwnerPrs(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
);
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_IndexedDataMapOfOwnerPrs)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 309 : { 

 AIS_IndexedDataMapOfOwnerPrs *aHand = new AIS_IndexedDataMapOfOwnerPrs();
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_IndexedDataMapOfOwnerPrs)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 310 : { 

theHandle = new Engine_Handle(((AIS_IndexedDataMapOfOwnerPrs *) theObject)->FindFromIndex(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
,STANDARD_TYPE(Prs3d_Presentation));
Engine::Return(*theHandle);
  	  } break;       

	case 311 : { 

theHandle = new Engine_Handle(((AIS_IndexedDataMapOfOwnerPrs *) theObject)->FindFromKey(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
)
,STANDARD_TYPE(Prs3d_Presentation));
Engine::Return(*theHandle);
  	  } break;       

	case 312 : { 

Engine::Return(((AIS_IndexedDataMapOfOwnerPrs *) theObject)->FindIndex(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 313 : { 

theHandle = new Engine_Handle(((AIS_IndexedDataMapOfOwnerPrs *) theObject)->FindKey(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
,STANDARD_TYPE(SelectMgr_EntityOwner));
Engine::Return(*theHandle);
  	  } break;       

	case 314 : { 

((AIS_IndexedDataMapOfOwnerPrs *) theObject)->ReSize(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 315 : { 

((AIS_IndexedDataMapOfOwnerPrs *) theObject)->RemoveLast()
;  	  } break;       

	case 316 : { 

((AIS_IndexedDataMapOfOwnerPrs *) theObject)->Substitute(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 317 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Activate(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 318 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Activate(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 319 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ActivateStandardMode(*(TopAbs_ShapeEnum *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 320 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ActivatedModes(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(TColStd_ListOfInteger *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 321 : { 

const TColStd_ListOfInteger& aRet = (* ((Handle(AIS_InteractiveContext) *) theObject))->ActivatedStandardModes()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TColStd_ListOfInteger),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 322 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->AddFilter(*(Handle(SelectMgr_Filter) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 323 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->AddOrRemoveCurrentObject(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 324 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->AddOrRemoveCurrentObject(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 325 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->AddOrRemoveSelected(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 326 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->AddOrRemoveSelected(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 327 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->AddOrRemoveSelected(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 328 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->AddOrRemoveSelected(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 329 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->AddOrRemoveSelected(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 330 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->AddOrRemoveSelected(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 331 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->Applicative()
,STANDARD_TYPE(Standard_Transient));
Engine::Return(*theHandle);
  	  } break;       

	case 332 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->AutomaticHilight()
);
  	  } break;       

	case 333 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->BeginImmediateDraw()
);
  	  } break;       

	case 334 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Clear(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 335 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Clear(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 336 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ClearActiveAreas(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 337 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ClearActiveSensitive(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 338 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ClearCurrents(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 339 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ClearCurrents()
;  	  } break;       

	case 340 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ClearLocalContext(*(AIS_ClearMode *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 341 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ClearLocalContext()
;  	  } break;       

	case 342 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ClearPrs(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 343 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ClearPrs(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 344 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ClearPrs(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 345 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ClearSelected(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 346 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ClearSelected()
;  	  } break;       

	case 347 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->CloseAllContexts(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 348 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->CloseAllContexts()
;  	  } break;       

	case 349 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->CloseCollector()
;  	  } break;       

	case 350 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->CloseLocalContext(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 351 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->CloseLocalContext(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 352 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->CloseLocalContext()
;  	  } break;       

	case 353 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->Collector()
,STANDARD_TYPE(V3d_Viewer));
Engine::Return(*theHandle);
  	  } break;       

	case 354 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->CollectorPrsMgr()
,STANDARD_TYPE(PrsMgr_PresentationManager3d));
Engine::Return(*theHandle);
  	  } break;       

	case 355 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->CollectorSelector()
,STANDARD_TYPE(StdSelect_ViewerSelector3d));
Engine::Return(*theHandle);
  	  } break;       

	case 356 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->Color(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 357 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Color(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Quantity_Color *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 358 : { 

 Handle(AIS_InteractiveContext) aHand = new AIS_InteractiveContext(*(Handle(V3d_Viewer) *)(Args->ChangeValue(1).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_InteractiveContext));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 359 : { 

 Handle(AIS_InteractiveContext) aHand = new AIS_InteractiveContext(*(Handle(V3d_Viewer) *)(Args->ChangeValue(1).Value())
, *(Handle(V3d_Viewer) *)(Args->ChangeValue(2).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_InteractiveContext));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 360 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->Current()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 361 : { 

const TCollection_AsciiString& aRet = (* ((Handle(AIS_InteractiveContext) *) theObject))->CurrentName()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TCollection_AsciiString),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 362 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->CurrentViewer()
,STANDARD_TYPE(V3d_Viewer));
Engine::Return(*theHandle);
  	  } break;       

	case 363 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Deactivate(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 364 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Deactivate(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 365 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DeactivateStandardMode(*(TopAbs_ShapeEnum *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 366 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->DefaultColor()
);
  	  } break;       

	case 367 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->DefaultDrawer()
,STANDARD_TYPE(Prs3d_Drawer));
Engine::Return(*theHandle);
  	  } break;       

	case 368 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Delete()
;  	  } break;       

	case 369 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->DetectedCurrentObject()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 370 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_InteractiveContext) *) theObject))->DetectedCurrentShape()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 371 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->DetectedInteractive()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 372 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->DetectedOwner()
,STANDARD_TYPE(SelectMgr_EntityOwner));
Engine::Return(*theHandle);
  	  } break;       

	case 373 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_InteractiveContext) *) theObject))->DetectedShape()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 374 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->DeviationAngle()
);
  	  } break;       

	case 375 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->DeviationCoefficient()
);
  	  } break;       

	case 376 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisableDrawHiddenLine()
;  	  } break;       

	case 377 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Display(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 378 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Display(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 379 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Display(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(4).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(5).Value()) 
)
;  	  } break;       

	case 380 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Display(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(4).Value()) 
)
;  	  } break;       

	case 381 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Display(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 382 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayActiveAreas(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Handle(V3d_View) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 383 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayActiveAreas(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 384 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayActiveSensitive(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Handle(V3d_View) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 385 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayActiveSensitive(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 386 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayAll(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 387 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayAll(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 388 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayAll()
;  	  } break;       

	case 389 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayFromCollector(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 390 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayFromCollector(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 391 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayMode()
);
  	  } break;       

	case 392 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayPriority(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 393 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplaySelected(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 394 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplaySelected()
;  	  } break;       

	case 395 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayStatus(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 396 : { 

const TColStd_ListOfInteger& aRet = (* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayedModes(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TColStd_ListOfInteger),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 397 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayedObjects(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(AIS_ListOfInteractive *)(Args->ChangeValue(3).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(4).Value()) 
)
;  	  } break;       

	case 398 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayedObjects(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(AIS_ListOfInteractive *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 399 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayedObjects(*(AIS_ListOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 400 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->DisplayedObjects(*(AIS_ListOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 401 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->DomainOfCollector()
);
  	  } break;       

	case 402 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->DomainOfMainViewer()
);
  	  } break;       

	case 403 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Drag(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(2).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(3).Value())
, *(Standard_Boolean *)(Args->ChangeValue(4).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(5).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(6).Value()) 
)
;  	  } break;       

	case 404 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Drag(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(2).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(3).Value())
, *(Standard_Boolean *)(Args->ChangeValue(4).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(5).Value()) 
)
;  	  } break;       

	case 405 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Drag(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(2).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(3).Value())
, *(Standard_Boolean *)(Args->ChangeValue(4).Value()) 
)
;  	  } break;       

	case 406 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Drag(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(2).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 407 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->DrawHiddenLine()
);
  	  } break;       

	case 408 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->EnableDrawHiddenLine()
;  	  } break;       

	case 409 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->EndImmediateDraw(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 410 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->EndImmediateDraw()
);
  	  } break;       

	case 411 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->EndImmediateDraw(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 412 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->EndImmediateDraw(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 413 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->EntityOwners(*(SelectMgr_IndexedMapOfOwner *)(Args->ChangeValue(1).Value()) 
, *(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(2).Value())
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 414 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->EntityOwners(*(SelectMgr_IndexedMapOfOwner *)(Args->ChangeValue(1).Value()) 
, *(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 415 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Erase(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 416 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Erase(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 417 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Erase(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 418 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->EraseAll(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 419 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->EraseAll(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 420 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->EraseAll()
;  	  } break;       

	case 421 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->EraseMode(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 422 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->EraseMode(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 423 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->EraseSelected(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 424 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->EraseSelected(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 425 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->EraseSelected()
;  	  } break;       

	case 426 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ErasedObjects(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(AIS_ListOfInteractive *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 427 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ErasedObjects(*(AIS_ListOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 428 : { 

const SelectMgr_ListOfFilter& aRet = (* ((Handle(AIS_InteractiveContext) *) theObject))->Filters()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(SelectMgr_ListOfFilter),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 429 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->FirstCurrentObject()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 430 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->GetAutoActivateSelection()
);
  	  } break;       

	case 431 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->HLRAngle()
);
  	  } break;       

	case 432 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->HLRDeviationCoefficient()
);
  	  } break;       

	case 433 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->HasApplicative()
);
  	  } break;       

	case 434 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->HasColor(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 435 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->HasDetected()
);
  	  } break;       

	case 436 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->HasDetectedShape()
);
  	  } break;       

	case 437 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->HasLocation(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 438 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->HasNextDetected()
);
  	  } break;       

	case 439 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->HasOpenedContext()
);
  	  } break;       

	case 440 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->HasPolygonOffsets(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 441 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->HasSelectedShape()
);
  	  } break;       

	case 442 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->HiddenLineAspect()
,STANDARD_TYPE(Prs3d_LineAspect));
Engine::Return(*theHandle);
  	  } break;       

	case 443 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->HighestIndex()
);
  	  } break;       

	case 444 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Hilight(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 445 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Hilight(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 446 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->HilightColor()
);
  	  } break;       

	case 447 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->HilightCurrents(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 448 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->HilightCurrents()
;  	  } break;       

	case 449 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->HilightNextDetected(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 450 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->HilightPreviousDetected(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 451 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->HilightSelected(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 452 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->HilightSelected()
;  	  } break;       

	case 453 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->HilightWithColor(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Quantity_NameOfColor *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 454 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->HilightWithColor(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Quantity_NameOfColor *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 455 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->ImmediateAdd(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 456 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->ImmediateAdd(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 457 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->ImmediateRemove(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 458 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->ImmediateRemove(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 459 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->IndexOfCurrentLocal()
);
  	  } break;       

	case 460 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->InitCurrent()
;  	  } break;       

	case 461 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->InitDetected()
;  	  } break;       

	case 462 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->InitSelected()
;  	  } break;       

	case 463 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->Interactive()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 464 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->IsCollectorClosed()
);
  	  } break;       

	case 465 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->IsCurrent(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 466 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->IsDisplayed(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 467 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->IsDisplayed(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 468 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->IsHilighted(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 469 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->IsHilighted(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
, *(Quantity_NameOfColor *)(Args->ChangeValue(3).Value()) 
)
);
Engine::Return(*(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
,2);
Engine::Return((Standard_Integer) *(Quantity_NameOfColor *)(Args->ChangeValue(3).Value()) 
,3);
  	  } break;       

	case 470 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->IsImmediateModeOn()
);
  	  } break;       

	case 471 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->IsInCollector(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 472 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->IsInLocal(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
);
Engine::Return(*(Standard_Integer *)(Args->ChangeValue(2).Value()) 
,2);
  	  } break;       

	case 473 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->IsSelected(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 474 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->IsoNumber(*(AIS_TypeOfIso *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 475 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->IsoNumber()
);
  	  } break;       

	case 476 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->IsoOnPlane()
);
  	  } break;       

	case 477 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->IsoOnPlane(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 478 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->KeepTemporary(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 479 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->KeepTemporary(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 480 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Load(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 481 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Load(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 482 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Load(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 483 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->LocalContext()
,STANDARD_TYPE(AIS_LocalContext));
Engine::Return(*theHandle);
  	  } break;       

	case 484 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->LocalSelector()
,STANDARD_TYPE(StdSelect_ViewerSelector3d));
Engine::Return(*theHandle);
  	  } break;       

	case 485 : { 

const TopLoc_Location& aRet = (* ((Handle(AIS_InteractiveContext) *) theObject))->Location(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopLoc_Location),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 486 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->MainPrsMgr()
,STANDARD_TYPE(PrsMgr_PresentationManager3d));
Engine::Return(*theHandle);
  	  } break;       

	case 487 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->MainSelector()
,STANDARD_TYPE(StdSelect_ViewerSelector3d));
Engine::Return(*theHandle);
  	  } break;       

	case 488 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->MoreCurrent()
);
  	  } break;       

	case 489 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->MoreDetected()
);
  	  } break;       

	case 490 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->MoreSelected()
);
  	  } break;       

	case 491 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->MoveTo(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(3).Value())
)
);
  	  } break;       

	case 492 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->NbCurrents()
);
  	  } break;       

	case 493 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->NbSelected()
);
  	  } break;       

	case 494 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->NextCurrent()
;  	  } break;       

	case 495 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->NextDetected()
;  	  } break;       

	case 496 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->NextSelected()
;  	  } break;       

	case 497 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->NotUseDisplayedObjects()
;  	  } break;       

	case 498 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ObjectsByDisplayStatus(*(AIS_DisplayStatus *)(Args->ChangeValue(1).Value()) 
, *(AIS_ListOfInteractive *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 499 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ObjectsByDisplayStatus(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(AIS_DisplayStatus *)(Args->ChangeValue(3).Value()) 
, *(AIS_ListOfInteractive *)(Args->ChangeValue(4).Value()) 
)
;  	  } break;       

	case 500 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ObjectsInCollector(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(AIS_ListOfInteractive *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 501 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ObjectsInCollector(*(AIS_ListOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 502 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ObjectsInside(*(AIS_ListOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(AIS_KindOfInteractive *)(Args->ChangeValue(2).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 503 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ObjectsInside(*(AIS_ListOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(AIS_KindOfInteractive *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 504 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ObjectsInside(*(AIS_ListOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 505 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->OpenCollector()
;  	  } break;       

	case 506 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->OpenLocalContext(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(4).Value()) 
)
);
  	  } break;       

	case 507 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->OpenLocalContext(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
);
  	  } break;       

	case 508 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->OpenLocalContext(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 509 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->OpenLocalContext(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 510 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->OpenLocalContext()
);
  	  } break;       

	case 511 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->PlaneSize(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
,1);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(2).Value()) 
,2);
  	  } break;       

	case 512 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->PolygonOffsets(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
)
;Engine::Return(*(Standard_Integer *)(Args->ChangeValue(2).Value()) 
,2);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(3).Value()) 
,3);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(4).Value()) 
,4);
  	  } break;       

 }
}


static void jiAIS_Execute_2(const Standard_Integer theCase,
                                   Engine_PArrayOfArguments& Args,
                                   const Standard_Address theObject)
{
  Engine_Handle                     *theHandle;                             

 switch(theCase) {

	case 513 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->PreSelectionColor()
);
  	  } break;       

	case 514 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->PurgeDisplay(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 515 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->PurgeDisplay()
);
  	  } break;       

	case 516 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->RecomputePrsOnly(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 517 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->RecomputePrsOnly(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 518 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->RecomputePrsOnly(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 519 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->RecomputeSelectionOnly(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 520 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Redisplay(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 521 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Redisplay(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 522 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Redisplay(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 523 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Redisplay(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 524 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Redisplay(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 525 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Redisplay(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 526 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Remove(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 527 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Remove(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 528 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->RemoveAll(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 529 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->RemoveAll()
;  	  } break;       

	case 530 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->RemoveFilter(*(Handle(SelectMgr_Filter) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 531 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->RemoveFilters()
;  	  } break;       

	case 532 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ResetLocation(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 533 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ResetOriginalState(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 534 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->ResetOriginalState()
;  	  } break;       

	case 535 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->Select(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 536 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->Select()
);
  	  } break;       

	case 537 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->Select(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(4).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(5).Value())
, *(Standard_Boolean *)(Args->ChangeValue(6).Value()) 
)
);
  	  } break;       

	case 538 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->Select(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(4).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(5).Value())
)
);
  	  } break;       

	case 539 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->Select(*(TColgp_Array1OfPnt2d *)(Args->ChangeValue(1).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(2).Value())
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
);
  	  } break;       

	case 540 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->Select(*(TColgp_Array1OfPnt2d *)(Args->ChangeValue(1).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(2).Value())
)
);
  	  } break;       

	case 541 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->SelectedInteractive()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 542 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->SelectedOwner()
,STANDARD_TYPE(SelectMgr_EntityOwner));
Engine::Return(*theHandle);
  	  } break;       

	case 543 : { 

TopoDS_Shape *aRet = new TopoDS_Shape((* ((Handle(AIS_InteractiveContext) *) theObject))->SelectedShape()
);
theHandle = new Engine_Handle((Standard_Address) aRet,STANDARD_TYPE(TopoDS_Shape));
Engine::Return(*theHandle);
  	  } break;       

	case 544 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->SelectionColor()
);
  	  } break;       

	case 545 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SelectionColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 546 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveContext) *) theObject))->SelectionManager()
,STANDARD_TYPE(SelectMgr_SelectionManager));
Engine::Return(*theHandle);
  	  } break;       

	case 547 : { 

const TCollection_AsciiString& aRet = (* ((Handle(AIS_InteractiveContext) *) theObject))->SelectionName()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TCollection_AsciiString),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 548 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetAngleAndDeviation(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 549 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetAngleAndDeviation(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 550 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetAutoActivateSelection(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 551 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetAutomaticHilight(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 552 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetColor(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Quantity_Color *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 553 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetColor(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Quantity_Color *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 554 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetColor(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Quantity_NameOfColor *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 555 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetColor(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Quantity_NameOfColor *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 556 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetCurrentFacingModel(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Aspect_TypeOfFacingModel *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 557 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetCurrentFacingModel(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 558 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetCurrentObject(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 559 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetCurrentObject(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 560 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDegenerateModel(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Aspect_TypeOfDegenerateModel *)(Args->ChangeValue(2).Value()) 
, *(Quantity_Ratio *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 561 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDegenerateModel(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Aspect_TypeOfDegenerateModel *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 562 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDegenerateModel(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 563 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDegenerateModel(*(Aspect_TypeOfDegenerateModel *)(Args->ChangeValue(1).Value()) 
, *(Quantity_Ratio *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 564 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDegenerateModel(*(Aspect_TypeOfDegenerateModel *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 565 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDeviationAngle(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 566 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDeviationAngle(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 567 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDeviationAngle(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 568 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDeviationCoefficient(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 569 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDeviationCoefficient(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 570 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDeviationCoefficient(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 571 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDisplayMode(*(AIS_DisplayMode *)(Args->ChangeValue(1).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 572 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDisplayMode(*(AIS_DisplayMode *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 573 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDisplayMode(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 574 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDisplayMode(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 575 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetDisplayPriority(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 576 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetHLRAngle(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 577 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetHLRAngleAndDeviation(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 578 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetHLRAngleAndDeviation(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 579 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetHLRAngleAndDeviation(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 580 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetHLRDeviationAngle(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 581 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetHLRDeviationAngle(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 582 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetHLRDeviationCoefficient(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 583 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetHLRDeviationCoefficient(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 584 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetHLRDeviationCoefficient(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 585 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetHiddenLineAspect(*(Handle(Prs3d_LineAspect) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 586 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetHilightColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 587 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetIsoNumber(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(AIS_TypeOfIso *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 588 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetIsoNumber(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 589 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetLocalAttributes(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 590 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetLocalAttributes(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 591 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetLocation(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(TopLoc_Location *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 592 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetMaterial(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Graphic3d_NameOfMaterial *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 593 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetMaterial(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Graphic3d_NameOfMaterial *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 594 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetOkCurrent()
;  	  } break;       

	case 595 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetPlaneSize(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 596 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetPlaneSize(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 597 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetPlaneSize(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 598 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetPlaneSize(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 599 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetPolygonOffsets(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(5).Value()) 
)
;  	  } break;       

	case 600 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetPolygonOffsets(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
)
;  	  } break;       

	case 601 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetPolygonOffsets(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 602 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetPolygonOffsets(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 603 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetPreselectionColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 604 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetSelected(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 605 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetSelected(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 606 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetSelectedAspect(*(Handle(Prs3d_BasicAspect) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 607 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetSelectedAspect(*(Handle(Prs3d_BasicAspect) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 608 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetSelectedAspect(*(Handle(Prs3d_BasicAspect) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 609 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetSelectedCurrent()
;  	  } break;       

	case 610 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetSelectionMode(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 611 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetSensitivity(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 612 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetSensitivity()
;  	  } break;       

	case 613 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetSensitivity(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 614 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetShapeDecomposition(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 615 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetSubIntensityColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 616 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetTemporaryAttributes(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Handle(Prs3d_Drawer) *)(Args->ChangeValue(2).Value())
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 617 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetTemporaryAttributes(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Handle(Prs3d_Drawer) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 618 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetToHilightSelected(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 619 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetTransparency(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 620 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetTransparency(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 621 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetTransparency(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 622 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetTrihedronSize(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 623 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetTrihedronSize(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 624 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetWidth(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 625 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetWidth(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 626 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetZDetection(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 627 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SetZDetection()
;  	  } break;       

	case 628 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->ShiftSelect(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 629 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->ShiftSelect()
);
  	  } break;       

	case 630 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->ShiftSelect(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(4).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(5).Value())
, *(Standard_Boolean *)(Args->ChangeValue(6).Value()) 
)
);
  	  } break;       

	case 631 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->ShiftSelect(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(4).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(5).Value())
)
);
  	  } break;       

	case 632 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->ShiftSelect(*(TColgp_Array1OfPnt2d *)(Args->ChangeValue(1).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(2).Value())
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
);
  	  } break;       

	case 633 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->ShiftSelect(*(TColgp_Array1OfPnt2d *)(Args->ChangeValue(1).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(2).Value())
)
);
  	  } break;       

	case 634 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Status(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(TCollection_ExtendedString *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 635 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveContext) *) theObject))->SubIntensityColor()
);
  	  } break;       

	case 636 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SubIntensityOff(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 637 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SubIntensityOff(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 638 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SubIntensityOff(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 639 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SubIntensityOff()
;  	  } break;       

	case 640 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SubIntensityOn(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 641 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SubIntensityOn(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 642 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SubIntensityOn(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 643 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->SubIntensityOn()
;  	  } break;       

	case 644 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->ToHilightSelected()
);
  	  } break;       

	case 645 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->TrihedronSize()
);
  	  } break;       

	case 646 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Unhilight(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 647 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Unhilight(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 648 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnhilightCurrents(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 649 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnhilightCurrents()
;  	  } break;       

	case 650 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnhilightSelected(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 651 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnhilightSelected()
;  	  } break;       

	case 652 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnsetColor(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 653 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnsetColor(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 654 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnsetDisplayMode(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 655 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnsetDisplayMode(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 656 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnsetLocalAttributes(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 657 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnsetLocalAttributes(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 658 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnsetMaterial(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 659 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnsetMaterial(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 660 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnsetSelectionMode(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 661 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnsetTransparency(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 662 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnsetTransparency(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 663 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnsetWidth(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 664 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UnsetWidth(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 665 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Update(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 666 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->Update(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 667 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UpdateCollector()
;  	  } break;       

	case 668 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UpdateCurrent()
;  	  } break;       

	case 669 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UpdateCurrentViewer()
;  	  } break;       

	case 670 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UpdateSelected(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 671 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UpdateSelected()
;  	  } break;       

	case 672 : { 

(* ((Handle(AIS_InteractiveContext) *) theObject))->UseDisplayedObjects()
;  	  } break;       

	case 673 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->WasCurrentTouched()
);
  	  } break;       

	case 674 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->Width(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 675 : { 

Engine::Return((* ((Handle(AIS_InteractiveContext) *) theObject))->ZDetection()
);
  	  } break;       

	case 676 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->AcceptDisplayMode(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 677 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->AcceptShapeDecomposition()
);
  	  } break;       

	case 678 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->AddUser(*(Handle(Standard_Transient) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 679 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveObject) *) theObject))->Attributes()
,STANDARD_TYPE(AIS_Drawer));
Engine::Return(*theHandle);
  	  } break;       

	case 680 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->ClearOwner()
;  	  } break;       

	case 681 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->ClearUsers()
;  	  } break;       

	case 682 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveObject) *) theObject))->Color()
);
  	  } break;       

	case 683 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->Color(*(Quantity_Color *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 684 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveObject) *) theObject))->CurrentFacingModel()
);
  	  } break;       

	case 685 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->DefaultDisplayMode()
);
  	  } break;       

	case 686 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveObject) *) theObject))->DegenerateModel(*(Quantity_Ratio *)(Args->ChangeValue(1).Value()) 
)
);
Engine::Return(*(Quantity_Ratio *)(Args->ChangeValue(1).Value()) 
,1);
  	  } break;       

	case 687 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->DisplayMode()
);
  	  } break;       

	case 688 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveObject) *) theObject))->GetContext()
,STANDARD_TYPE(AIS_InteractiveContext));
Engine::Return(*theHandle);
  	  } break;       

	case 689 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveObject) *) theObject))->GetOwner()
,STANDARD_TYPE(Standard_Transient));
Engine::Return(*theHandle);
  	  } break;       

	case 690 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->HasColor()
);
  	  } break;       

	case 691 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->HasDisplayMode()
);
  	  } break;       

	case 692 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->HasHilightMode()
);
  	  } break;       

	case 693 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->HasInteractiveContext()
);
  	  } break;       

	case 694 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->HasMaterial()
);
  	  } break;       

	case 695 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->HasOwner()
);
  	  } break;       

	case 696 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->HasPolygonOffsets()
);
  	  } break;       

	case 697 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->HasPresentation()
);
  	  } break;       

	case 698 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->HasSelectionMode()
);
  	  } break;       

	case 699 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->HasSelectionPriority()
);
  	  } break;       

	case 700 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->HasTransformation()
);
  	  } break;       

	case 701 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->HasUsers()
);
  	  } break;       

	case 702 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->HasWidth()
);
  	  } break;       

	case 703 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->HilightMode()
);
  	  } break;       

	case 704 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->IsInfinite()
);
  	  } break;       

	case 705 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->IsTransparent()
);
  	  } break;       

	case 706 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveObject) *) theObject))->Material()
);
  	  } break;       

	case 707 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->PolygonOffsets(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
)
;Engine::Return(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
,1);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(2).Value()) 
,2);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(3).Value()) 
,3);
  	  } break;       

	case 708 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveObject) *) theObject))->Presentation()
,STANDARD_TYPE(Prs3d_Presentation));
Engine::Return(*theHandle);
  	  } break;       

	case 709 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->Redisplay(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 710 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->Redisplay()
;  	  } break;       

	case 711 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->SelectionMode()
);
  	  } break;       

	case 712 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->SelectionPriority()
);
  	  } break;       

	case 713 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetAspect(*(Handle(Prs3d_BasicAspect) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 714 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetAspect(*(Handle(Prs3d_BasicAspect) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 715 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetAttributes(*(Handle(AIS_Drawer) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 716 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetColor(*(Quantity_Color *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 717 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 718 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetContext(*(Handle(AIS_InteractiveContext) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 719 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetCurrentFacingModel(*(Aspect_TypeOfFacingModel *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 720 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetCurrentFacingModel()
;  	  } break;       

	case 721 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetDegenerateModel(*(Aspect_TypeOfDegenerateModel *)(Args->ChangeValue(1).Value()) 
, *(Quantity_Ratio *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 722 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetDegenerateModel(*(Aspect_TypeOfDegenerateModel *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 723 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetDegenerateModel()
;  	  } break;       

	case 724 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetDisplayMode(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 725 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetHilightMode(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 726 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetInfiniteState(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 727 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetInfiniteState()
;  	  } break;       

	case 728 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetMaterial(*(Graphic3d_MaterialAspect *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 729 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetMaterial(*(Graphic3d_NameOfMaterial *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 730 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetOwner(*(Handle(Standard_Transient) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 731 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetPolygonOffsets(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 732 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetPolygonOffsets(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 733 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetPolygonOffsets(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 734 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetSelectionMode(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 735 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetSelectionPriority(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 736 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetTransformation(*(Handle(Geom_Transformation) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 737 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetTransformation(*(Handle(Geom_Transformation) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 738 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetTransformation(*(Handle(Geom_Transformation) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 739 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetTransparency(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 740 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetTransparency()
;  	  } break;       

	case 741 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->SetWidth(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 742 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->Signature()
);
  	  } break;       

	case 743 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->State()
);
  	  } break;       

	case 744 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->State(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 745 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_InteractiveObject) *) theObject))->Transformation()
,STANDARD_TYPE(Geom_Transformation));
Engine::Return(*theHandle);
  	  } break;       

	case 746 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->Transparency()
);
  	  } break;       

	case 747 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_InteractiveObject) *) theObject))->Type()
);
  	  } break;       

	case 748 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->UnsetAttributes()
;  	  } break;       

	case 749 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->UnsetColor()
;  	  } break;       

	case 750 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->UnsetDisplayMode()
;  	  } break;       

	case 751 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->UnsetHilightMode()
;  	  } break;       

	case 752 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->UnsetMaterial()
;  	  } break;       

	case 753 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->UnsetSelectionMode()
;  	  } break;       

	case 754 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->UnsetSelectionPriority()
;  	  } break;       

	case 755 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->UnsetTransformation()
;  	  } break;       

	case 756 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->UnsetTransparency()
;  	  } break;       

	case 757 : { 

(* ((Handle(AIS_InteractiveObject) *) theObject))->UnsetWidth()
;  	  } break;       

	case 758 : { 

const TColStd_ListOfTransient& aRet = (* ((Handle(AIS_InteractiveObject) *) theObject))->Users()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TColStd_ListOfTransient),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 759 : { 

Engine::Return((* ((Handle(AIS_InteractiveObject) *) theObject))->Width()
);
  	  } break;       

	case 760 : { 

(* ((Handle(AIS_LengthDimension) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 761 : { 

AIS_LengthDimension::ComputeOneEdgeOneVertexLength(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(5).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(6).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(7).Value())
, *(Standard_Boolean *)(Args->ChangeValue(8).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(9).Value()) 
, *(Bnd_Box *)(Args->ChangeValue(10).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(11).Value()) 
, *(Standard_Real *)(Args->ChangeValue(12).Value()) 
, *(gp_Dir *)(Args->ChangeValue(13).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(14).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(15).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(16).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(17).Value()) 
)
;Engine::Return(*(Standard_Integer *)(Args->ChangeValue(11).Value()) 
,11);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(12).Value()) 
,12);
Engine::Return((Standard_Integer) *(DsgPrs_ArrowSide *)(Args->ChangeValue(17).Value()) 
,17);
  	  } break;       

	case 762 : { 

AIS_LengthDimension::ComputeTwoEdgesLength(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(TopoDS_Edge *)(Args->ChangeValue(5).Value()) 
, *(TopoDS_Edge *)(Args->ChangeValue(6).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(7).Value())
, *(Standard_Boolean *)(Args->ChangeValue(8).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(9).Value()) 
, *(Bnd_Box *)(Args->ChangeValue(10).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(11).Value()) 
, *(Standard_Real *)(Args->ChangeValue(12).Value()) 
, *(gp_Dir *)(Args->ChangeValue(13).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(14).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(15).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(16).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(17).Value()) 
)
;Engine::Return(*(Standard_Integer *)(Args->ChangeValue(11).Value()) 
,11);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(12).Value()) 
,12);
Engine::Return((Standard_Integer) *(DsgPrs_ArrowSide *)(Args->ChangeValue(17).Value()) 
,17);
  	  } break;       

	case 763 : { 

AIS_LengthDimension::ComputeTwoVerticesLength(*(Handle(Prs3d_Presentation) *)(Args->ChangeValue(1).Value())
, *(Handle(AIS_Drawer) *)(Args->ChangeValue(2).Value())
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(TopoDS_Vertex *)(Args->ChangeValue(5).Value()) 
, *(TopoDS_Vertex *)(Args->ChangeValue(6).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(7).Value())
, *(Standard_Boolean *)(Args->ChangeValue(8).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(9).Value()) 
, *(Bnd_Box *)(Args->ChangeValue(10).Value()) 
, *(AIS_TypeOfDist *)(Args->ChangeValue(11).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(12).Value()) 
, *(Standard_Real *)(Args->ChangeValue(13).Value()) 
, *(gp_Dir *)(Args->ChangeValue(14).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(15).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(16).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(17).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(18).Value()) 
)
;Engine::Return(*(Standard_Integer *)(Args->ChangeValue(12).Value()) 
,12);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(13).Value()) 
,13);
Engine::Return((Standard_Integer) *(DsgPrs_ArrowSide *)(Args->ChangeValue(18).Value()) 
,18);
  	  } break;       

	case 764 : { 

 Handle(AIS_LengthDimension) aHand = new AIS_LengthDimension(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Edge *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(4).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_LengthDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 765 : { 

 Handle(AIS_LengthDimension) aHand = new AIS_LengthDimension(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Face *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(4).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_LengthDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 766 : { 

 Handle(AIS_LengthDimension) aHand = new AIS_LengthDimension(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Face *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(4).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(5).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(6).Value()) 
, *(Standard_Real *)(Args->ChangeValue(7).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_LengthDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 767 : { 

 Handle(AIS_LengthDimension) aHand = new AIS_LengthDimension(*(TopoDS_Face *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Face *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(4).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(5).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(6).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_LengthDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 768 : { 

 Handle(AIS_LengthDimension) aHand = new AIS_LengthDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(5).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_LengthDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 769 : { 

 Handle(AIS_LengthDimension) aHand = new AIS_LengthDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(5).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(6).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(7).Value()) 
, *(AIS_TypeOfDist *)(Args->ChangeValue(8).Value()) 
, *(Standard_Real *)(Args->ChangeValue(9).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_LengthDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 770 : { 

 Handle(AIS_LengthDimension) aHand = new AIS_LengthDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(5).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(6).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(7).Value()) 
, *(AIS_TypeOfDist *)(Args->ChangeValue(8).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_LengthDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 771 : { 

Engine::Return((* ((Handle(AIS_LengthDimension) *) theObject))->IsMovable()
);
  	  } break;       

	case 772 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LengthDimension) *) theObject))->KindOfDimension()
);
  	  } break;       

	case 773 : { 

(* ((Handle(AIS_LengthDimension) *) theObject))->SetFirstShape(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 774 : { 

(* ((Handle(AIS_LengthDimension) *) theObject))->SetSecondShape(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 775 : { 

(* ((Handle(AIS_LengthDimension) *) theObject))->SetTypeOfDist(*(AIS_TypeOfDist *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 776 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LengthDimension) *) theObject))->TypeOfDist()
);
  	  } break;       

	case 777 : { 

(* ((Handle(AIS_Line) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 778 : { 

 Handle(AIS_Line) aHand = new AIS_Line(*(Handle(Geom_Line) *)(Args->ChangeValue(1).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Line));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 779 : { 

 Handle(AIS_Line) aHand = new AIS_Line(*(Handle(Geom_Point) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Point) *)(Args->ChangeValue(2).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Line));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 780 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Line) *) theObject))->Line()
,STANDARD_TYPE(Geom_Line));
Engine::Return(*theHandle);
  	  } break;       

	case 781 : { 

(* ((Handle(AIS_Line) *) theObject))->Points(*(Handle(Geom_Point) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Point) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 782 : { 

(* ((Handle(AIS_Line) *) theObject))->SetColor(*(Quantity_Color *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 783 : { 

(* ((Handle(AIS_Line) *) theObject))->SetColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 784 : { 

(* ((Handle(AIS_Line) *) theObject))->SetLine(*(Handle(Geom_Line) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 785 : { 

(* ((Handle(AIS_Line) *) theObject))->SetPoints(*(Handle(Geom_Point) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Point) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 786 : { 

(* ((Handle(AIS_Line) *) theObject))->SetWidth(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 787 : { 

Engine::Return((* ((Handle(AIS_Line) *) theObject))->Signature()
);
  	  } break;       

	case 788 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Line) *) theObject))->Type()
);
  	  } break;       

	case 789 : { 

(* ((Handle(AIS_Line) *) theObject))->UnsetColor()
;  	  } break;       

	case 790 : { 

(* ((Handle(AIS_Line) *) theObject))->UnsetWidth()
;  	  } break;       

	case 791 : { 

 AIS_ListIteratorOfListOfInteractive *aHand = new AIS_ListIteratorOfListOfInteractive();
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_ListIteratorOfListOfInteractive)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 792 : { 

 AIS_ListIteratorOfListOfInteractive *aHand = new AIS_ListIteratorOfListOfInteractive(*(AIS_ListOfInteractive *)(Args->ChangeValue(1).Value()) 
);
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_ListIteratorOfListOfInteractive)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 793 : { 

((AIS_ListIteratorOfListOfInteractive *) theObject)->Initialize(*(AIS_ListOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 794 : { 

Engine::Return(((AIS_ListIteratorOfListOfInteractive *) theObject)->More()
);
  	  } break;       

	case 795 : { 

((AIS_ListIteratorOfListOfInteractive *) theObject)->Next()
;  	  } break;       

	case 796 : { 

theHandle = new Engine_Handle(((AIS_ListIteratorOfListOfInteractive *) theObject)->Value()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 797 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_ListNodeOfListOfInteractive) *) theObject))->Value()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 798 : { 

((AIS_ListOfInteractive *) theObject)->Append(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 799 : { 

((AIS_ListOfInteractive *) theObject)->Append(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(AIS_ListIteratorOfListOfInteractive *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 800 : { 

((AIS_ListOfInteractive *) theObject)->Append(*(AIS_ListOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 801 : { 

((AIS_ListOfInteractive *) theObject)->Assign(*(AIS_ListOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 802 : { 

((AIS_ListOfInteractive *) theObject)->Clear()
;  	  } break;       

	case 803 : { 

 AIS_ListOfInteractive *aHand = new AIS_ListOfInteractive();
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_ListOfInteractive)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 804 : { 

Engine::Return(((AIS_ListOfInteractive *) theObject)->Extent()
);
  	  } break;       

	case 805 : { 

theHandle = new Engine_Handle(((AIS_ListOfInteractive *) theObject)->First()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 806 : { 

((AIS_ListOfInteractive *) theObject)->InsertAfter(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(AIS_ListIteratorOfListOfInteractive *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 807 : { 

((AIS_ListOfInteractive *) theObject)->InsertAfter(*(AIS_ListOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(AIS_ListIteratorOfListOfInteractive *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 808 : { 

((AIS_ListOfInteractive *) theObject)->InsertBefore(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(AIS_ListIteratorOfListOfInteractive *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 809 : { 

((AIS_ListOfInteractive *) theObject)->InsertBefore(*(AIS_ListOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(AIS_ListIteratorOfListOfInteractive *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 810 : { 

Engine::Return(((AIS_ListOfInteractive *) theObject)->IsEmpty()
);
  	  } break;       

	case 811 : { 

theHandle = new Engine_Handle(((AIS_ListOfInteractive *) theObject)->Last()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 812 : { 

((AIS_ListOfInteractive *) theObject)->Prepend(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 813 : { 

((AIS_ListOfInteractive *) theObject)->Prepend(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(AIS_ListIteratorOfListOfInteractive *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 814 : { 

((AIS_ListOfInteractive *) theObject)->Prepend(*(AIS_ListOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 815 : { 

((AIS_ListOfInteractive *) theObject)->Remove(*(AIS_ListIteratorOfListOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 816 : { 

((AIS_ListOfInteractive *) theObject)->RemoveFirst()
;  	  } break;       

	case 817 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->AcceptErase()
);
  	  } break;       

	case 818 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->AcceptErase(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 819 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->ActivateMode(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 820 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->ActivateStandardMode(*(TopAbs_ShapeEnum *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 821 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->AddFilter(*(Handle(SelectMgr_Filter) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 822 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->AddOrRemoveSelected(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 823 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->AddOrRemoveSelected(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 824 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->AddOrRemoveSelected(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 825 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->AddOrRemoveSelected(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 826 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->AddOrRemoveSelected(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 827 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->AddOrRemoveSelected(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 828 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->AutomaticHilight()
);
  	  } break;       

	case 829 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->BeginImmediateDraw()
);
  	  } break;       

	case 830 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->Clear(*(AIS_ClearMode *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 831 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->Clear()
;  	  } break;       

	case 832 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->ClearAreas(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 833 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->ClearPrs(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 834 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->ClearSelected(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 835 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->ClearSelected()
;  	  } break;       

	case 836 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->ClearSensitive(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 837 : { 

 Handle(AIS_LocalContext) aHand = new AIS_LocalContext();
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_LocalContext));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 838 : { 

 Handle(AIS_LocalContext) aHand = new AIS_LocalContext(*(Handle(AIS_InteractiveContext) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(4).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(5).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(6).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_LocalContext));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 839 : { 

 Handle(AIS_LocalContext) aHand = new AIS_LocalContext(*(Handle(AIS_InteractiveContext) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(4).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(5).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_LocalContext));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 840 : { 

 Handle(AIS_LocalContext) aHand = new AIS_LocalContext(*(Handle(AIS_InteractiveContext) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(4).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_LocalContext));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 841 : { 

 Handle(AIS_LocalContext) aHand = new AIS_LocalContext(*(Handle(AIS_InteractiveContext) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_LocalContext));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 842 : { 

 Handle(AIS_LocalContext) aHand = new AIS_LocalContext(*(Handle(AIS_InteractiveContext) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_LocalContext));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 843 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->Deactivate(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 844 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->DeactivateMode(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 845 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->DeactivateStandardMode(*(TopAbs_ShapeEnum *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 846 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_LocalContext) *) theObject))->DetectedCurrentObject()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 847 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_LocalContext) *) theObject))->DetectedCurrentShape()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 848 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_LocalContext) *) theObject))->DetectedInteractive()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 849 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_LocalContext) *) theObject))->DetectedOwner()
,STANDARD_TYPE(SelectMgr_EntityOwner));
Engine::Return(*theHandle);
  	  } break;       

	case 850 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_LocalContext) *) theObject))->DetectedShape()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 851 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->Display(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(4).Value()) 
)
);
  	  } break;       

	case 852 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->Display(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
);
  	  } break;       

	case 853 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->Display(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 854 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->Display(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 855 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->DisplayAreas(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 856 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->DisplaySensitive(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 857 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->DisplayedObjects(*(TColStd_MapOfTransient *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 858 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->EndImmediateDraw(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 859 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->EndImmediateDraw(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 860 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->Erase(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 861 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_LocalContext) *) theObject))->Filter()
,STANDARD_TYPE(SelectMgr_OrFilter));
Engine::Return(*theHandle);
  	  } break;       

	case 862 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_LocalContext) *) theObject))->FindSelectedOwnerFromIO(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
,STANDARD_TYPE(SelectMgr_EntityOwner));
Engine::Return(*theHandle);
  	  } break;       

	case 863 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_LocalContext) *) theObject))->FindSelectedOwnerFromShape(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
,STANDARD_TYPE(SelectMgr_EntityOwner));
Engine::Return(*theHandle);
  	  } break;       

	case 864 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->HasApplicative()
);
  	  } break;       

	case 865 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->HasDetected()
);
  	  } break;       

	case 866 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->HasDetectedShape()
);
  	  } break;       

	case 867 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->HasNextDetected()
);
  	  } break;       

	case 868 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->HasSameProjector(*(Handle(Select3D_Projector) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 869 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->HasShape()
);
  	  } break;       

	case 870 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->Hilight(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 871 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->Hilight(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Quantity_NameOfColor *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 872 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->HilightNextDetected(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 873 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->HilightPicked(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 874 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->HilightPicked()
;  	  } break;       

	case 875 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->HilightPreviousDetected(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 876 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->ImmediateAdd(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 877 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->ImmediateAdd(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 878 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->ImmediateRemove(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 879 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->ImmediateRemove(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 880 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->InitDetected()
;  	  } break;       

	case 881 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->InitSelected()
;  	  } break;       

	case 882 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->IsDisplayed(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 883 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->IsDisplayed(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 884 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->IsHilighted(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 885 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->IsHilighted(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
, *(Quantity_NameOfColor *)(Args->ChangeValue(3).Value()) 
)
);
Engine::Return(*(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
,2);
Engine::Return((Standard_Integer) *(Quantity_NameOfColor *)(Args->ChangeValue(3).Value()) 
,3);
  	  } break;       

	case 886 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->IsImmediateModeOn()
);
  	  } break;       

	case 887 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->IsIn(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 888 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->IsSelected(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 889 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->IsSelected(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 890 : { 

const SelectMgr_ListOfFilter& aRet = (* ((Handle(AIS_LocalContext) *) theObject))->ListOfFilter()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(SelectMgr_ListOfFilter),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 891 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->Load(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
)
);
  	  } break;       

	case 892 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->Load(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
);
  	  } break;       

	case 893 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->Load(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 894 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->LoadContextObjects()
;  	  } break;       

	case 895 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_LocalContext) *) theObject))->MainSelector()
,STANDARD_TYPE(StdSelect_ViewerSelector3d));
Engine::Return(*theHandle);
  	  } break;       

	case 896 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->MoreDetected()
);
  	  } break;       

	case 897 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->MoreSelected()
);
  	  } break;       

	case 898 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LocalContext) *) theObject))->MoveTo(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(3).Value())
)
);
  	  } break;       

	case 899 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->NextDetected()
;  	  } break;       

	case 900 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->NextSelected()
;  	  } break;       

	case 901 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->Reactivate()
;  	  } break;       

	case 902 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->Remove(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 903 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->RemoveFilter(*(Handle(SelectMgr_Filter) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 904 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LocalContext) *) theObject))->Select(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 905 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LocalContext) *) theObject))->Select()
);
  	  } break;       

	case 906 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LocalContext) *) theObject))->Select(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(4).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(5).Value())
, *(Standard_Boolean *)(Args->ChangeValue(6).Value()) 
)
);
  	  } break;       

	case 907 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LocalContext) *) theObject))->Select(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(4).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(5).Value())
)
);
  	  } break;       

	case 908 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LocalContext) *) theObject))->Select(*(TColgp_Array1OfPnt2d *)(Args->ChangeValue(1).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(2).Value())
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
);
  	  } break;       

	case 909 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LocalContext) *) theObject))->Select(*(TColgp_Array1OfPnt2d *)(Args->ChangeValue(1).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(2).Value())
)
);
  	  } break;       

	case 910 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_LocalContext) *) theObject))->SelectedApplicative()
,STANDARD_TYPE(Standard_Transient));
Engine::Return(*theHandle);
  	  } break;       

	case 911 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_LocalContext) *) theObject))->SelectedInteractive()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 912 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_LocalContext) *) theObject))->SelectedOwner()
,STANDARD_TYPE(SelectMgr_EntityOwner));
Engine::Return(*theHandle);
  	  } break;       

	case 913 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_LocalContext) *) theObject))->SelectedShape()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 914 : { 

const TColStd_ListOfInteger& aRet = (* ((Handle(AIS_LocalContext) *) theObject))->SelectionModes(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TColStd_ListOfInteger),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 915 : { 

const TCollection_AsciiString& aRet = (* ((Handle(AIS_LocalContext) *) theObject))->SelectionName()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TCollection_AsciiString),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 916 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->SetAutomaticHilight(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 917 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->SetContext(*(Handle(AIS_InteractiveContext) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 918 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->SetDisplayPriority(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 919 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->SetSelected(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 920 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->SetSelected(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 921 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->SetSensitivity(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 922 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->SetSensitivity()
;  	  } break;       

	case 923 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->SetSensitivity(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 924 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->SetShapeDecomposition(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 925 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LocalContext) *) theObject))->ShiftSelect(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 926 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LocalContext) *) theObject))->ShiftSelect()
);
  	  } break;       

	case 927 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LocalContext) *) theObject))->ShiftSelect(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(4).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(5).Value())
, *(Standard_Boolean *)(Args->ChangeValue(6).Value()) 
)
);
  	  } break;       

	case 928 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LocalContext) *) theObject))->ShiftSelect(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(4).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(5).Value())
)
);
  	  } break;       

	case 929 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LocalContext) *) theObject))->ShiftSelect(*(TColgp_Array1OfPnt2d *)(Args->ChangeValue(1).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(2).Value())
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
)
);
  	  } break;       

	case 930 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_LocalContext) *) theObject))->ShiftSelect(*(TColgp_Array1OfPnt2d *)(Args->ChangeValue(1).Value()) 
, *(Handle(V3d_View) *)(Args->ChangeValue(2).Value())
)
);
  	  } break;       

	case 931 : { 

const TColStd_ListOfInteger& aRet = (* ((Handle(AIS_LocalContext) *) theObject))->StandardModes()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TColStd_ListOfInteger),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 932 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->SubIntensityOff(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 933 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->SubIntensityOn(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 934 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->Terminate(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 935 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->Terminate()
;  	  } break;       

	case 936 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->Unhilight(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 937 : { 

Engine::Return((* ((Handle(AIS_LocalContext) *) theObject))->UnhilightLastDetected(*(Handle(V3d_View) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 938 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->UnhilightPicked(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 939 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->UnhilightPicked()
;  	  } break;       

	case 940 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->UnloadContextObjects()
;  	  } break;       

	case 941 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->UpdateConversion()
;  	  } break;       

	case 942 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->UpdateSelected(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 943 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->UpdateSelected(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 944 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->UpdateSelected(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 945 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->UpdateSelected()
;  	  } break;       

	case 946 : { 

(* ((Handle(AIS_LocalContext) *) theObject))->UpdateSort()
;  	  } break;       

	case 947 : { 

 AIS_MapIteratorOfMapOfInteractive *aHand = new AIS_MapIteratorOfMapOfInteractive();
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_MapIteratorOfMapOfInteractive)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 948 : { 

 AIS_MapIteratorOfMapOfInteractive *aHand = new AIS_MapIteratorOfMapOfInteractive(*(AIS_MapOfInteractive *)(Args->ChangeValue(1).Value()) 
);
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_MapIteratorOfMapOfInteractive)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 949 : { 

((AIS_MapIteratorOfMapOfInteractive *) theObject)->Initialize(*(AIS_MapOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 950 : { 

theHandle = new Engine_Handle(((AIS_MapIteratorOfMapOfInteractive *) theObject)->Key()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 951 : { 

Engine::Return(((AIS_MapOfInteractive *) theObject)->Add(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 952 : { 

const AIS_MapOfInteractive& aRet = ((AIS_MapOfInteractive *) theObject)->Assign(*(AIS_MapOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(AIS_MapOfInteractive),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 953 : { 

((AIS_MapOfInteractive *) theObject)->Clear()
;  	  } break;       

	case 954 : { 

Engine::Return(((AIS_MapOfInteractive *) theObject)->Contains(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 955 : { 

 AIS_MapOfInteractive *aHand = new AIS_MapOfInteractive(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
);
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_MapOfInteractive)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 956 : { 

 AIS_MapOfInteractive *aHand = new AIS_MapOfInteractive();
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_MapOfInteractive)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 957 : { 

((AIS_MapOfInteractive *) theObject)->ReSize(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 958 : { 

Engine::Return(((AIS_MapOfInteractive *) theObject)->Remove(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 959 : { 

(* ((Handle(AIS_MaxRadiusDimension) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 960 : { 

 Handle(AIS_MaxRadiusDimension) aHand = new AIS_MaxRadiusDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_MaxRadiusDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 961 : { 

 Handle(AIS_MaxRadiusDimension) aHand = new AIS_MaxRadiusDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(5).Value()) 
, *(Standard_Real *)(Args->ChangeValue(6).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_MaxRadiusDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 962 : { 

 Handle(AIS_MaxRadiusDimension) aHand = new AIS_MaxRadiusDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(5).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_MaxRadiusDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 963 : { 

(* ((Handle(AIS_MidPointRelation) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 964 : { 

 Handle(AIS_MidPointRelation) aHand = new AIS_MidPointRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(3).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(4).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_MidPointRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 965 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_MidPointRelation) *) theObject))->GetTool()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 966 : { 

Engine::Return((* ((Handle(AIS_MidPointRelation) *) theObject))->IsMovable()
);
  	  } break;       

	case 967 : { 

(* ((Handle(AIS_MidPointRelation) *) theObject))->SetTool(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 968 : { 

(* ((Handle(AIS_MinRadiusDimension) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 969 : { 

 Handle(AIS_MinRadiusDimension) aHand = new AIS_MinRadiusDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_MinRadiusDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 970 : { 

 Handle(AIS_MinRadiusDimension) aHand = new AIS_MinRadiusDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(5).Value()) 
, *(Standard_Real *)(Args->ChangeValue(6).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_MinRadiusDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 971 : { 

 Handle(AIS_MinRadiusDimension) aHand = new AIS_MinRadiusDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(5).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_MinRadiusDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 972 : { 

(* ((Handle(AIS_MultipleConnectedInteractive) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 973 : { 

(* ((Handle(AIS_MultipleConnectedInteractive) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 974 : { 

(* ((Handle(AIS_MultipleConnectedInteractive) *) theObject))->Compute(*(Handle(PrsMgr_PresentationManager2d) *)(Args->ChangeValue(1).Value())
, *(Handle(Graphic2d_GraphicObject) *)(Args->ChangeValue(2).Value())
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 975 : { 

(* ((Handle(AIS_MultipleConnectedInteractive) *) theObject))->Compute(*(Handle(PrsMgr_PresentationManager2d) *)(Args->ChangeValue(1).Value())
, *(Handle(Graphic2d_GraphicObject) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 976 : { 

(* ((Handle(AIS_MultipleConnectedInteractive) *) theObject))->Connect(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 977 : { 

const AIS_SequenceOfInteractive& aRet = (* ((Handle(AIS_MultipleConnectedInteractive) *) theObject))->ConnectedTo()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(AIS_SequenceOfInteractive),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 978 : { 

 Handle(AIS_MultipleConnectedInteractive) aHand = new AIS_MultipleConnectedInteractive(*(PrsMgr_TypeOfPresentation3d *)(Args->ChangeValue(1).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_MultipleConnectedInteractive));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 979 : { 

 Handle(AIS_MultipleConnectedInteractive) aHand = new AIS_MultipleConnectedInteractive();
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_MultipleConnectedInteractive));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 980 : { 

(* ((Handle(AIS_MultipleConnectedInteractive) *) theObject))->Disconnect(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 981 : { 

(* ((Handle(AIS_MultipleConnectedInteractive) *) theObject))->DisconnectAll()
;  	  } break;       

	case 982 : { 

Engine::Return((* ((Handle(AIS_MultipleConnectedInteractive) *) theObject))->HasConnection()
);
  	  } break;       

	case 983 : { 

Engine::Return((* ((Handle(AIS_MultipleConnectedInteractive) *) theObject))->Signature()
);
  	  } break;       

	case 984 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_MultipleConnectedInteractive) *) theObject))->Type()
);
  	  } break;       

	case 985 : { 

Engine::Return((* ((Handle(AIS_MultipleConnectedShape) *) theObject))->AcceptShapeDecomposition()
);
  	  } break;       

	case 986 : { 

(* ((Handle(AIS_MultipleConnectedShape) *) theObject))->Compute(*(Handle(PrsMgr_PresentationManager2d) *)(Args->ChangeValue(1).Value())
, *(Handle(Graphic2d_GraphicObject) *)(Args->ChangeValue(2).Value())
, *(Standard_Integer *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 987 : { 

(* ((Handle(AIS_MultipleConnectedShape) *) theObject))->Compute(*(Handle(PrsMgr_PresentationManager2d) *)(Args->ChangeValue(1).Value())
, *(Handle(Graphic2d_GraphicObject) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 988 : { 

 Handle(AIS_MultipleConnectedShape) aHand = new AIS_MultipleConnectedShape(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_MultipleConnectedShape));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 989 : { 

(* ((Handle(AIS_MultipleConnectedShape) *) theObject))->Set(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 990 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_MultipleConnectedShape) *) theObject))->Shape()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 991 : { 

Engine::Return((* ((Handle(AIS_MultipleConnectedShape) *) theObject))->Signature()
);
  	  } break;       

	case 992 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_MultipleConnectedShape) *) theObject))->Type()
);
  	  } break;       

	case 993 : { 

(* ((Handle(AIS_OffsetDimension) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 994 : { 

 Handle(AIS_OffsetDimension) aHand = new AIS_OffsetDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(4).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_OffsetDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 995 : { 

Engine::Return((* ((Handle(AIS_OffsetDimension) *) theObject))->IsMovable()
);
  	  } break;       

	case 996 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_OffsetDimension) *) theObject))->KindOfDimension()
);
  	  } break;       

	case 997 : { 

(* ((Handle(AIS_OffsetDimension) *) theObject))->SetRelativePos(*(gp_Trsf *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 998 : { 

(* ((Handle(AIS_ParallelRelation) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 999 : { 

 Handle(AIS_ParallelRelation) aHand = new AIS_ParallelRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ParallelRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1000 : { 

 Handle(AIS_ParallelRelation) aHand = new AIS_ParallelRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(5).Value()) 
, *(Standard_Real *)(Args->ChangeValue(6).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ParallelRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1001 : { 

 Handle(AIS_ParallelRelation) aHand = new AIS_ParallelRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(5).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_ParallelRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1002 : { 

Engine::Return((* ((Handle(AIS_ParallelRelation) *) theObject))->IsMovable()
);
  	  } break;       

	case 1003 : { 

(* ((Handle(AIS_PerpendicularRelation) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 1004 : { 

 Handle(AIS_PerpendicularRelation) aHand = new AIS_PerpendicularRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_PerpendicularRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1005 : { 

 Handle(AIS_PerpendicularRelation) aHand = new AIS_PerpendicularRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_PerpendicularRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1006 : { 

Engine::Return((* ((Handle(AIS_Plane) *) theObject))->AcceptDisplayMode(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 1007 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Plane) *) theObject))->Axis2Placement()
,STANDARD_TYPE(Geom_Axis2Placement));
Engine::Return(*theHandle);
  	  } break;       

	case 1008 : { 

const gp_Pnt& aRet = (* ((Handle(AIS_Plane) *) theObject))->Center()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(gp_Pnt),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 1009 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Plane) *) theObject))->Component()
,STANDARD_TYPE(Geom_Plane));
Engine::Return(*theHandle);
  	  } break;       

	case 1010 : { 

(* ((Handle(AIS_Plane) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 1011 : { 

(* ((Handle(AIS_Plane) *) theObject))->ComputeSelection(*(Handle(SelectMgr_Selection) *)(Args->ChangeValue(1).Value())
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 1012 : { 

 Handle(AIS_Plane) aHand = new AIS_Plane(*(Handle(Geom_Axis2Placement) *)(Args->ChangeValue(1).Value())
, *(AIS_TypeOfPlane *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Plane));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1013 : { 

 Handle(AIS_Plane) aHand = new AIS_Plane(*(Handle(Geom_Axis2Placement) *)(Args->ChangeValue(1).Value())
, *(AIS_TypeOfPlane *)(Args->ChangeValue(2).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Plane));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1014 : { 

 Handle(AIS_Plane) aHand = new AIS_Plane(*(Handle(Geom_Plane) *)(Args->ChangeValue(1).Value())
, *(Standard_Boolean *)(Args->ChangeValue(2).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Plane));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1015 : { 

 Handle(AIS_Plane) aHand = new AIS_Plane(*(Handle(Geom_Plane) *)(Args->ChangeValue(1).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Plane));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1016 : { 

 Handle(AIS_Plane) aHand = new AIS_Plane(*(Handle(Geom_Plane) *)(Args->ChangeValue(1).Value())
, *(gp_Pnt *)(Args->ChangeValue(2).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(3).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Plane));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1017 : { 

 Handle(AIS_Plane) aHand = new AIS_Plane(*(Handle(Geom_Plane) *)(Args->ChangeValue(1).Value())
, *(gp_Pnt *)(Args->ChangeValue(2).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Plane));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1018 : { 

 Handle(AIS_Plane) aHand = new AIS_Plane(*(Handle(Geom_Plane) *)(Args->ChangeValue(1).Value())
, *(gp_Pnt *)(Args->ChangeValue(2).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(Standard_Boolean *)(Args->ChangeValue(5).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Plane));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1019 : { 

 Handle(AIS_Plane) aHand = new AIS_Plane(*(Handle(Geom_Plane) *)(Args->ChangeValue(1).Value())
, *(gp_Pnt *)(Args->ChangeValue(2).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Plane));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1020 : { 

Engine::Return((* ((Handle(AIS_Plane) *) theObject))->CurrentMode()
);
  	  } break;       

	case 1021 : { 

Engine::Return((* ((Handle(AIS_Plane) *) theObject))->HasOwnSize()
);
  	  } break;       

	case 1022 : { 

Engine::Return((* ((Handle(AIS_Plane) *) theObject))->IsXYZPlane()
);
  	  } break;       

	case 1023 : { 

Engine::Return((* ((Handle(AIS_Plane) *) theObject))->PlaneAttributes(*(Handle(Geom_Plane) *)(Args->ChangeValue(1).Value())
, *(gp_Pnt *)(Args->ChangeValue(2).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
)
);
  	  } break;       

	case 1024 : { 

(* ((Handle(AIS_Plane) *) theObject))->SetAxis2Placement(*(Handle(Geom_Axis2Placement) *)(Args->ChangeValue(1).Value())
, *(AIS_TypeOfPlane *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

 }
}


static void jiAIS_Execute_3(const Standard_Integer theCase,
                                   Engine_PArrayOfArguments& Args,
                                   const Standard_Address theObject)
{
  Engine_Handle                     *theHandle;                             

 switch(theCase) {

	case 1025 : { 

(* ((Handle(AIS_Plane) *) theObject))->SetCenter(*(gp_Pnt *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1026 : { 

(* ((Handle(AIS_Plane) *) theObject))->SetColor(*(Quantity_Color *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1027 : { 

(* ((Handle(AIS_Plane) *) theObject))->SetColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1028 : { 

(* ((Handle(AIS_Plane) *) theObject))->SetComponent(*(Handle(Geom_Plane) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 1029 : { 

(* ((Handle(AIS_Plane) *) theObject))->SetContext(*(Handle(AIS_InteractiveContext) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 1030 : { 

(* ((Handle(AIS_Plane) *) theObject))->SetCurrentMode(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1031 : { 

(* ((Handle(AIS_Plane) *) theObject))->SetPlaneAttributes(*(Handle(Geom_Plane) *)(Args->ChangeValue(1).Value())
, *(gp_Pnt *)(Args->ChangeValue(2).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
)
;  	  } break;       

	case 1032 : { 

(* ((Handle(AIS_Plane) *) theObject))->SetSize(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1033 : { 

(* ((Handle(AIS_Plane) *) theObject))->SetSize(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 1034 : { 

Engine::Return((* ((Handle(AIS_Plane) *) theObject))->Signature()
);
  	  } break;       

	case 1035 : { 

Engine::Return((* ((Handle(AIS_Plane) *) theObject))->Size(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
,1);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(2).Value()) 
,2);
  	  } break;       

	case 1036 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Plane) *) theObject))->Type()
);
  	  } break;       

	case 1037 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Plane) *) theObject))->TypeOfPlane()
);
  	  } break;       

	case 1038 : { 

(* ((Handle(AIS_Plane) *) theObject))->UnsetColor()
;  	  } break;       

	case 1039 : { 

(* ((Handle(AIS_Plane) *) theObject))->UnsetSize()
;  	  } break;       

	case 1040 : { 

Engine::Return((* ((Handle(AIS_PlaneTrihedron) *) theObject))->AcceptDisplayMode(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 1041 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_PlaneTrihedron) *) theObject))->Component()
,STANDARD_TYPE(Geom_Plane));
Engine::Return(*theHandle);
  	  } break;       

	case 1042 : { 

(* ((Handle(AIS_PlaneTrihedron) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 1043 : { 

 Handle(AIS_PlaneTrihedron) aHand = new AIS_PlaneTrihedron(*(Handle(Geom_Plane) *)(Args->ChangeValue(1).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_PlaneTrihedron));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1044 : { 

Engine::Return((* ((Handle(AIS_PlaneTrihedron) *) theObject))->GetLength()
);
  	  } break;       

	case 1045 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_PlaneTrihedron) *) theObject))->Position()
,STANDARD_TYPE(AIS_Point));
Engine::Return(*theHandle);
  	  } break;       

	case 1046 : { 

(* ((Handle(AIS_PlaneTrihedron) *) theObject))->SetColor(*(Quantity_Color *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1047 : { 

(* ((Handle(AIS_PlaneTrihedron) *) theObject))->SetColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1048 : { 

(* ((Handle(AIS_PlaneTrihedron) *) theObject))->SetComponent(*(Handle(Geom_Plane) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 1049 : { 

(* ((Handle(AIS_PlaneTrihedron) *) theObject))->SetLength(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1050 : { 

(* ((Handle(AIS_PlaneTrihedron) *) theObject))->SetXLabel(*(TCollection_AsciiString *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1051 : { 

(* ((Handle(AIS_PlaneTrihedron) *) theObject))->SetYLabel(*(TCollection_AsciiString *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1052 : { 

Engine::Return((* ((Handle(AIS_PlaneTrihedron) *) theObject))->Signature()
);
  	  } break;       

	case 1053 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_PlaneTrihedron) *) theObject))->Type()
);
  	  } break;       

	case 1054 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_PlaneTrihedron) *) theObject))->XAxis()
,STANDARD_TYPE(AIS_Line));
Engine::Return(*theHandle);
  	  } break;       

	case 1055 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_PlaneTrihedron) *) theObject))->YAxis()
,STANDARD_TYPE(AIS_Line));
Engine::Return(*theHandle);
  	  } break;       

	case 1056 : { 

Engine::Return((* ((Handle(AIS_Point) *) theObject))->AcceptDisplayMode(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 1057 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Point) *) theObject))->Component()
,STANDARD_TYPE(Geom_Point));
Engine::Return(*theHandle);
  	  } break;       

	case 1058 : { 

(* ((Handle(AIS_Point) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 1059 : { 

 Handle(AIS_Point) aHand = new AIS_Point(*(Handle(Geom_Point) *)(Args->ChangeValue(1).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Point));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1060 : { 

Engine::Return((* ((Handle(AIS_Point) *) theObject))->HasMarker()
);
  	  } break;       

	case 1061 : { 

(* ((Handle(AIS_Point) *) theObject))->SetColor(*(Quantity_Color *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1062 : { 

(* ((Handle(AIS_Point) *) theObject))->SetColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1063 : { 

(* ((Handle(AIS_Point) *) theObject))->SetComponent(*(Handle(Geom_Point) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 1064 : { 

(* ((Handle(AIS_Point) *) theObject))->SetMarker(*(Aspect_TypeOfMarker *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1065 : { 

Engine::Return((* ((Handle(AIS_Point) *) theObject))->Signature()
);
  	  } break;       

	case 1066 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Point) *) theObject))->Type()
);
  	  } break;       

	case 1067 : { 

(* ((Handle(AIS_Point) *) theObject))->UnsetColor()
;  	  } break;       

	case 1068 : { 

(* ((Handle(AIS_Point) *) theObject))->UnsetMarker()
;  	  } break;       

	case 1069 : { 

TopoDS_Vertex *aRet = new TopoDS_Vertex((* ((Handle(AIS_Point) *) theObject))->Vertex()
);
theHandle = new Engine_Handle((Standard_Address) aRet,STANDARD_TYPE(TopoDS_Vertex));
Engine::Return(*theHandle);
  	  } break;       

	case 1070 : { 

(* ((Handle(AIS_RadiusDimension) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 1071 : { 

 Handle(AIS_RadiusDimension) aHand = new AIS_RadiusDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_RadiusDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1072 : { 

 Handle(AIS_RadiusDimension) aHand = new AIS_RadiusDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(5).Value()) 
, *(Standard_Real *)(Args->ChangeValue(6).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_RadiusDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1073 : { 

 Handle(AIS_RadiusDimension) aHand = new AIS_RadiusDimension(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(TCollection_ExtendedString *)(Args->ChangeValue(3).Value()) 
, *(gp_Pnt *)(Args->ChangeValue(4).Value()) 
, *(DsgPrs_ArrowSide *)(Args->ChangeValue(5).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_RadiusDimension));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1074 : { 

Engine::Return((* ((Handle(AIS_RadiusDimension) *) theObject))->DrawFromCenter()
);
  	  } break;       

	case 1075 : { 

Engine::Return((* ((Handle(AIS_RadiusDimension) *) theObject))->IsMovable()
);
  	  } break;       

	case 1076 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_RadiusDimension) *) theObject))->KindOfDimension()
);
  	  } break;       

	case 1077 : { 

(* ((Handle(AIS_RadiusDimension) *) theObject))->SetDrawFromCenter(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1078 : { 

(* ((Handle(AIS_RadiusDimension) *) theObject))->SetFirstShape(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1079 : { 

Engine::Return((* ((Handle(AIS_Relation) *) theObject))->AcceptDisplayMode(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 1080 : { 

Engine::Return((* ((Handle(AIS_Relation) *) theObject))->ArrowSize()
);
  	  } break;       

	case 1081 : { 

Engine::Return((* ((Handle(AIS_Relation) *) theObject))->AutomaticPosition()
);
  	  } break;       

	case 1082 : { 

Engine::Return((* ((Handle(AIS_Relation) *) theObject))->ExtShape()
);
  	  } break;       

	case 1083 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_Relation) *) theObject))->FirstShape()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 1084 : { 

Engine::Return((* ((Handle(AIS_Relation) *) theObject))->IsMovable()
);
  	  } break;       

	case 1085 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Relation) *) theObject))->KindOfDimension()
);
  	  } break;       

	case 1086 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Relation) *) theObject))->Plane()
,STANDARD_TYPE(Geom_Plane));
Engine::Return(*theHandle);
  	  } break;       

	case 1087 : { 

const gp_Pnt& aRet = (* ((Handle(AIS_Relation) *) theObject))->Position()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(gp_Pnt),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 1088 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_Relation) *) theObject))->SecondShape()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 1089 : { 

(* ((Handle(AIS_Relation) *) theObject))->SetArrowSize(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1090 : { 

(* ((Handle(AIS_Relation) *) theObject))->SetAutomaticPosition(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1091 : { 

(* ((Handle(AIS_Relation) *) theObject))->SetBndBox(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
, *(Standard_Real *)(Args->ChangeValue(4).Value()) 
, *(Standard_Real *)(Args->ChangeValue(5).Value()) 
, *(Standard_Real *)(Args->ChangeValue(6).Value()) 
)
;  	  } break;       

	case 1092 : { 

(* ((Handle(AIS_Relation) *) theObject))->SetColor(*(Quantity_Color *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1093 : { 

(* ((Handle(AIS_Relation) *) theObject))->SetColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1094 : { 

(* ((Handle(AIS_Relation) *) theObject))->SetExtShape(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1095 : { 

(* ((Handle(AIS_Relation) *) theObject))->SetFirstShape(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1096 : { 

(* ((Handle(AIS_Relation) *) theObject))->SetPlane(*(Handle(Geom_Plane) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 1097 : { 

(* ((Handle(AIS_Relation) *) theObject))->SetPosition(*(gp_Pnt *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1098 : { 

(* ((Handle(AIS_Relation) *) theObject))->SetSecondShape(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1099 : { 

(* ((Handle(AIS_Relation) *) theObject))->SetSymbolPrs(*(DsgPrs_ArrowSide *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1100 : { 

(* ((Handle(AIS_Relation) *) theObject))->SetText(*(TCollection_ExtendedString *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1101 : { 

(* ((Handle(AIS_Relation) *) theObject))->SetValue(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1102 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Relation) *) theObject))->SymbolPrs()
);
  	  } break;       

	case 1103 : { 

const TCollection_ExtendedString& aRet = (* ((Handle(AIS_Relation) *) theObject))->Text()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TCollection_ExtendedString),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 1104 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Relation) *) theObject))->Type()
);
  	  } break;       

	case 1105 : { 

(* ((Handle(AIS_Relation) *) theObject))->UnsetBndBox()
;  	  } break;       

	case 1106 : { 

(* ((Handle(AIS_Relation) *) theObject))->UnsetColor()
;  	  } break;       

	case 1107 : { 

Engine::Return((* ((Handle(AIS_Relation) *) theObject))->Value()
);
  	  } break;       

	case 1108 : { 

Engine::Return((Standard_Integer) AIS_Selection::AddSelect(*(Handle(Standard_Transient) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 1109 : { 

AIS_Selection::ClearAndSelect(*(Handle(Standard_Transient) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 1110 : { 

 Handle(AIS_Selection) aHand = new AIS_Selection(*(Standard_CString *)(Args->ChangeValue(1).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Selection));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1111 : { 

Engine::Return(AIS_Selection::CreateSelection(*(Standard_CString *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 1112 : { 

theHandle = new Engine_Handle(AIS_Selection::CurrentSelection()
,STANDARD_TYPE(AIS_Selection));
Engine::Return(*theHandle);
  	  } break;       

	case 1113 : { 

Engine::Return(AIS_Selection::Extent()
);
  	  } break;       

	case 1114 : { 

Engine::Return(AIS_Selection::Find(*(Standard_CString *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 1115 : { 

Engine::Return(AIS_Selection::Index(*(Standard_CString *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 1116 : { 

(* ((Handle(AIS_Selection) *) theObject))->Init()
;  	  } break;       

	case 1117 : { 

Engine::Return(AIS_Selection::IsSelected(*(Handle(Standard_Transient) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 1118 : { 

Engine::Return((* ((Handle(AIS_Selection) *) theObject))->More()
);
  	  } break;       

	case 1119 : { 

Engine::Return((* ((Handle(AIS_Selection) *) theObject))->NbStored()
);
  	  } break;       

	case 1120 : { 

(* ((Handle(AIS_Selection) *) theObject))->Next()
;  	  } break;       

	case 1121 : { 

AIS_Selection::Remove(*(Standard_CString *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1122 : { 

AIS_Selection::Select()
;  	  } break;       

	case 1123 : { 

Engine::Return((Standard_Integer) AIS_Selection::Select(*(Handle(Standard_Transient) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 1124 : { 

theHandle = new Engine_Handle(AIS_Selection::Selection(*(Standard_CString *)(Args->ChangeValue(1).Value()) 
)
,STANDARD_TYPE(AIS_Selection));
Engine::Return(*theHandle);
  	  } break;       

	case 1125 : { 

Engine::Return(AIS_Selection::SetCurrentSelection(*(Standard_CString *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 1126 : { 

theHandle = new Engine_Handle(AIS_Selection::Single()
,STANDARD_TYPE(Standard_Transient));
Engine::Return(*theHandle);
  	  } break;       

	case 1127 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Selection) *) theObject))->Value()
,STANDARD_TYPE(Standard_Transient));
Engine::Return(*theHandle);
  	  } break;       

	case 1128 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_SequenceNodeOfSequenceOfDimension) *) theObject))->Value()
,STANDARD_TYPE(AIS_Relation));
Engine::Return(*theHandle);
  	  } break;       

	case 1129 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_SequenceNodeOfSequenceOfInteractive) *) theObject))->Value()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 1130 : { 

((AIS_SequenceOfDimension *) theObject)->Append(*(Handle(AIS_Relation) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 1131 : { 

((AIS_SequenceOfDimension *) theObject)->Append(*(AIS_SequenceOfDimension *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1132 : { 

const AIS_SequenceOfDimension& aRet = ((AIS_SequenceOfDimension *) theObject)->Assign(*(AIS_SequenceOfDimension *)(Args->ChangeValue(1).Value()) 
)
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(AIS_SequenceOfDimension),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 1133 : { 

theHandle = new Engine_Handle(((AIS_SequenceOfDimension *) theObject)->ChangeValue(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
,STANDARD_TYPE(AIS_Relation));
Engine::Return(*theHandle);
  	  } break;       

	case 1134 : { 

((AIS_SequenceOfDimension *) theObject)->Clear()
;  	  } break;       

	case 1135 : { 

 AIS_SequenceOfDimension *aHand = new AIS_SequenceOfDimension();
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_SequenceOfDimension)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 1136 : { 

theHandle = new Engine_Handle(((AIS_SequenceOfDimension *) theObject)->First()
,STANDARD_TYPE(AIS_Relation));
Engine::Return(*theHandle);
  	  } break;       

	case 1137 : { 

((AIS_SequenceOfDimension *) theObject)->InsertAfter(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Handle(AIS_Relation) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 1138 : { 

((AIS_SequenceOfDimension *) theObject)->InsertAfter(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(AIS_SequenceOfDimension *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 1139 : { 

((AIS_SequenceOfDimension *) theObject)->InsertBefore(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Handle(AIS_Relation) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 1140 : { 

((AIS_SequenceOfDimension *) theObject)->InsertBefore(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(AIS_SequenceOfDimension *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 1141 : { 

theHandle = new Engine_Handle(((AIS_SequenceOfDimension *) theObject)->Last()
,STANDARD_TYPE(AIS_Relation));
Engine::Return(*theHandle);
  	  } break;       

	case 1142 : { 

((AIS_SequenceOfDimension *) theObject)->Prepend(*(Handle(AIS_Relation) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 1143 : { 

((AIS_SequenceOfDimension *) theObject)->Prepend(*(AIS_SequenceOfDimension *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1144 : { 

((AIS_SequenceOfDimension *) theObject)->Remove(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1145 : { 

((AIS_SequenceOfDimension *) theObject)->Remove(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 1146 : { 

((AIS_SequenceOfDimension *) theObject)->SetValue(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Handle(AIS_Relation) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 1147 : { 

((AIS_SequenceOfDimension *) theObject)->Split(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(AIS_SequenceOfDimension *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 1148 : { 

theHandle = new Engine_Handle(((AIS_SequenceOfDimension *) theObject)->Value(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
,STANDARD_TYPE(AIS_Relation));
Engine::Return(*theHandle);
  	  } break;       

	case 1149 : { 

((AIS_SequenceOfInteractive *) theObject)->Append(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 1150 : { 

((AIS_SequenceOfInteractive *) theObject)->Append(*(AIS_SequenceOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1151 : { 

const AIS_SequenceOfInteractive& aRet = ((AIS_SequenceOfInteractive *) theObject)->Assign(*(AIS_SequenceOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(AIS_SequenceOfInteractive),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 1152 : { 

theHandle = new Engine_Handle(((AIS_SequenceOfInteractive *) theObject)->ChangeValue(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 1153 : { 

((AIS_SequenceOfInteractive *) theObject)->Clear()
;  	  } break;       

	case 1154 : { 

 AIS_SequenceOfInteractive *aHand = new AIS_SequenceOfInteractive();
 theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(AIS_SequenceOfInteractive)); 
 Engine::Return(*theHandle);                                       
  	  } break;       

	case 1155 : { 

theHandle = new Engine_Handle(((AIS_SequenceOfInteractive *) theObject)->First()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 1156 : { 

((AIS_SequenceOfInteractive *) theObject)->InsertAfter(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 1157 : { 

((AIS_SequenceOfInteractive *) theObject)->InsertAfter(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(AIS_SequenceOfInteractive *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 1158 : { 

((AIS_SequenceOfInteractive *) theObject)->InsertBefore(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 1159 : { 

((AIS_SequenceOfInteractive *) theObject)->InsertBefore(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(AIS_SequenceOfInteractive *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 1160 : { 

theHandle = new Engine_Handle(((AIS_SequenceOfInteractive *) theObject)->Last()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 1161 : { 

((AIS_SequenceOfInteractive *) theObject)->Prepend(*(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 1162 : { 

((AIS_SequenceOfInteractive *) theObject)->Prepend(*(AIS_SequenceOfInteractive *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1163 : { 

((AIS_SequenceOfInteractive *) theObject)->Remove(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1164 : { 

((AIS_SequenceOfInteractive *) theObject)->Remove(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 1165 : { 

((AIS_SequenceOfInteractive *) theObject)->SetValue(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(Handle(AIS_InteractiveObject) *)(Args->ChangeValue(2).Value())
)
;  	  } break;       

	case 1166 : { 

((AIS_SequenceOfInteractive *) theObject)->Split(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
, *(AIS_SequenceOfInteractive *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 1167 : { 

theHandle = new Engine_Handle(((AIS_SequenceOfInteractive *) theObject)->Value(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 1168 : { 

Engine::Return((* ((Handle(AIS_Shape) *) theObject))->AcceptShapeDecomposition()
);
  	  } break;       

	case 1169 : { 

const Bnd_Box& aRet = (* ((Handle(AIS_Shape) *) theObject))->BoundingBox()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(Bnd_Box),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 1170 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Shape) *) theObject))->Color()
);
  	  } break;       

	case 1171 : { 

(* ((Handle(AIS_Shape) *) theObject))->Color(*(Quantity_Color *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1172 : { 

 Handle(AIS_Shape) aHand = new AIS_Shape(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Shape));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1173 : { 

Engine::Return(AIS_Shape::GetDeflection(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(Handle(Prs3d_Drawer) *)(Args->ChangeValue(2).Value())
)
);
  	  } break;       

	case 1174 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Shape) *) theObject))->Material()
);
  	  } break;       

	case 1175 : { 

Engine::Return((* ((Handle(AIS_Shape) *) theObject))->OwnDeviationAngle(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
,1);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(2).Value()) 
,2);
  	  } break;       

	case 1176 : { 

Engine::Return((* ((Handle(AIS_Shape) *) theObject))->OwnDeviationCoefficient(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
,1);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(2).Value()) 
,2);
  	  } break;       

	case 1177 : { 

Engine::Return((* ((Handle(AIS_Shape) *) theObject))->OwnHLRDeviationAngle(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
,1);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(2).Value()) 
,2);
  	  } break;       

	case 1178 : { 

Engine::Return((* ((Handle(AIS_Shape) *) theObject))->OwnHLRDeviationCoefficient(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
,1);
Engine::Return(*(Standard_Real *)(Args->ChangeValue(2).Value()) 
,2);
  	  } break;       

	case 1179 : { 

Engine::Return(AIS_Shape::SelectionMode(*(TopAbs_ShapeEnum *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 1180 : { 

Engine::Return((Standard_Integer) AIS_Shape::SelectionType(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 1181 : { 

(* ((Handle(AIS_Shape) *) theObject))->Set(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1182 : { 

(* ((Handle(AIS_Shape) *) theObject))->SetAngleAndDeviation(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1183 : { 

(* ((Handle(AIS_Shape) *) theObject))->SetColor(*(Quantity_Color *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1184 : { 

(* ((Handle(AIS_Shape) *) theObject))->SetColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1185 : { 

(* ((Handle(AIS_Shape) *) theObject))->SetHLRAngleAndDeviation(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1186 : { 

(* ((Handle(AIS_Shape) *) theObject))->SetMaterial(*(Graphic3d_MaterialAspect *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1187 : { 

(* ((Handle(AIS_Shape) *) theObject))->SetMaterial(*(Graphic3d_NameOfMaterial *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1188 : { 

Engine::Return((* ((Handle(AIS_Shape) *) theObject))->SetOwnDeviationAngle()
);
  	  } break;       

	case 1189 : { 

(* ((Handle(AIS_Shape) *) theObject))->SetOwnDeviationAngle(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1190 : { 

Engine::Return((* ((Handle(AIS_Shape) *) theObject))->SetOwnDeviationCoefficient()
);
  	  } break;       

	case 1191 : { 

(* ((Handle(AIS_Shape) *) theObject))->SetOwnDeviationCoefficient(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1192 : { 

Engine::Return((* ((Handle(AIS_Shape) *) theObject))->SetOwnHLRDeviationAngle()
);
  	  } break;       

	case 1193 : { 

(* ((Handle(AIS_Shape) *) theObject))->SetOwnHLRDeviationAngle(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1194 : { 

Engine::Return((* ((Handle(AIS_Shape) *) theObject))->SetOwnHLRDeviationCoefficient()
);
  	  } break;       

	case 1195 : { 

(* ((Handle(AIS_Shape) *) theObject))->SetOwnHLRDeviationCoefficient(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1196 : { 

(* ((Handle(AIS_Shape) *) theObject))->SetTransparency(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1197 : { 

(* ((Handle(AIS_Shape) *) theObject))->SetTransparency()
;  	  } break;       

	case 1198 : { 

(* ((Handle(AIS_Shape) *) theObject))->SetWidth(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1199 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_Shape) *) theObject))->Shape()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 1200 : { 

Engine::Return((* ((Handle(AIS_Shape) *) theObject))->Signature()
);
  	  } break;       

	case 1201 : { 

Engine::Return((* ((Handle(AIS_Shape) *) theObject))->Transparency()
);
  	  } break;       

	case 1202 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Shape) *) theObject))->Type()
);
  	  } break;       

	case 1203 : { 

(* ((Handle(AIS_Shape) *) theObject))->UnsetColor()
;  	  } break;       

	case 1204 : { 

(* ((Handle(AIS_Shape) *) theObject))->UnsetMaterial()
;  	  } break;       

	case 1205 : { 

(* ((Handle(AIS_Shape) *) theObject))->UnsetTransparency()
;  	  } break;       

	case 1206 : { 

(* ((Handle(AIS_Shape) *) theObject))->UnsetWidth()
;  	  } break;       

	case 1207 : { 

Engine::Return((* ((Handle(AIS_Shape) *) theObject))->UserAngle()
);
  	  } break;       

	case 1208 : { 

 Handle(AIS_SignatureFilter) aHand = new AIS_SignatureFilter(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
, *(Standard_Integer *)(Args->ChangeValue(2).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_SignatureFilter));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1209 : { 

Engine::Return((* ((Handle(AIS_SignatureFilter) *) theObject))->IsOk(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

	case 1210 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_StdMapNodeOfMapOfInteractive) *) theObject))->Key()
,STANDARD_TYPE(AIS_InteractiveObject));
Engine::Return(*theHandle);
  	  } break;       

	case 1211 : { 

(* ((Handle(AIS_SymmetricRelation) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 1212 : { 

 Handle(AIS_SymmetricRelation) aHand = new AIS_SymmetricRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(3).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(4).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_SymmetricRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1213 : { 

const TopoDS_Shape& aRet = (* ((Handle(AIS_SymmetricRelation) *) theObject))->GetTool()
;
theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(TopoDS_Shape),Standard_False);
Engine::Return(*theHandle);
  	  } break;       

	case 1214 : { 

Engine::Return((* ((Handle(AIS_SymmetricRelation) *) theObject))->IsMovable()
);
  	  } break;       

	case 1215 : { 

(* ((Handle(AIS_SymmetricRelation) *) theObject))->SetTool(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1216 : { 

(* ((Handle(AIS_TangentRelation) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 1217 : { 

 Handle(AIS_TangentRelation) aHand = new AIS_TangentRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
, *(Standard_Integer *)(Args->ChangeValue(4).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_TangentRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1218 : { 

 Handle(AIS_TangentRelation) aHand = new AIS_TangentRelation(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
, *(TopoDS_Shape *)(Args->ChangeValue(2).Value()) 
, *(Handle(Geom_Plane) *)(Args->ChangeValue(3).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_TangentRelation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1219 : { 

Engine::Return((* ((Handle(AIS_TangentRelation) *) theObject))->ExternRef()
);
  	  } break;       

	case 1220 : { 

(* ((Handle(AIS_TangentRelation) *) theObject))->SetExternRef(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1221 : { 

 Handle(AIS_TexturedShape) aHand = new AIS_TexturedShape(*(TopoDS_Shape *)(Args->ChangeValue(1).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_TexturedShape));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1222 : { 

Engine::Return((* ((Handle(AIS_TexturedShape) *) theObject))->Deflection()
);
  	  } break;       

	case 1223 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->DisableTextureModulate()
;  	  } break;       

	case 1224 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->EnableTextureModulate()
;  	  } break;       

	case 1225 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->SetTextureFileName(*(TCollection_AsciiString *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1226 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->SetTextureMapOff()
;  	  } break;       

	case 1227 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->SetTextureMapOn()
;  	  } break;       

	case 1228 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->SetTextureOrigin(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 1229 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->SetTextureOrigin(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 1230 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->SetTextureOrigin(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1231 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->SetTextureRepeat(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 1232 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->SetTextureRepeat(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 1233 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->SetTextureRepeat(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1234 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->SetTextureScale(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
, *(Standard_Real *)(Args->ChangeValue(3).Value()) 
)
;  	  } break;       

	case 1235 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->SetTextureScale(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
, *(Standard_Real *)(Args->ChangeValue(2).Value()) 
)
;  	  } break;       

	case 1236 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->SetTextureScale(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1237 : { 

Engine::Return((* ((Handle(AIS_TexturedShape) *) theObject))->ShowTriangles()
);
  	  } break;       

	case 1238 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->ShowTriangles(*(Standard_Boolean *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1239 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->ShowTriangles()
;  	  } break;       

	case 1240 : { 

Engine::Return((* ((Handle(AIS_TexturedShape) *) theObject))->TextureFile()
);
  	  } break;       

	case 1241 : { 

Engine::Return((* ((Handle(AIS_TexturedShape) *) theObject))->TextureMapState()
);
  	  } break;       

	case 1242 : { 

Engine::Return((* ((Handle(AIS_TexturedShape) *) theObject))->TextureModulate()
);
  	  } break;       

	case 1243 : { 

Engine::Return((* ((Handle(AIS_TexturedShape) *) theObject))->TextureOrigin()
);
  	  } break;       

	case 1244 : { 

Engine::Return((* ((Handle(AIS_TexturedShape) *) theObject))->TextureRepeat()
);
  	  } break;       

	case 1245 : { 

Engine::Return((* ((Handle(AIS_TexturedShape) *) theObject))->TextureScale()
);
  	  } break;       

	case 1246 : { 

Engine::Return((* ((Handle(AIS_TexturedShape) *) theObject))->TextureScaleU()
);
  	  } break;       

	case 1247 : { 

Engine::Return((* ((Handle(AIS_TexturedShape) *) theObject))->TextureScaleV()
);
  	  } break;       

	case 1248 : { 

Engine::Return((* ((Handle(AIS_TexturedShape) *) theObject))->TextureUOrigin()
);
  	  } break;       

	case 1249 : { 

Engine::Return((* ((Handle(AIS_TexturedShape) *) theObject))->TextureVOrigin()
);
  	  } break;       

	case 1250 : { 

Engine::Return((* ((Handle(AIS_TexturedShape) *) theObject))->URepeat()
);
  	  } break;       

	case 1251 : { 

(* ((Handle(AIS_TexturedShape) *) theObject))->UpdateAttributes()
;  	  } break;       

	case 1252 : { 

Engine::Return((* ((Handle(AIS_TexturedShape) *) theObject))->VRepeat()
);
  	  } break;       

	case 1253 : { 

 Handle(AIS_Triangulation) aHand = new AIS_Triangulation(*(Handle(Poly_Triangulation) *)(Args->ChangeValue(1).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Triangulation));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1254 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Triangulation) *) theObject))->GetColors()
,STANDARD_TYPE(TColStd_HArray1OfInteger));
Engine::Return(*theHandle);
  	  } break;       

	case 1255 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Triangulation) *) theObject))->GetTriangulation()
,STANDARD_TYPE(Poly_Triangulation));
Engine::Return(*theHandle);
  	  } break;       

	case 1256 : { 

(* ((Handle(AIS_Triangulation) *) theObject))->SetColors(*(Handle(TColStd_HArray1OfInteger) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 1257 : { 

(* ((Handle(AIS_Triangulation) *) theObject))->SetTriangulation(*(Handle(Poly_Triangulation) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 1258 : { 

Engine::Return((* ((Handle(AIS_Trihedron) *) theObject))->AcceptDisplayMode(*(Standard_Integer *)(Args->ChangeValue(1).Value()) 
)
);
  	  } break;       

	case 1259 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Trihedron) *) theObject))->ArrowColor()
);
  	  } break;       

	case 1260 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Trihedron) *) theObject))->Axis()
,STANDARD_TYPE(AIS_Axis));
Engine::Return(*theHandle);
  	  } break;       

	case 1261 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Trihedron) *) theObject))->Component()
,STANDARD_TYPE(Geom_Axis2Placement));
Engine::Return(*theHandle);
  	  } break;       

	case 1262 : { 

(* ((Handle(AIS_Trihedron) *) theObject))->Compute(*(Handle(Prs3d_Projector) *)(Args->ChangeValue(1).Value())
, *(Handle(Geom_Transformation) *)(Args->ChangeValue(2).Value())
, *(Handle(Prs3d_Presentation) *)(Args->ChangeValue(3).Value())
)
;  	  } break;       

	case 1263 : { 

 Handle(AIS_Trihedron) aHand = new AIS_Trihedron(*(Handle(Geom_Axis2Placement) *)(Args->ChangeValue(1).Value())
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_Trihedron));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1264 : { 

(* ((Handle(AIS_Trihedron) *) theObject))->ExtremityPoints(*(TColgp_Array1OfPnt *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1265 : { 

Engine::Return((* ((Handle(AIS_Trihedron) *) theObject))->HasArrowColor()
);
  	  } break;       

	case 1266 : { 

Engine::Return((* ((Handle(AIS_Trihedron) *) theObject))->HasOwnSize()
);
  	  } break;       

	case 1267 : { 

Engine::Return((* ((Handle(AIS_Trihedron) *) theObject))->HasTextColor()
);
  	  } break;       

	case 1268 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Trihedron) *) theObject))->Position()
,STANDARD_TYPE(AIS_Point));
Engine::Return(*theHandle);
  	  } break;       

	case 1269 : { 

(* ((Handle(AIS_Trihedron) *) theObject))->SetArrowColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1270 : { 

(* ((Handle(AIS_Trihedron) *) theObject))->SetColor(*(Quantity_Color *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1271 : { 

(* ((Handle(AIS_Trihedron) *) theObject))->SetColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1272 : { 

(* ((Handle(AIS_Trihedron) *) theObject))->SetComponent(*(Handle(Geom_Axis2Placement) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 1273 : { 

(* ((Handle(AIS_Trihedron) *) theObject))->SetContext(*(Handle(AIS_InteractiveContext) *)(Args->ChangeValue(1).Value())
)
;  	  } break;       

	case 1274 : { 

(* ((Handle(AIS_Trihedron) *) theObject))->SetSize(*(Standard_Real *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1275 : { 

(* ((Handle(AIS_Trihedron) *) theObject))->SetTextColor(*(Quantity_NameOfColor *)(Args->ChangeValue(1).Value()) 
)
;  	  } break;       

	case 1276 : { 

Engine::Return((* ((Handle(AIS_Trihedron) *) theObject))->Signature()
);
  	  } break;       

	case 1277 : { 

Engine::Return((* ((Handle(AIS_Trihedron) *) theObject))->Size()
);
  	  } break;       

	case 1278 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Trihedron) *) theObject))->TextColor()
);
  	  } break;       

	case 1279 : { 

Engine::Return((Standard_Integer) (* ((Handle(AIS_Trihedron) *) theObject))->Type()
);
  	  } break;       

	case 1280 : { 

(* ((Handle(AIS_Trihedron) *) theObject))->UnsetColor()
;  	  } break;       

	case 1281 : { 

(* ((Handle(AIS_Trihedron) *) theObject))->UnsetSize()
;  	  } break;       

	case 1282 : { 

(* ((Handle(AIS_Trihedron) *) theObject))->UnsetWidth()
;  	  } break;       

	case 1283 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Trihedron) *) theObject))->XAxis()
,STANDARD_TYPE(AIS_Axis));
Engine::Return(*theHandle);
  	  } break;       

	case 1284 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Trihedron) *) theObject))->XYPlane()
,STANDARD_TYPE(AIS_Plane));
Engine::Return(*theHandle);
  	  } break;       

	case 1285 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Trihedron) *) theObject))->XZPlane()
,STANDARD_TYPE(AIS_Plane));
Engine::Return(*theHandle);
  	  } break;       

	case 1286 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Trihedron) *) theObject))->YAxis()
,STANDARD_TYPE(AIS_Axis));
Engine::Return(*theHandle);
  	  } break;       

	case 1287 : { 

theHandle = new Engine_Handle((* ((Handle(AIS_Trihedron) *) theObject))->YZPlane()
,STANDARD_TYPE(AIS_Plane));
Engine::Return(*theHandle);
  	  } break;       

	case 1288 : { 

 Handle(AIS_TypeFilter) aHand = new AIS_TypeFilter(*(AIS_KindOfInteractive *)(Args->ChangeValue(1).Value()) 
);
 theHandle = new Engine_Handle(aHand,STANDARD_TYPE(AIS_TypeFilter));
 Engine::Return(*theHandle);                                 
  	  } break;       

	case 1289 : { 

Engine::Return((* ((Handle(AIS_TypeFilter) *) theObject))->IsOk(*(Handle(SelectMgr_EntityOwner) *)(Args->ChangeValue(1).Value())
)
);
  	  } break;       

 }
}



extern "C" Standard_EXPORT void jiAIS_CallExecute (Engine_InterfacePlugin& anint,
			                               const Engine_PSignature& aSignature,	
                                                      const Standard_Address  theObject)
{                                                                           
  char* ErrMsg = "Error: We have found a method but we can't execute it:";
                                                                            
  static int k_init = 0;
  if (!k_init) {
     k_init =1;

   Engine_TypeTool::Register(AIS_DisplayMode_Type_());
   Engine_TypeTool::Register(Prs3d_RadiusAspect_Type_());
   Engine_TypeTool::Register(Geom_Axis1Placement_Type_());
   Engine_TypeTool::Register(TColStd_ListOfTransient_Type_());
   Engine_TypeTool::Register(AIS_ExclusionFilter_Type_());
   Engine_TypeTool::Register(gp_Ax1_Type_());
   Engine_TypeTool::Register(Geom_Surface_Type_());
   Engine_TypeTool::Register(AIS_LocalContext_Type_());
   Engine_TypeTool::Register(Prs3d_PlaneAspect_Type_());
   Engine_TypeTool::Register(AIS_SequenceOfInteractive_Type_());
   Engine_TypeTool::Register(SelectMgr_EntityOwner_Type_());
   Engine_TypeTool::Register(AIS_RadiusDimension_Type_());
   Engine_TypeTool::Register(AIS_KindOfSurface_Type_());
   Engine_TypeTool::Register(SelectMgr_Selection_Type_());
   Engine_TypeTool::Register(AIS_ConnectedInteractive_Type_());
   Engine_TypeTool::Register(Quantity_Color_Type_());
   Engine_TypeTool::Register(TColStd_HArray1OfInteger_Type_());
   Engine_TypeTool::Register(AIS_C0RegularityFilter_Type_());
   Engine_TypeTool::Register(Aspect_TypeOfFacingModel_Type_());
   Engine_TypeTool::Register(AIS_Point_Type_());
   Engine_TypeTool::Register(AIS_ListNodeOfListOfInteractive_Type_());
   Engine_TypeTool::Register(AIS_ListOfInteractive_Type_());
   Engine_TypeTool::Register(AIS_SequenceNodeOfSequenceOfInteractive_Type_());
   Engine_TypeTool::Register(gp_Pln_Type_());
   Engine_TypeTool::Register(AIS_EllipseRadiusDimension_Type_());
   Engine_TypeTool::Register(AIS_MultipleConnectedInteractive_Type_());
   Engine_TypeTool::Register(TCollection_ExtendedString_Type_());
   Engine_TypeTool::Register(Aspect_TypeOfDeflection_Type_());
   Engine_TypeTool::Register(gp_Dir_Type_());
   Engine_TypeTool::Register(Prs3d_ShadingAspect_Type_());
   Engine_TypeTool::Register(Prs3d_BasicAspect_Type_());
   Engine_TypeTool::Register(gp_Pnt_Type_());
   Engine_TypeTool::Register(V3d_Viewer_Type_());
   Engine_TypeTool::Register(Prs3d_LengthAspect_Type_());
   Engine_TypeTool::Register(SelectMgr_IndexedMapOfOwner_Type_());
   Engine_TypeTool::Register(AIS_EqualRadiusRelation_Type_());
   Engine_TypeTool::Register(AIS_MapIteratorOfMapOfInteractive_Type_());
   Engine_TypeTool::Register(AIS_IndexedDataMapNodeOfIndexedDataMapOfOwnerPrs_Type_());
   Engine_TypeTool::Register(Quantity_NameOfColor_Type_());
   Engine_TypeTool::Register(AIS_ClearMode_Type_());
   Engine_TypeTool::Register(Prs3d_ArrowAspect_Type_());
   Engine_TypeTool::Register(AIS_MinRadiusDimension_Type_());
   Engine_TypeTool::Register(AIS_DiameterDimension_Type_());
   Engine_TypeTool::Register(Standard_Real_Type_());
   Engine_TypeTool::Register(Prs3d_DatumAspect_Type_());
   Engine_TypeTool::Register(AIS_IndexedDataMapOfOwnerPrs_Type_());
   Engine_TypeTool::Register(SelectMgr_SelectionManager_Type_());
   Engine_TypeTool::Register(Standard_Transient_Type_());
   Engine_TypeTool::Register(AIS_TypeOfPlane_Type_());
   Engine_TypeTool::Register(PrsMgr_TypeOfPresentation3d_Type_());
   Engine_TypeTool::Register(TopoDS_Face_Type_());
   Engine_TypeTool::Register(AIS_Shape_Type_());
   Engine_TypeTool::Register(AIS_TypeOfAttribute_Type_());
   Engine_TypeTool::Register(TopoDS_Shape_Type_());
   Engine_TypeTool::Register(SelectMgr_ListOfFilter_Type_());
   Engine_TypeTool::Register(Geom_Plane_Type_());
   Engine_TypeTool::Register(gp_Trsf_Type_());
   Engine_TypeTool::Register(Prs3d_Presentation_Type_());
   Engine_TypeTool::Register(AIS_Chamf3dDimension_Type_());
   Engine_TypeTool::Register(AIS_SelectStatus_Type_());
   Engine_TypeTool::Register(AIS_Relation_Type_());
   Engine_TypeTool::Register(AIS_MultipleConnectedShape_Type_());
   Engine_TypeTool::Register(AIS_InteractiveObject_Type_());
   Engine_TypeTool::Register(TopoDS_Wire_Type_());
   Engine_TypeTool::Register(AIS_TypeOfAxis_Type_());
   Engine_TypeTool::Register(AIS_MaxRadiusDimension_Type_());
   Engine_TypeTool::Register(Aspect_TypeOfDegenerateModel_Type_());
   Engine_TypeTool::Register(AIS_Triangulation_Type_());
   Engine_TypeTool::Register(AIS_ConnectedShape_Type_());
   Engine_TypeTool::Register(Standard_Boolean_Type_());
   Engine_TypeTool::Register(Prs3d_Projector_Type_());
   Engine_TypeTool::Register(AIS_PerpendicularRelation_Type_());
   Engine_TypeTool::Register(AIS_Trihedron_Type_());
   Engine_TypeTool::Register(AIS_TypeOfDist_Type_());
   Engine_TypeTool::Register(Standard_Integer_Type_());
   Engine_TypeTool::Register(AIS_NDataMapOfTransientIteratorOfListTransient_Type_());
   Engine_TypeTool::Register(AIS_Chamf2dDimension_Type_());
   Engine_TypeTool::Register(Prs3d_TextAspect_Type_());
   Engine_TypeTool::Register(AIS_SequenceNodeOfSequenceOfDimension_Type_());
   Engine_TypeTool::Register(AIS_NListTransient_Type_());
   Engine_TypeTool::Register(Geom_Circle_Type_());
   Engine_TypeTool::Register(Geom_Point_Type_());
   Engine_TypeTool::Register(AIS_ConnectStatus_Type_());
   Engine_TypeTool::Register(Aspect_TypeOfLine_Type_());
   Engine_TypeTool::Register(AIS_Line_Type_());
   Engine_TypeTool::Register(AIS_KindOfInteractive_Type_());
   Engine_TypeTool::Register(AIS_ParallelRelation_Type_());
   Engine_TypeTool::Register(StdSelect_ViewerSelector3d_Type_());
   Engine_TypeTool::Register(Graphic3d_MaterialAspect_Type_());
   Engine_TypeTool::Register(Aspect_TypeOfMarker_Type_());
   Engine_TypeTool::Register(AIS_LengthDimension_Type_());
   Engine_TypeTool::Register(Select3D_Projector_Type_());
   Engine_TypeTool::Register(AIS_MapOfInteractive_Type_());
   Engine_TypeTool::Register(AIS_SignatureFilter_Type_());
   Engine_TypeTool::Register(V3d_View_Type_());
   Engine_TypeTool::Register(AIS_DataMapofIntegerListOfinteractive_Type_());
   Engine_TypeTool::Register(TopAbs_ShapeEnum_Type_());
   Engine_TypeTool::Register(AIS_AngleDimension_Type_());
   Engine_TypeTool::Register(TCollection_AsciiString_Type_());
   Engine_TypeTool::Register(DsgPrs_ArrowSide_Type_());
   Engine_TypeTool::Register(AIS_DataMapNodeOfDataMapofIntegerListOfinteractive_Type_());
   Engine_TypeTool::Register(AIS_Drawer_Type_());
   Engine_TypeTool::Register(Prs3d_Drawer_Type_());
   Engine_TypeTool::Register(AIS_TangentRelation_Type_());
   Engine_TypeTool::Register(AIS_PlaneTrihedron_Type_());
   Engine_TypeTool::Register(Graphic2d_GraphicObject_Type_());
   Engine_TypeTool::Register(TopoDS_Vertex_Type_());
   Engine_TypeTool::Register(AIS_NListIteratorOfListTransient_Type_());
   Engine_TypeTool::Register(AIS_OffsetDimension_Type_());
   Engine_TypeTool::Register(AIS_PToContext_Type_());
   Engine_TypeTool::Register(AIS_BadEdgeFilter_Type_());
   Engine_TypeTool::Register(TColStd_MapOfTransient_Type_());
   Engine_TypeTool::Register(SelectMgr_OrFilter_Type_());
   Engine_TypeTool::Register(AIS_StandardDatum_Type_());
   Engine_TypeTool::Register(AIS_EqualDistanceRelation_Type_());
   Engine_TypeTool::Register(AIS_AttributeFilter_Type_());
   Engine_TypeTool::Register(AIS_GraphicTool_Type_());
   Engine_TypeTool::Register(TColgp_Array1OfPnt2d_Type_());
   Engine_TypeTool::Register(AIS_DimensionOwner_Type_());
   Engine_TypeTool::Register(Prs3d_IsoAspect_Type_());
   Engine_TypeTool::Register(AIS_StdMapNodeOfMapOfInteractive_Type_());
   Engine_TypeTool::Register(Prs3d_AngleAspect_Type_());
   Engine_TypeTool::Register(AIS_TexturedShape_Type_());
   Engine_TypeTool::Register(AIS_MidPointRelation_Type_());
   Engine_TypeTool::Register(PrsMgr_PresentationManager2d_Type_());
   Engine_TypeTool::Register(AIS_KindOfDimension_Type_());
   Engine_TypeTool::Register(PrsMgr_PresentationManager3d_Type_());
   Engine_TypeTool::Register(AIS_Axis_Type_());
   Engine_TypeTool::Register(AIS_ListIteratorOfListOfInteractive_Type_());
   Engine_TypeTool::Register(AIS_KindOfUnit_Type_());
   Engine_TypeTool::Register(AIS_DataMapIteratorOfDataMapofIntegerListOfinteractive_Type_());
   Engine_TypeTool::Register(TColStd_ListOfInteger_Type_());
   Engine_TypeTool::Register(Standard_CString_Type_());
   Engine_TypeTool::Register(AIS_StatusOfPick_Type_());
   Engine_TypeTool::Register(Geom_Axis2Placement_Type_());
   Engine_TypeTool::Register(AIS_StatusOfDetection_Type_());
   Engine_TypeTool::Register(AIS_DisplayStatus_Type_());
   Engine_TypeTool::Register(AIS_Selection_Type_());
   Engine_TypeTool::Register(SelectMgr_SelectableObject_Type_());
   Engine_TypeTool::Register(gp_Lin_Type_());
   Engine_TypeTool::Register(AIS_TypeOfIso_Type_());
   Engine_TypeTool::Register(Prs3d_LineAspect_Type_());
   Engine_TypeTool::Register(gp_Elips_Type_());
   Engine_TypeTool::Register(TColgp_Array1OfPnt_Type_());
   Engine_TypeTool::Register(AIS_SymmetricRelation_Type_());
   Engine_TypeTool::Register(Geom_Line_Type_());
   Engine_TypeTool::Register(AIS_ConcentricRelation_Type_());
   Engine_TypeTool::Register(Prs3d_PointAspect_Type_());
   Engine_TypeTool::Register(Geom_Transformation_Type_());
   Engine_TypeTool::Register(TopoDS_Edge_Type_());
   Engine_TypeTool::Register(Poly_Triangulation_Type_());
   Engine_TypeTool::Register(AIS_FixRelation_Type_());
   Engine_TypeTool::Register(Graphic3d_NameOfMaterial_Type_());
   Engine_TypeTool::Register(AIS_TypeFilter_Type_());
   Engine_TypeTool::Register(AIS_InteractiveContext_Type_());
   Engine_TypeTool::Register(SelectMgr_Filter_Type_());
   Engine_TypeTool::Register(Geom_Curve_Type_());
   Engine_TypeTool::Register(AIS_IdenticRelation_Type_());
   Engine_TypeTool::Register(AIS_Circle_Type_());
   Engine_TypeTool::Register(AIS_SequenceOfDimension_Type_());
   Engine_TypeTool::Register(TopLoc_Location_Type_());
   Engine_TypeTool::Register(Bnd_Box_Type_());
   Engine_TypeTool::Register(AIS_Plane_Type_());
    return;
  }
  Standard_SStream                   Err;                                   
  Engine_Handle                     *theHandle;                             
  Standard_Integer                   theCase = aSignature->MethodId();       
  Engine_PArrayOfArguments Args = aSignature->PArrayOfArguments();                 
  Engine_Status                      Eng_Status  = Engine_Succes;           
  {                                                                         
    try {                                                                   


 if ((theCase >= 1) && (theCase < 513)) {
    jiAIS_Execute_1(theCase,Args,theObject);
 }


 if ((theCase >= 513) && (theCase < 1025)) {
    jiAIS_Execute_2(theCase,Args,theObject);
 }


 if ((theCase >= 1025) && (theCase < 1290)) {
    jiAIS_Execute_3(theCase,Args,theObject);
 }

                                                              
      if ((theCase <= 0)  || (theCase >= 1290)) {                                               
          Err << ErrMsg; aSignature->Display(Err);  Err << (char) 0;         
	   Engine::Return(GetSString(Err),-1);                            
          Eng_Status = Engine_Error;                                        
      }                                                                     
                                                                            
    } 
    catch(Standard_Failure) {                                             
#ifdef OBJS                                            
      os_transaction* curTrans = os_transaction::get_current();
      if (curTrans) os_transaction::abort_top_level ();
#endif
      Err << "Exception: ";                                               
      aSignature->Display(Err);                                              
      Err << ": raises the exception: "                                   
          <<Standard_Failure::Caught();                                     
      Err << (char) 0;                                                      
      Engine::Return(GetSString(Err),-1);                                
      Eng_Status = Engine_Exception;                                        
    }                                                                       
  }                                                                         
                                                                            
  switch(Eng_Status) {                                                      
    case Engine_Exception:Engine_MethodException::Raise(GetSString(Err));
    case Engine_Error    :Engine_ExecutionError::Raise(GetSString(Err)); 
    default:
      break;	
  }                                                                         
}                                                                           
